@256
D=A
@SP
M=D
@Sys.init
0;JMP
(CALL)
@R15
M=D
@R13
D=M
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@5
D=A
@R15
D=D+M
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@R14
A=M
0;JMP
(RETURNS)
@LCL
D=M
@R13
M=D
@5
D=A
@R13
A=M-D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A
@SP
M=D+1
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@1
D=A
@R13
A=M-D
D=M
@THAT
M=D
@R14
A=M
0;JMP
(ADD)
@R13
M=D
@SP
A=M-1
D=M
M=0
@SP
M=M-1
A=M-1
M=M+D
@R13
A=M
0;JMP
(SUB)
@R13
M=D
@SP
A=M-1
D=M
M=0
@SP
M=M-1
A=M-1
M=M-D
@R13
A=M
0;JMP
(AND)
@R13
M=D
@SP
A=M-1
D=M
M=0
@SP
M=M-1
A=M-1
M=M&D
@R13
A=M
0;JMP
(OR)
@R13
M=D
@SP
A=M-1
D=M
M=0
@SP
M=M-1
A=M-1
M=M|D
@R13
A=M
0;JMP
(EQ)
@R13
M=D
@SP
A=M-1
D=M
M=0
@SP
M=M-1
A=M-1
D=M-D
M=-1
@FALSE
D;JNE
@R13
A=M
0;JMP
(GT)
@R13
M=D
@SP
A=M-1
D=M
M=0
@SP
M=M-1
A=M-1
D=M-D
M=-1
@FALSE
D;JLE
@R13
A=M
0;JMP
(LT)
@R13
M=D
@SP
A=M-1
D=M
M=0
@SP
M=M-1
A=M-1
D=M-D
M=-1
@FALSE
D;JGE
@R13
A=M
0;JMP
(FALSE)
@SP
A=M-1
M=0
@R13
A=M
0;JMP
(FUNCT)
@R13
M=D
@R14
D=M
(F_LOOP)
@SP
M=M+1
A=M-1
M=0
D=D-1
@F_LOOP
D;JGT
@R13
A=M
0;JMP
(IF)
@R13
M=D
@SP
A=M-1
D=M
M=0
@SP
M=M-1
@R13
A=M
0;JMP
(POP)
@R13
M=D
@SP
AM=M-1
D=M
M=0
@R13
A=M
M=D
@R14
A=M
0;JMP
(THS)
@R14
M=D
@THIS
D=A
@POP
0;JMP
(THT)
@R14
M=D
@THAT
D=A
@POP
0;JMP
//funct
(Player.new)
@0
D=A
@R14
M=D
@F0
D;JEQ
D=A
@FUNCT
0;JMP
(F0)
//Push C
@5
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN1
D=A
@R13
M=D
(call_Memory.alloc)
@Memory.alloc
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN1)
//Pop point
@POP_R2
D=A
@THS
0;JMP
(POP_R2)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R3
D=A
@R14
M=D
//THS
@0
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R3)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R4
D=A
@R14
M=D
//THS
@1
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R4)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R5
D=A
@R14
M=D
//THS
@2
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R5)
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R6
D=A
@R14
M=D
//THS
@3
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R6)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R7
D=A
@R14
M=D
//THS
@4
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R7)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN8
D=A
@R13
M=D
(call_Player.show)
@Player.show
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN8)
//Pop
@POP_R9
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R9)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Player.show)
@0
D=A
@R14
M=D
@F10
D;JEQ
D=A
@FUNCT
0;JMP
(F10)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R11
D=A
@THS
0;JMP
(POP_R11)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//call
@RETURN12
D=A
@R13
M=D
(call_Screen.setColor)
@Screen.setColor
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN12)
//Pop
@POP_R13
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R13)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN14
D=A
@R13
M=D
(call_Player.draw)
@Player.draw
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN14)
//Pop
@POP_R15
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R15)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Player.draw)
@0
D=A
@R14
M=D
@F16
D;JEQ
D=A
@FUNCT
0;JMP
(F16)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R17
D=A
@THS
0;JMP
(POP_R17)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R18
D=A
@ADD
0;JMP
(ADD_R18)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R19
D=A
@ADD
0;JMP
(ADD_R19)
//call
@RETURN20
D=A
@R13
M=D
(call_Screen.drawRectangle)
@Screen.drawRectangle
D=A
@R14
M=D
@4
D=A
@CALL
0;JMP
(RETURN20)
//Pop
@POP_R21
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R21)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Player.move)
@0
D=A
@R14
M=D
@F22
D;JEQ
D=A
@FUNCT
0;JMP
(F22)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R23
D=A
@THS
0;JMP
(POP_R23)
//Push THT
@4
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@130
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n24
D=A
@EQ
0;JMP
(n24)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@205
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n25
D=A
@GT
0;JMP
(n25)
//AND
@AND_R26
D=A
@AND
0;JMP
(AND_R26)
//if
@IF27
D=A
@IF
0;JMP
(IF27)
@Player.moveMOVE
D;JNE
//Push THT
@4
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@132
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n28
D=A
@EQ
0;JMP
(n28)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@265
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n29
D=A
@LT
0;JMP
(n29)
//AND
@AND_R30
D=A
@AND
0;JMP
(AND_R30)
//if
@IF31
D=A
@IF
0;JMP
(IF31)
@Player.moveMOVE
D;JNE
//goto
@Player.moveEND
0;JMP
(Player.moveMOVE)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-1
D=A
@R13
M=D
@call_Screen.setColor
0;JMP
(RETURN-1)
//Pop
@POP_R32
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R32)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R33
D=A
@ADD
0;JMP
(ADD_R33)
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R34
D=A
@ADD
0;JMP
(ADD_R34)
@RETURN-2
D=A
@R13
M=D
@call_Screen.drawRectangle
0;JMP
(RETURN-2)
//Pop
@POP_R35
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R35)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
@RETURN-3
D=A
@R13
M=D
@call_Screen.setColor
0;JMP
(RETURN-3)
//Pop
@POP_R36
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R36)
//Push THT
@4
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@132
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n37
D=A
@EQ
0;JMP
(n37)
//if
@IF38
D=A
@IF
0;JMP
(IF38)
@Player.moveRIGHT
D;JNE
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R39
D=A
@SUB
0;JMP
(SUB_R39)
//Pop
@POP_R40
D=A
@R14
M=D
//THS
@0
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R40)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@20
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R41
D=A
@ADD
0;JMP
(ADD_R41)
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R42
D=A
@ADD
0;JMP
(ADD_R42)
@RETURN-4
D=A
@R13
M=D
@call_Screen.drawRectangle
0;JMP
(RETURN-4)
//Pop
@POP_R43
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R43)
//goto
@Player.moveEND
0;JMP
(Player.moveRIGHT)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R44
D=A
@ADD
0;JMP
(ADD_R44)
//Pop
@POP_R45
D=A
@R14
M=D
//THS
@0
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R45)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@20
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R46
D=A
@ADD
0;JMP
(ADD_R46)
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R47
D=A
@ADD
0;JMP
(ADD_R47)
@RETURN-5
D=A
@R13
M=D
@call_Screen.drawRectangle
0;JMP
(RETURN-5)
//Pop
@POP_R48
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R48)
(Player.moveEND)
@RETURNS
0;JMP
//funct
(Obstacle.new)
@0
D=A
@R14
M=D
@F49
D;JEQ
D=A
@FUNCT
0;JMP
(F49)
//Push C
@5
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-6
D=A
@R13
M=D
@call_Memory.alloc
0;JMP
(RETURN-6)
//Pop point
@POP_R50
D=A
@THS
0;JMP
(POP_R50)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R51
D=A
@R14
M=D
//THS
@0
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R51)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R52
D=A
@R14
M=D
//THS
@1
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R52)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R53
D=A
@R14
M=D
//THS
@2
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R53)
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R54
D=A
@R14
M=D
//THS
@3
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R54)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN55
D=A
@R13
M=D
(call_Obstacle.show)
@Obstacle.show
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN55)
//Pop
@POP_R56
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R56)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Obstacle.dispose)
@0
D=A
@R14
M=D
@F57
D;JEQ
D=A
@FUNCT
0;JMP
(F57)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R58
D=A
@THS
0;JMP
(POP_R58)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN59
D=A
@R13
M=D
(call_Memory.deAlloc)
@Memory.deAlloc
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN59)
//Pop
@POP_R60
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R60)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Obstacle.show)
@0
D=A
@R14
M=D
@F61
D;JEQ
D=A
@FUNCT
0;JMP
(F61)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R62
D=A
@THS
0;JMP
(POP_R62)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
@RETURN-7
D=A
@R13
M=D
@call_Screen.setColor
0;JMP
(RETURN-7)
//Pop
@POP_R63
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R63)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN64
D=A
@R13
M=D
(call_Obstacle.draw)
@Obstacle.draw
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN64)
//Pop
@POP_R65
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R65)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Obstacle.draw)
@0
D=A
@R14
M=D
@F66
D;JEQ
D=A
@FUNCT
0;JMP
(F66)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R67
D=A
@THS
0;JMP
(POP_R67)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R68
D=A
@ADD
0;JMP
(ADD_R68)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R69
D=A
@ADD
0;JMP
(ADD_R69)
@RETURN-8
D=A
@R13
M=D
@call_Screen.drawRectangle
0;JMP
(RETURN-8)
//Pop
@POP_R70
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R70)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Obstacle.move)
@0
D=A
@R14
M=D
@F71
D;JEQ
D=A
@FUNCT
0;JMP
(F71)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R72
D=A
@THS
0;JMP
(POP_R72)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-9
D=A
@R13
M=D
@call_Screen.setColor
0;JMP
(RETURN-9)
//Pop
@POP_R73
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R73)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R74
D=A
@ADD
0;JMP
(ADD_R74)
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-10
D=A
@R13
M=D
@call_Screen.drawRectangle
0;JMP
(RETURN-10)
//Pop
@POP_R75
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R75)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
@RETURN-11
D=A
@R13
M=D
@call_Screen.setColor
0;JMP
(RETURN-11)
//Pop
@POP_R76
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R76)
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@7
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R77
D=A
@ADD
0;JMP
(ADD_R77)
//Pop
@POP_R78
D=A
@R14
M=D
//THS
@3
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R78)
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@225
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n79
D=A
@LT
0;JMP
(n79)
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@245
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n80
D=A
@GT
0;JMP
(n80)
//OR
@OR_R81
D=A
@OR
0;JMP
(OR_R81)
//if
@IF82
D=A
@IF
0;JMP
(IF82)
@Obstacle.moveCONTINUE0
D;JNE
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R83
D=A
@ADD
0;JMP
(ADD_R83)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n84
D=A
@LT
0;JMP
(n84)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THT
@2
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R85
D=A
@ADD
0;JMP
(ADD_R85)
//GT
@n86
D=A
@GT
0;JMP
(n86)
//OR
@OR_R87
D=A
@OR
0;JMP
(OR_R87)
//if
@IF88
D=A
@IF
0;JMP
(IF88)
@Obstacle.moveCONTINUE1
D;JNE
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//goto
@Obstacle.moveEND
0;JMP
(Obstacle.moveCONTINUE1)
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@255
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n89
D=A
@GT
0;JMP
(n89)
//if
@IF90
D=A
@IF
0;JMP
(IF90)
@Obstacle.moveDISPOSE
D;JNE
(Obstacle.moveCONTINUE0)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@7
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R91
D=A
@ADD
0;JMP
(ADD_R91)
//Pop
@POP_R92
D=A
@R14
M=D
//THS
@1
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R92)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R93
D=A
@ADD
0;JMP
(ADD_R93)
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-12
D=A
@R13
M=D
@call_Screen.drawRectangle
0;JMP
(RETURN-12)
//Pop
@POP_R94
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R94)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//goto
@Obstacle.moveEND
0;JMP
(Obstacle.moveDISPOSE)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN95
D=A
@R13
M=D
(call_Obstacle.dispose)
@Obstacle.dispose
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN95)
//Pop
@POP_R96
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R96)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
(Obstacle.moveEND)
@RETURNS
0;JMP
//funct
(ObstacleRun.newGame)
@0
D=A
@R14
M=D
@F97
D;JEQ
D=A
@FUNCT
0;JMP
(F97)
//Push C
@180
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@200
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@255
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-13
D=A
@R13
M=D
@call_Screen.drawRectangle
0;JMP
(RETURN-13)
//Pop
@POP_R98
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R98)
//Push C
@290
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@310
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@255
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-14
D=A
@R13
M=D
@call_Screen.drawRectangle
0;JMP
(RETURN-14)
//Pop
@POP_R99
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R99)
//Push C
@235
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@225
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@20
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@20
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN100
D=A
@R13
M=D
(call_Player.new)
@Player.new
D=A
@R14
M=D
@4
D=A
@CALL
0;JMP
(RETURN100)
//Pop
@POP_R101
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R101)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R102
D=A
@R14
M=D
//TMP
@1
D=A
@5
D=D+A
@POP
0;JMP
(POP_R102)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(ObstacleRun.run)
@0
D=A
@R14
M=D
@F103
D;JEQ
D=A
@FUNCT
0;JMP
(F103)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R104
D=A
@THT
0;JMP
(POP_R104)
(ObstacleRun.runLOOP)
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R105
D=A
@R14
M=D
//TMP
@2
D=A
@5
D=D+A
@POP
0;JMP
(POP_R105)
//Push TMP
@1
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n106
D=A
@EQ
0;JMP
(n106)
//if
@IF107
D=A
@IF
0;JMP
(IF107)
@ObstacleRun.runRIGHT
D;JNE
//Push TMP
@1
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n108
D=A
@EQ
0;JMP
(n108)
//if
@IF109
D=A
@IF
0;JMP
(IF109)
@ObstacleRun.runCENTER
D;JNE
//Push C
@200
D=A
@SP
M=M+1
A=M-1
M=D
//goto
@ObstacleRun.runMOVE
0;JMP
(ObstacleRun.runCENTER)
//Push C
@230
D=A
@SP
M=M+1
A=M-1
M=D
//goto
@ObstacleRun.runMOVE
0;JMP
(ObstacleRun.runRIGHT)
//Push C
@260
D=A
@SP
M=M+1
A=M-1
M=D
(ObstacleRun.runMOVE)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@7
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN110
D=A
@R13
M=D
(call_Obstacle.new)
@Obstacle.new
D=A
@R14
M=D
@4
D=A
@CALL
0;JMP
(RETURN110)
//Push S
@ObstacleRun.1
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@ObstacleRun.2
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@ObstacleRun.3
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@ObstacleRun.4
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@ObstacleRun.5
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R111
D=A
@R14
M=D
//S
@ObstacleRun.6
D=A
@POP
0;JMP
(POP_R111)
//Pop
@POP_R112
D=A
@R14
M=D
//S
@ObstacleRun.5
D=A
@POP
0;JMP
(POP_R112)
//Pop
@POP_R113
D=A
@R14
M=D
//S
@ObstacleRun.4
D=A
@POP
0;JMP
(POP_R113)
//Pop
@POP_R114
D=A
@R14
M=D
//S
@ObstacleRun.3
D=A
@POP
0;JMP
(POP_R114)
//Pop
@POP_R115
D=A
@R14
M=D
//S
@ObstacleRun.2
D=A
@POP
0;JMP
(POP_R115)
//Pop
@POP_R116
D=A
@R14
M=D
//S
@ObstacleRun.1
D=A
@POP
0;JMP
(POP_R116)
(ObstacleRun.runWHILE)
//call
@RETURN117
D=A
@R13
M=D
(call_Keyboard.keyPressed)
@Keyboard.keyPressed
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN117)
//Pop
@POP_R118
D=A
@R14
M=D
//THT
@4
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R118)
//Push THT
@4
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n119
D=A
@EQ
0;JMP
(n119)
//if
@IF120
D=A
@IF
0;JMP
(IF120)
@ObstacleRun.runSTILL
D;JNE
//Push Point2
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN121
D=A
@R13
M=D
(call_Player.move)
@Player.move
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN121)
//Pop point
@POP_R122
D=A
@THT
0;JMP
(POP_R122)
(ObstacleRun.runSTILL)
//Push S
@ObstacleRun.1
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN123
D=A
@R13
M=D
(call_Obstacle.move)
@Obstacle.move
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN123)
//Pop
@POP_R124
D=A
@R14
M=D
//S
@ObstacleRun.1
D=A
@POP
0;JMP
(POP_R124)
//Push S
@ObstacleRun.1
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n125
D=A
@EQ
0;JMP
(n125)
//if
@IF126
D=A
@IF
0;JMP
(IF126)
@ObstacleRun.runGAME_OVER
D;JNE
//Push S
@ObstacleRun.2
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n127
D=A
@EQ
0;JMP
(n127)
//if
@IF128
D=A
@IF
0;JMP
(IF128)
@ObstacleRun.runEND
D;JNE
//Push S
@ObstacleRun.2
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-15
D=A
@R13
M=D
@call_Obstacle.move
0;JMP
(RETURN-15)
//Pop
@POP_R129
D=A
@R14
M=D
//S
@ObstacleRun.2
D=A
@POP
0;JMP
(POP_R129)
//Push S
@ObstacleRun.2
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n130
D=A
@EQ
0;JMP
(n130)
//if
@IF131
D=A
@IF
0;JMP
(IF131)
@ObstacleRun.runGAME_OVER
D;JNE
//Push S
@ObstacleRun.3
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n132
D=A
@EQ
0;JMP
(n132)
//if
@IF133
D=A
@IF
0;JMP
(IF133)
@ObstacleRun.runEND
D;JNE
//Push S
@ObstacleRun.3
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-16
D=A
@R13
M=D
@call_Obstacle.move
0;JMP
(RETURN-16)
//Pop
@POP_R134
D=A
@R14
M=D
//S
@ObstacleRun.3
D=A
@POP
0;JMP
(POP_R134)
//Push S
@ObstacleRun.3
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n135
D=A
@EQ
0;JMP
(n135)
//if
@IF136
D=A
@IF
0;JMP
(IF136)
@ObstacleRun.runGAME_OVER
D;JNE
//Push S
@ObstacleRun.4
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n137
D=A
@EQ
0;JMP
(n137)
//if
@IF138
D=A
@IF
0;JMP
(IF138)
@ObstacleRun.runEND
D;JNE
//Push S
@ObstacleRun.4
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-17
D=A
@R13
M=D
@call_Obstacle.move
0;JMP
(RETURN-17)
//Pop
@POP_R139
D=A
@R14
M=D
//S
@ObstacleRun.4
D=A
@POP
0;JMP
(POP_R139)
//Push S
@ObstacleRun.4
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n140
D=A
@EQ
0;JMP
(n140)
//if
@IF141
D=A
@IF
0;JMP
(IF141)
@ObstacleRun.runGAME_OVER
D;JNE
//Push S
@ObstacleRun.5
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n142
D=A
@EQ
0;JMP
(n142)
//if
@IF143
D=A
@IF
0;JMP
(IF143)
@ObstacleRun.runEND
D;JNE
//Push S
@ObstacleRun.5
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-18
D=A
@R13
M=D
@call_Obstacle.move
0;JMP
(RETURN-18)
//Pop
@POP_R144
D=A
@R14
M=D
//S
@ObstacleRun.5
D=A
@POP
0;JMP
(POP_R144)
//Push S
@ObstacleRun.5
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n145
D=A
@EQ
0;JMP
(n145)
//if
@IF146
D=A
@IF
0;JMP
(IF146)
@ObstacleRun.runGAME_OVER
D;JNE
//Push S
@ObstacleRun.6
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n147
D=A
@EQ
0;JMP
(n147)
//if
@IF148
D=A
@IF
0;JMP
(IF148)
@ObstacleRun.runEND
D;JNE
//Push S
@ObstacleRun.6
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-19
D=A
@R13
M=D
@call_Obstacle.move
0;JMP
(RETURN-19)
//Pop
@POP_R149
D=A
@R14
M=D
//S
@ObstacleRun.6
D=A
@POP
0;JMP
(POP_R149)
//Push S
@ObstacleRun.6
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n150
D=A
@EQ
0;JMP
(n150)
//if
@IF151
D=A
@IF
0;JMP
(IF151)
@ObstacleRun.runGAME_OVER
D;JNE
(ObstacleRun.runEND)
//Push TMP
@2
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R152
D=A
@SUB
0;JMP
(SUB_R152)
//Pop
@POP_R153
D=A
@R14
M=D
//TMP
@2
D=A
@5
D=D+A
@POP
0;JMP
(POP_R153)
//Push TMP
@2
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n154
D=A
@GT
0;JMP
(n154)
//if
@IF155
D=A
@IF
0;JMP
(IF155)
@ObstacleRun.runWHILE
D;JNE
//Push TMP
@1
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n156
D=A
@LT
0;JMP
(n156)
//if
@IF157
D=A
@IF
0;JMP
(IF157)
@ObstacleRun.runTRUE
D;JNE
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R158
D=A
@R14
M=D
//TMP
@1
D=A
@5
D=D+A
@POP
0;JMP
(POP_R158)
//goto
@ObstacleRun.runLOOP
0;JMP
(ObstacleRun.runTRUE)
//Push TMP
@1
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R159
D=A
@ADD
0;JMP
(ADD_R159)
//Pop
@POP_R160
D=A
@R14
M=D
//TMP
@1
D=A
@5
D=D+A
@POP
0;JMP
(POP_R160)
//goto
@ObstacleRun.runLOOP
0;JMP
(ObstacleRun.runGAME_OVER)
//Push C
@10
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@26
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN161
D=A
@R13
M=D
(call_Output.moveCursor)
@Output.moveCursor
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN161)
//Pop
@POP_R162
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R162)
//Push C
@9
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN163
D=A
@R13
M=D
(call_String.new)
@String.new
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN163)
//Push C
@71
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN164
D=A
@R13
M=D
(call_String.appendChar)
@String.appendChar
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN164)
//Push C
@97
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-20
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-20)
//Push C
@109
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-21
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-21)
//Push C
@101
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-22
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-22)
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-23
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-23)
//Push C
@79
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-24
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-24)
//Push C
@118
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-25
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-25)
//Push C
@101
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-26
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-26)
//Push C
@114
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-27
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-27)
//call
@RETURN165
D=A
@R13
M=D
(call_Output.printString)
@Output.printString
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN165)
//Pop
@POP_R166
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R166)
@RETURNS
0;JMP
//funct
(String.new)
@0
D=A
@R14
M=D
@F167
D;JEQ
D=A
@FUNCT
0;JMP
(F167)
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-28
D=A
@R13
M=D
@call_Memory.alloc
0;JMP
(RETURN-28)
//Pop point
@POP_R168
D=A
@THS
0;JMP
(POP_R168)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n169
D=A
@LT
0;JMP
(n169)
//if
@IF170
D=A
@IF
0;JMP
(IF170)
@String.newIF_TRUE0
D;JNE
//goto
@String.newIF_FALSE0
0;JMP
(String.newIF_TRUE0)
//Push C
@14
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN171
D=A
@R13
M=D
(call_Sys.error)
@Sys.error
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN171)
//Pop
@POP_R172
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R172)
(String.newIF_FALSE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n173
D=A
@GT
0;JMP
(n173)
//if
@IF174
D=A
@IF
0;JMP
(IF174)
@String.newIF_TRUE1
D;JNE
//goto
@String.newIF_FALSE1
0;JMP
(String.newIF_TRUE1)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN175
D=A
@R13
M=D
(call_Array.new)
@Array.new
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN175)
//Pop
@POP_R176
D=A
@R14
M=D
//THS
@1
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R176)
(String.newIF_FALSE1)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R177
D=A
@R14
M=D
//THS
@0
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R177)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R178
D=A
@R14
M=D
//THS
@2
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R178)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.dispose)
@0
D=A
@R14
M=D
@F179
D;JEQ
D=A
@FUNCT
0;JMP
(F179)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R180
D=A
@THS
0;JMP
(POP_R180)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n181
D=A
@GT
0;JMP
(n181)
//if
@IF182
D=A
@IF
0;JMP
(IF182)
@String.disposeIF_TRUE0
D;JNE
//goto
@String.disposeIF_FALSE0
0;JMP
(String.disposeIF_TRUE0)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN183
D=A
@R13
M=D
(call_Array.dispose)
@Array.dispose
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN183)
//Pop
@POP_R184
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R184)
(String.disposeIF_FALSE0)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-29
D=A
@R13
M=D
@call_Memory.deAlloc
0;JMP
(RETURN-29)
//Pop
@POP_R185
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R185)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.length)
@0
D=A
@R14
M=D
@F186
D;JEQ
D=A
@FUNCT
0;JMP
(F186)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R187
D=A
@THS
0;JMP
(POP_R187)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.charAt)
@0
D=A
@R14
M=D
@F188
D;JEQ
D=A
@FUNCT
0;JMP
(F188)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R189
D=A
@THS
0;JMP
(POP_R189)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n190
D=A
@LT
0;JMP
(n190)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n191
D=A
@GT
0;JMP
(n191)
//OR
@OR_R192
D=A
@OR
0;JMP
(OR_R192)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//EQ
@n193
D=A
@EQ
0;JMP
(n193)
//OR
@OR_R194
D=A
@OR
0;JMP
(OR_R194)
//if
@IF195
D=A
@IF
0;JMP
(IF195)
@String.charAtIF_TRUE0
D;JNE
//goto
@String.charAtIF_FALSE0
0;JMP
(String.charAtIF_TRUE0)
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-30
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-30)
//Pop
@POP_R196
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R196)
(String.charAtIF_FALSE0)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R197
D=A
@ADD
0;JMP
(ADD_R197)
//Pop point
@POP_R198
D=A
@THT
0;JMP
(POP_R198)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.setCharAt)
@0
D=A
@R14
M=D
@F199
D;JEQ
D=A
@FUNCT
0;JMP
(F199)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R200
D=A
@THS
0;JMP
(POP_R200)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n201
D=A
@LT
0;JMP
(n201)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n202
D=A
@GT
0;JMP
(n202)
//OR
@OR_R203
D=A
@OR
0;JMP
(OR_R203)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//EQ
@n204
D=A
@EQ
0;JMP
(n204)
//OR
@OR_R205
D=A
@OR
0;JMP
(OR_R205)
//if
@IF206
D=A
@IF
0;JMP
(IF206)
@String.setCharAtIF_TRUE0
D;JNE
//goto
@String.setCharAtIF_FALSE0
0;JMP
(String.setCharAtIF_TRUE0)
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-31
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-31)
//Pop
@POP_R207
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R207)
(String.setCharAtIF_FALSE0)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R208
D=A
@ADD
0;JMP
(ADD_R208)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R209
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R209)
//Pop point
@POP_R210
D=A
@THT
0;JMP
(POP_R210)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R211
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R211)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.appendChar)
@0
D=A
@R14
M=D
@F212
D;JEQ
D=A
@FUNCT
0;JMP
(F212)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R213
D=A
@THS
0;JMP
(POP_R213)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//EQ
@n214
D=A
@EQ
0;JMP
(n214)
//if
@IF215
D=A
@IF
0;JMP
(IF215)
@String.appendCharIF_TRUE0
D;JNE
//goto
@String.appendCharIF_FALSE0
0;JMP
(String.appendCharIF_TRUE0)
//Push C
@17
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-32
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-32)
//Pop
@POP_R216
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R216)
(String.appendCharIF_FALSE0)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R217
D=A
@ADD
0;JMP
(ADD_R217)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R218
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R218)
//Pop point
@POP_R219
D=A
@THT
0;JMP
(POP_R219)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R220
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R220)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R221
D=A
@ADD
0;JMP
(ADD_R221)
//Pop
@POP_R222
D=A
@R14
M=D
//THS
@2
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R222)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.eraseLastChar)
@0
D=A
@R14
M=D
@F223
D;JEQ
D=A
@FUNCT
0;JMP
(F223)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R224
D=A
@THS
0;JMP
(POP_R224)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n225
D=A
@EQ
0;JMP
(n225)
//if
@IF226
D=A
@IF
0;JMP
(IF226)
@String.eraseLastCharIF_TRUE0
D;JNE
//goto
@String.eraseLastCharIF_FALSE0
0;JMP
(String.eraseLastCharIF_TRUE0)
//Push C
@18
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-33
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-33)
//Pop
@POP_R227
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R227)
(String.eraseLastCharIF_FALSE0)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R228
D=A
@SUB
0;JMP
(SUB_R228)
//Pop
@POP_R229
D=A
@R14
M=D
//THS
@2
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R229)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.intValue)
@5
D=A
@R14
M=D
@F230
D;JEQ
D=A
@FUNCT
0;JMP
(F230)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R231
D=A
@THS
0;JMP
(POP_R231)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n232
D=A
@EQ
0;JMP
(n232)
//if
@IF233
D=A
@IF
0;JMP
(IF233)
@String.intValueIF_TRUE0
D;JNE
//goto
@String.intValueIF_FALSE0
0;JMP
(String.intValueIF_TRUE0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
(String.intValueIF_FALSE0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R234
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R234)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R235
D=A
@ADD
0;JMP
(ADD_R235)
//Pop point
@POP_R236
D=A
@THT
0;JMP
(POP_R236)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@45
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n237
D=A
@EQ
0;JMP
(n237)
//if
@IF238
D=A
@IF
0;JMP
(IF238)
@String.intValueIF_TRUE1
D;JNE
//goto
@String.intValueIF_FALSE1
0;JMP
(String.intValueIF_TRUE1)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R239
D=A
@R14
M=D
//L
@4
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R239)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R240
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R240)
(String.intValueIF_FALSE1)
(String.intValueWHILE_EXP0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n241
D=A
@LT
0;JMP
(n241)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//AND
@AND_R242
D=A
@AND
0;JMP
(AND_R242)
//NOT
@SP
A=M-1
M=!M
//if
@IF243
D=A
@IF
0;JMP
(IF243)
@String.intValueWHILE_END0
D;JNE
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R244
D=A
@ADD
0;JMP
(ADD_R244)
//Pop point
@POP_R245
D=A
@THT
0;JMP
(POP_R245)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R246
D=A
@SUB
0;JMP
(SUB_R246)
//Pop
@POP_R247
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R247)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n248
D=A
@LT
0;JMP
(n248)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@9
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n249
D=A
@GT
0;JMP
(n249)
//OR
@OR_R250
D=A
@OR
0;JMP
(OR_R250)
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R251
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R251)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF252
D=A
@IF
0;JMP
(IF252)
@String.intValueIF_TRUE2
D;JNE
//goto
@String.intValueIF_FALSE2
0;JMP
(String.intValueIF_TRUE2)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@10
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN253
D=A
@R13
M=D
(call_Math.multiply)
@Math.multiply
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN253)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R254
D=A
@ADD
0;JMP
(ADD_R254)
//Pop
@POP_R255
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R255)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R256
D=A
@ADD
0;JMP
(ADD_R256)
//Pop
@POP_R257
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R257)
(String.intValueIF_FALSE2)
//goto
@String.intValueWHILE_EXP0
0;JMP
(String.intValueWHILE_END0)
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF258
D=A
@IF
0;JMP
(IF258)
@String.intValueIF_TRUE3
D;JNE
//goto
@String.intValueIF_FALSE3
0;JMP
(String.intValueIF_TRUE3)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//Pop
@POP_R259
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R259)
(String.intValueIF_FALSE3)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.setInt)
@4
D=A
@R14
M=D
@F260
D;JEQ
D=A
@FUNCT
0;JMP
(F260)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R261
D=A
@THS
0;JMP
(POP_R261)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n262
D=A
@EQ
0;JMP
(n262)
//if
@IF263
D=A
@IF
0;JMP
(IF263)
@String.setIntIF_TRUE0
D;JNE
//goto
@String.setIntIF_FALSE0
0;JMP
(String.setIntIF_TRUE0)
//Push C
@19
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-34
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-34)
//Pop
@POP_R264
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R264)
(String.setIntIF_FALSE0)
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-35
D=A
@R13
M=D
@call_Array.new
0;JMP
(RETURN-35)
//Pop
@POP_R265
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R265)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n266
D=A
@LT
0;JMP
(n266)
//if
@IF267
D=A
@IF
0;JMP
(IF267)
@String.setIntIF_TRUE1
D;JNE
//goto
@String.setIntIF_FALSE1
0;JMP
(String.setIntIF_TRUE1)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R268
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R268)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//Pop
@POP_R269
D=A
@R14
M=D
//A
@1
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R269)
(String.setIntIF_FALSE1)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R270
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R270)
(String.setIntWHILE_EXP0)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n271
D=A
@GT
0;JMP
(n271)
//NOT
@SP
A=M-1
M=!M
//if
@IF272
D=A
@IF
0;JMP
(IF272)
@String.setIntWHILE_END0
D;JNE
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@10
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN273
D=A
@R13
M=D
(call_Math.divide)
@Math.divide
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN273)
//Pop
@POP_R274
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R274)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R275
D=A
@ADD
0;JMP
(ADD_R275)
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@10
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-36
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-36)
//SUB
@SUB_R276
D=A
@SUB
0;JMP
(SUB_R276)
//ADD
@ADD_R277
D=A
@ADD
0;JMP
(ADD_R277)
//Pop
@POP_R278
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R278)
//Pop point
@POP_R279
D=A
@THT
0;JMP
(POP_R279)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R280
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R280)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R281
D=A
@ADD
0;JMP
(ADD_R281)
//Pop
@POP_R282
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R282)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R283
D=A
@R14
M=D
//A
@1
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R283)
//goto
@String.setIntWHILE_EXP0
0;JMP
(String.setIntWHILE_END0)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF284
D=A
@IF
0;JMP
(IF284)
@String.setIntIF_TRUE2
D;JNE
//goto
@String.setIntIF_FALSE2
0;JMP
(String.setIntIF_TRUE2)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R285
D=A
@ADD
0;JMP
(ADD_R285)
//Push C
@45
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R286
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R286)
//Pop point
@POP_R287
D=A
@THT
0;JMP
(POP_R287)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R288
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R288)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R289
D=A
@ADD
0;JMP
(ADD_R289)
//Pop
@POP_R290
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R290)
(String.setIntIF_FALSE2)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n291
D=A
@LT
0;JMP
(n291)
//if
@IF292
D=A
@IF
0;JMP
(IF292)
@String.setIntIF_TRUE3
D;JNE
//goto
@String.setIntIF_FALSE3
0;JMP
(String.setIntIF_TRUE3)
//Push C
@19
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-37
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-37)
//Pop
@POP_R293
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R293)
(String.setIntIF_FALSE3)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n294
D=A
@EQ
0;JMP
(n294)
//if
@IF295
D=A
@IF
0;JMP
(IF295)
@String.setIntIF_TRUE4
D;JNE
//goto
@String.setIntIF_FALSE4
0;JMP
(String.setIntIF_TRUE4)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R296
D=A
@ADD
0;JMP
(ADD_R296)
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R297
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R297)
//Pop point
@POP_R298
D=A
@THT
0;JMP
(POP_R298)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R299
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R299)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R300
D=A
@R14
M=D
//THS
@2
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R300)
//goto
@String.setIntIF_END4
0;JMP
(String.setIntIF_FALSE4)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R301
D=A
@R14
M=D
//THS
@2
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R301)
(String.setIntWHILE_EXP1)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n302
D=A
@LT
0;JMP
(n302)
//NOT
@SP
A=M-1
M=!M
//if
@IF303
D=A
@IF
0;JMP
(IF303)
@String.setIntWHILE_END1
D;JNE
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R304
D=A
@ADD
0;JMP
(ADD_R304)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R305
D=A
@ADD
0;JMP
(ADD_R305)
//SUB
@SUB_R306
D=A
@SUB
0;JMP
(SUB_R306)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R307
D=A
@ADD
0;JMP
(ADD_R307)
//Pop point
@POP_R308
D=A
@THT
0;JMP
(POP_R308)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R309
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R309)
//Pop point
@POP_R310
D=A
@THT
0;JMP
(POP_R310)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R311
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R311)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R312
D=A
@ADD
0;JMP
(ADD_R312)
//Pop
@POP_R313
D=A
@R14
M=D
//THS
@2
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R313)
//goto
@String.setIntWHILE_EXP1
0;JMP
(String.setIntWHILE_END1)
(String.setIntIF_END4)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-38
D=A
@R13
M=D
@call_Array.dispose
0;JMP
(RETURN-38)
//Pop
@POP_R314
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R314)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.newLine)
@0
D=A
@R14
M=D
@F315
D;JEQ
D=A
@FUNCT
0;JMP
(F315)
//Push C
@128
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.backSpace)
@0
D=A
@R14
M=D
@F316
D;JEQ
D=A
@FUNCT
0;JMP
(F316)
//Push C
@129
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.doubleQuote)
@0
D=A
@R14
M=D
@F317
D;JEQ
D=A
@FUNCT
0;JMP
(F317)
//Push C
@34
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Math.init)
@1
D=A
@R14
M=D
@F318
D;JEQ
D=A
@FUNCT
0;JMP
(F318)
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-39
D=A
@R13
M=D
@call_Array.new
0;JMP
(RETURN-39)
//Pop
@POP_R319
D=A
@R14
M=D
//S
@Math.1
D=A
@POP
0;JMP
(POP_R319)
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-40
D=A
@R13
M=D
@call_Array.new
0;JMP
(RETURN-40)
//Pop
@POP_R320
D=A
@R14
M=D
//S
@Math.0
D=A
@POP
0;JMP
(POP_R320)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R321
D=A
@ADD
0;JMP
(ADD_R321)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R322
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R322)
//Pop point
@POP_R323
D=A
@THT
0;JMP
(POP_R323)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R324
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R324)
(Math.initWHILE_EXP0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n325
D=A
@LT
0;JMP
(n325)
//NOT
@SP
A=M-1
M=!M
//if
@IF326
D=A
@IF
0;JMP
(IF326)
@Math.initWHILE_END0
D;JNE
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R327
D=A
@ADD
0;JMP
(ADD_R327)
//Pop
@POP_R328
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R328)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R329
D=A
@ADD
0;JMP
(ADD_R329)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R330
D=A
@SUB
0;JMP
(SUB_R330)
//Push S
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R331
D=A
@ADD
0;JMP
(ADD_R331)
//Pop point
@POP_R332
D=A
@THT
0;JMP
(POP_R332)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R333
D=A
@SUB
0;JMP
(SUB_R333)
//Push S
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R334
D=A
@ADD
0;JMP
(ADD_R334)
//Pop point
@POP_R335
D=A
@THT
0;JMP
(POP_R335)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R336
D=A
@ADD
0;JMP
(ADD_R336)
//Pop
@POP_R337
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R337)
//Pop point
@POP_R338
D=A
@THT
0;JMP
(POP_R338)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R339
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R339)
//goto
@Math.initWHILE_EXP0
0;JMP
(Math.initWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Math.abs)
@0
D=A
@R14
M=D
@F340
D;JEQ
D=A
@FUNCT
0;JMP
(F340)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n341
D=A
@LT
0;JMP
(n341)
//if
@IF342
D=A
@IF
0;JMP
(IF342)
@Math.absIF_TRUE0
D;JNE
//goto
@Math.absIF_FALSE0
0;JMP
(Math.absIF_TRUE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//Pop
@POP_R343
D=A
@R14
M=D
//A
@0
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R343)
(Math.absIF_FALSE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Math.multiply)
@5
D=A
@R14
M=D
@F344
D;JEQ
D=A
@FUNCT
0;JMP
(F344)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n345
D=A
@LT
0;JMP
(n345)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n346
D=A
@GT
0;JMP
(n346)
//AND
@AND_R347
D=A
@AND
0;JMP
(AND_R347)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n348
D=A
@GT
0;JMP
(n348)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n349
D=A
@LT
0;JMP
(n349)
//AND
@AND_R350
D=A
@AND
0;JMP
(AND_R350)
//OR
@OR_R351
D=A
@OR
0;JMP
(OR_R351)
//Pop
@POP_R352
D=A
@R14
M=D
//L
@4
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R352)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN353
D=A
@R13
M=D
(call_Math.abs)
@Math.abs
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN353)
//Pop
@POP_R354
D=A
@R14
M=D
//A
@0
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R354)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-41
D=A
@R13
M=D
@call_Math.abs
0;JMP
(RETURN-41)
//Pop
@POP_R355
D=A
@R14
M=D
//A
@1
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R355)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n356
D=A
@LT
0;JMP
(n356)
//if
@IF357
D=A
@IF
0;JMP
(IF357)
@Math.multiplyIF_TRUE0
D;JNE
//goto
@Math.multiplyIF_FALSE0
0;JMP
(Math.multiplyIF_TRUE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R358
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R358)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R359
D=A
@R14
M=D
//A
@0
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R359)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R360
D=A
@R14
M=D
//A
@1
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R360)
(Math.multiplyIF_FALSE0)
(Math.multiplyWHILE_EXP0)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R361
D=A
@SUB
0;JMP
(SUB_R361)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R362
D=A
@SUB
0;JMP
(SUB_R362)
//LT
@n363
D=A
@LT
0;JMP
(n363)
//NOT
@SP
A=M-1
M=!M
//if
@IF364
D=A
@IF
0;JMP
(IF364)
@Math.multiplyWHILE_END0
D;JNE
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R365
D=A
@ADD
0;JMP
(ADD_R365)
//Pop point
@POP_R366
D=A
@THT
0;JMP
(POP_R366)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//AND
@AND_R367
D=A
@AND
0;JMP
(AND_R367)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n368
D=A
@EQ
0;JMP
(n368)
//NOT
@SP
A=M-1
M=!M
//if
@IF369
D=A
@IF
0;JMP
(IF369)
@Math.multiplyIF_TRUE1
D;JNE
//goto
@Math.multiplyIF_FALSE1
0;JMP
(Math.multiplyIF_TRUE1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R370
D=A
@ADD
0;JMP
(ADD_R370)
//Pop
@POP_R371
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R371)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R372
D=A
@ADD
0;JMP
(ADD_R372)
//Pop point
@POP_R373
D=A
@THT
0;JMP
(POP_R373)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R374
D=A
@ADD
0;JMP
(ADD_R374)
//Pop
@POP_R375
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R375)
(Math.multiplyIF_FALSE1)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R376
D=A
@ADD
0;JMP
(ADD_R376)
//Pop
@POP_R377
D=A
@R14
M=D
//A
@0
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R377)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R378
D=A
@ADD
0;JMP
(ADD_R378)
//Pop
@POP_R379
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R379)
//goto
@Math.multiplyWHILE_EXP0
0;JMP
(Math.multiplyWHILE_END0)
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF380
D=A
@IF
0;JMP
(IF380)
@Math.multiplyIF_TRUE2
D;JNE
//goto
@Math.multiplyIF_FALSE2
0;JMP
(Math.multiplyIF_TRUE2)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//Pop
@POP_R381
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R381)
(Math.multiplyIF_FALSE2)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Math.divide)
@4
D=A
@R14
M=D
@F382
D;JEQ
D=A
@FUNCT
0;JMP
(F382)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n383
D=A
@EQ
0;JMP
(n383)
//if
@IF384
D=A
@IF
0;JMP
(IF384)
@Math.divideIF_TRUE0
D;JNE
//goto
@Math.divideIF_FALSE0
0;JMP
(Math.divideIF_TRUE0)
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-42
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-42)
//Pop
@POP_R385
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R385)
(Math.divideIF_FALSE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n386
D=A
@LT
0;JMP
(n386)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n387
D=A
@GT
0;JMP
(n387)
//AND
@AND_R388
D=A
@AND
0;JMP
(AND_R388)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n389
D=A
@GT
0;JMP
(n389)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n390
D=A
@LT
0;JMP
(n390)
//AND
@AND_R391
D=A
@AND
0;JMP
(AND_R391)
//OR
@OR_R392
D=A
@OR
0;JMP
(OR_R392)
//Pop
@POP_R393
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R393)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R394
D=A
@ADD
0;JMP
(ADD_R394)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-43
D=A
@R13
M=D
@call_Math.abs
0;JMP
(RETURN-43)
//Pop
@POP_R395
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R395)
//Pop point
@POP_R396
D=A
@THT
0;JMP
(POP_R396)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R397
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R397)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-44
D=A
@R13
M=D
@call_Math.abs
0;JMP
(RETURN-44)
//Pop
@POP_R398
D=A
@R14
M=D
//A
@0
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R398)
(Math.divideWHILE_EXP0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n399
D=A
@LT
0;JMP
(n399)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//AND
@AND_R400
D=A
@AND
0;JMP
(AND_R400)
//NOT
@SP
A=M-1
M=!M
//if
@IF401
D=A
@IF
0;JMP
(IF401)
@Math.divideWHILE_END0
D;JNE
//Push C
@32767
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R402
D=A
@ADD
0;JMP
(ADD_R402)
//Pop point
@POP_R403
D=A
@THT
0;JMP
(POP_R403)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R404
D=A
@SUB
0;JMP
(SUB_R404)
//SUB
@SUB_R405
D=A
@SUB
0;JMP
(SUB_R405)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R406
D=A
@ADD
0;JMP
(ADD_R406)
//Pop point
@POP_R407
D=A
@THT
0;JMP
(POP_R407)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R408
D=A
@SUB
0;JMP
(SUB_R408)
//LT
@n409
D=A
@LT
0;JMP
(n409)
//Pop
@POP_R410
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R410)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//if
@IF411
D=A
@IF
0;JMP
(IF411)
@Math.divideIF_TRUE1
D;JNE
//goto
@Math.divideIF_FALSE1
0;JMP
(Math.divideIF_TRUE1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R412
D=A
@ADD
0;JMP
(ADD_R412)
//Push S
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R413
D=A
@ADD
0;JMP
(ADD_R413)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R414
D=A
@ADD
0;JMP
(ADD_R414)
//Pop point
@POP_R415
D=A
@THT
0;JMP
(POP_R415)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R416
D=A
@ADD
0;JMP
(ADD_R416)
//Pop point
@POP_R417
D=A
@THT
0;JMP
(POP_R417)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R418
D=A
@ADD
0;JMP
(ADD_R418)
//Pop
@POP_R419
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R419)
//Pop point
@POP_R420
D=A
@THT
0;JMP
(POP_R420)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R421
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R421)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R422
D=A
@ADD
0;JMP
(ADD_R422)
//Push S
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R423
D=A
@ADD
0;JMP
(ADD_R423)
//Pop point
@POP_R424
D=A
@THT
0;JMP
(POP_R424)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R425
D=A
@SUB
0;JMP
(SUB_R425)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R426
D=A
@SUB
0;JMP
(SUB_R426)
//GT
@n427
D=A
@GT
0;JMP
(n427)
//Pop
@POP_R428
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R428)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//if
@IF429
D=A
@IF
0;JMP
(IF429)
@Math.divideIF_TRUE2
D;JNE
//goto
@Math.divideIF_FALSE2
0;JMP
(Math.divideIF_TRUE2)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R430
D=A
@ADD
0;JMP
(ADD_R430)
//Pop
@POP_R431
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R431)
(Math.divideIF_FALSE2)
(Math.divideIF_FALSE1)
//goto
@Math.divideWHILE_EXP0
0;JMP
(Math.divideWHILE_END0)
(Math.divideWHILE_EXP1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//GT
@n432
D=A
@GT
0;JMP
(n432)
//NOT
@SP
A=M-1
M=!M
//if
@IF433
D=A
@IF
0;JMP
(IF433)
@Math.divideWHILE_END1
D;JNE
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R434
D=A
@ADD
0;JMP
(ADD_R434)
//Pop point
@POP_R435
D=A
@THT
0;JMP
(POP_R435)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R436
D=A
@SUB
0;JMP
(SUB_R436)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R437
D=A
@SUB
0;JMP
(SUB_R437)
//GT
@n438
D=A
@GT
0;JMP
(n438)
//NOT
@SP
A=M-1
M=!M
//if
@IF439
D=A
@IF
0;JMP
(IF439)
@Math.divideIF_TRUE3
D;JNE
//goto
@Math.divideIF_FALSE3
0;JMP
(Math.divideIF_TRUE3)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R440
D=A
@ADD
0;JMP
(ADD_R440)
//Pop point
@POP_R441
D=A
@THT
0;JMP
(POP_R441)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R442
D=A
@ADD
0;JMP
(ADD_R442)
//Pop
@POP_R443
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R443)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R444
D=A
@ADD
0;JMP
(ADD_R444)
//Pop point
@POP_R445
D=A
@THT
0;JMP
(POP_R445)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R446
D=A
@SUB
0;JMP
(SUB_R446)
//Pop
@POP_R447
D=A
@R14
M=D
//A
@0
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R447)
(Math.divideIF_FALSE3)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R448
D=A
@SUB
0;JMP
(SUB_R448)
//Pop
@POP_R449
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R449)
//goto
@Math.divideWHILE_EXP1
0;JMP
(Math.divideWHILE_END1)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF450
D=A
@IF
0;JMP
(IF450)
@Math.divideIF_TRUE4
D;JNE
//goto
@Math.divideIF_FALSE4
0;JMP
(Math.divideIF_TRUE4)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//Pop
@POP_R451
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R451)
(Math.divideIF_FALSE4)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Math.sqrt)
@4
D=A
@R14
M=D
@F452
D;JEQ
D=A
@FUNCT
0;JMP
(F452)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n453
D=A
@LT
0;JMP
(n453)
//if
@IF454
D=A
@IF
0;JMP
(IF454)
@Math.sqrtIF_TRUE0
D;JNE
//goto
@Math.sqrtIF_FALSE0
0;JMP
(Math.sqrtIF_TRUE0)
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-45
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-45)
//Pop
@POP_R455
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R455)
(Math.sqrtIF_FALSE0)
//Push C
@7
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R456
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R456)
(Math.sqrtWHILE_EXP0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//GT
@n457
D=A
@GT
0;JMP
(n457)
//NOT
@SP
A=M-1
M=!M
//if
@IF458
D=A
@IF
0;JMP
(IF458)
@Math.sqrtWHILE_END0
D;JNE
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R459
D=A
@ADD
0;JMP
(ADD_R459)
//Pop point
@POP_R460
D=A
@THT
0;JMP
(POP_R460)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R461
D=A
@ADD
0;JMP
(ADD_R461)
//Pop
@POP_R462
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R462)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-46
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-46)
//Pop
@POP_R463
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R463)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n464
D=A
@GT
0;JMP
(n464)
//NOT
@SP
A=M-1
M=!M
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n465
D=A
@LT
0;JMP
(n465)
//NOT
@SP
A=M-1
M=!M
//AND
@AND_R466
D=A
@AND
0;JMP
(AND_R466)
//if
@IF467
D=A
@IF
0;JMP
(IF467)
@Math.sqrtIF_TRUE1
D;JNE
//goto
@Math.sqrtIF_FALSE1
0;JMP
(Math.sqrtIF_TRUE1)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R468
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R468)
(Math.sqrtIF_FALSE1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R469
D=A
@SUB
0;JMP
(SUB_R469)
//Pop
@POP_R470
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R470)
//goto
@Math.sqrtWHILE_EXP0
0;JMP
(Math.sqrtWHILE_END0)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Math.max)
@0
D=A
@R14
M=D
@F471
D;JEQ
D=A
@FUNCT
0;JMP
(F471)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n472
D=A
@GT
0;JMP
(n472)
//if
@IF473
D=A
@IF
0;JMP
(IF473)
@Math.maxIF_TRUE0
D;JNE
//goto
@Math.maxIF_FALSE0
0;JMP
(Math.maxIF_TRUE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R474
D=A
@R14
M=D
//A
@1
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R474)
(Math.maxIF_FALSE0)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Math.min)
@0
D=A
@R14
M=D
@F475
D;JEQ
D=A
@FUNCT
0;JMP
(F475)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n476
D=A
@LT
0;JMP
(n476)
//if
@IF477
D=A
@IF
0;JMP
(IF477)
@Math.minIF_TRUE0
D;JNE
//goto
@Math.minIF_FALSE0
0;JMP
(Math.minIF_TRUE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R478
D=A
@R14
M=D
//A
@1
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R478)
(Math.minIF_FALSE0)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Array.new)
@0
D=A
@R14
M=D
@F479
D;JEQ
D=A
@FUNCT
0;JMP
(F479)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n480
D=A
@GT
0;JMP
(n480)
//NOT
@SP
A=M-1
M=!M
//if
@IF481
D=A
@IF
0;JMP
(IF481)
@Array.newIF_TRUE0
D;JNE
//goto
@Array.newIF_FALSE0
0;JMP
(Array.newIF_TRUE0)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-47
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-47)
//Pop
@POP_R482
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R482)
(Array.newIF_FALSE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-48
D=A
@R13
M=D
@call_Memory.alloc
0;JMP
(RETURN-48)
@RETURNS
0;JMP
//funct
(Array.dispose)
@0
D=A
@R14
M=D
@F483
D;JEQ
D=A
@FUNCT
0;JMP
(F483)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R484
D=A
@THS
0;JMP
(POP_R484)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-49
D=A
@R13
M=D
@call_Memory.deAlloc
0;JMP
(RETURN-49)
//Pop
@POP_R485
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R485)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Main.main)
@1
D=A
@R14
M=D
@F486
D;JEQ
D=A
@FUNCT
0;JMP
(F486)
//call
@RETURN487
D=A
@R13
M=D
(call_ObstacleRun.newGame)
@ObstacleRun.newGame
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN487)
//call
@RETURN488
D=A
@R13
M=D
(call_ObstacleRun.run)
@ObstacleRun.run
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN488)
@RETURNS
0;JMP
//funct
(Keyboard.init)
@0
D=A
@R14
M=D
@F489
D;JEQ
D=A
@FUNCT
0;JMP
(F489)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Keyboard.keyPressed)
@0
D=A
@R14
M=D
@F490
D;JEQ
D=A
@FUNCT
0;JMP
(F490)
//Push C
@24576
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN491
D=A
@R13
M=D
(call_Memory.peek)
@Memory.peek
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN491)
@RETURNS
0;JMP
//funct
(Keyboard.readChar)
@2
D=A
@R14
M=D
@F492
D;JEQ
D=A
@FUNCT
0;JMP
(F492)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN493
D=A
@R13
M=D
(call_Output.printChar)
@Output.printChar
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN493)
//Pop
@POP_R494
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R494)
(Keyboard.readCharWHILE_EXP0)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n495
D=A
@EQ
0;JMP
(n495)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n496
D=A
@GT
0;JMP
(n496)
//OR
@OR_R497
D=A
@OR
0;JMP
(OR_R497)
//NOT
@SP
A=M-1
M=!M
//if
@IF498
D=A
@IF
0;JMP
(IF498)
@Keyboard.readCharWHILE_END0
D;JNE
@RETURN-50
D=A
@R13
M=D
@call_Keyboard.keyPressed
0;JMP
(RETURN-50)
//Pop
@POP_R499
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R499)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n500
D=A
@GT
0;JMP
(n500)
//if
@IF501
D=A
@IF
0;JMP
(IF501)
@Keyboard.readCharIF_TRUE0
D;JNE
//goto
@Keyboard.readCharIF_FALSE0
0;JMP
(Keyboard.readCharIF_TRUE0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R502
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R502)
(Keyboard.readCharIF_FALSE0)
//goto
@Keyboard.readCharWHILE_EXP0
0;JMP
(Keyboard.readCharWHILE_END0)
//call
@RETURN503
D=A
@R13
M=D
(call_String.backSpace)
@String.backSpace
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN503)
@RETURN-51
D=A
@R13
M=D
@call_Output.printChar
0;JMP
(RETURN-51)
//Pop
@POP_R504
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R504)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-52
D=A
@R13
M=D
@call_Output.printChar
0;JMP
(RETURN-52)
//Pop
@POP_R505
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R505)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Keyboard.readLine)
@5
D=A
@R14
M=D
@F506
D;JEQ
D=A
@FUNCT
0;JMP
(F506)
//Push C
@80
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-53
D=A
@R13
M=D
@call_String.new
0;JMP
(RETURN-53)
//Pop
@POP_R507
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R507)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-54
D=A
@R13
M=D
@call_Output.printString
0;JMP
(RETURN-54)
//Pop
@POP_R508
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R508)
//call
@RETURN509
D=A
@R13
M=D
(call_String.newLine)
@String.newLine
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN509)
//Pop
@POP_R510
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R510)
@RETURN-55
D=A
@R13
M=D
@call_String.backSpace
0;JMP
(RETURN-55)
//Pop
@POP_R511
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R511)
(Keyboard.readLineWHILE_EXP0)
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//NOT
@SP
A=M-1
M=!M
//if
@IF512
D=A
@IF
0;JMP
(IF512)
@Keyboard.readLineWHILE_END0
D;JNE
//call
@RETURN513
D=A
@R13
M=D
(call_Keyboard.readChar)
@Keyboard.readChar
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN513)
//Pop
@POP_R514
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R514)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//EQ
@n515
D=A
@EQ
0;JMP
(n515)
//Pop
@POP_R516
D=A
@R14
M=D
//L
@4
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R516)
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//if
@IF517
D=A
@IF
0;JMP
(IF517)
@Keyboard.readLineIF_TRUE0
D;JNE
//goto
@Keyboard.readLineIF_FALSE0
0;JMP
(Keyboard.readLineIF_TRUE0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//EQ
@n518
D=A
@EQ
0;JMP
(n518)
//if
@IF519
D=A
@IF
0;JMP
(IF519)
@Keyboard.readLineIF_TRUE1
D;JNE
//goto
@Keyboard.readLineIF_FALSE1
0;JMP
(Keyboard.readLineIF_TRUE1)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN520
D=A
@R13
M=D
(call_String.eraseLastChar)
@String.eraseLastChar
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN520)
//Pop
@POP_R521
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R521)
//goto
@Keyboard.readLineIF_END1
0;JMP
(Keyboard.readLineIF_FALSE1)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-56
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-56)
//Pop
@POP_R522
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R522)
(Keyboard.readLineIF_END1)
(Keyboard.readLineIF_FALSE0)
//goto
@Keyboard.readLineWHILE_EXP0
0;JMP
(Keyboard.readLineWHILE_END0)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Keyboard.readInt)
@2
D=A
@R14
M=D
@F523
D;JEQ
D=A
@FUNCT
0;JMP
(F523)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN524
D=A
@R13
M=D
(call_Keyboard.readLine)
@Keyboard.readLine
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN524)
//Pop
@POP_R525
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R525)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN526
D=A
@R13
M=D
(call_String.intValue)
@String.intValue
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN526)
//Pop
@POP_R527
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R527)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN528
D=A
@R13
M=D
(call_String.dispose)
@String.dispose
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN528)
//Pop
@POP_R529
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R529)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Sys.init)
@0
D=A
@R14
M=D
@F530
D;JEQ
D=A
@FUNCT
0;JMP
(F530)
//call
@RETURN531
D=A
@R13
M=D
(call_Memory.init)
@Memory.init
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN531)
//Pop
@POP_R532
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R532)
//call
@RETURN533
D=A
@R13
M=D
(call_Math.init)
@Math.init
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN533)
//Pop
@POP_R534
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R534)
//call
@RETURN535
D=A
@R13
M=D
(call_Screen.init)
@Screen.init
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN535)
//Pop
@POP_R536
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R536)
//call
@RETURN537
D=A
@R13
M=D
(call_Output.init)
@Output.init
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN537)
//Pop
@POP_R538
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R538)
//call
@RETURN539
D=A
@R13
M=D
(call_Keyboard.init)
@Keyboard.init
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN539)
//Pop
@POP_R540
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R540)
//call
@RETURN541
D=A
@R13
M=D
(call_Main.main)
@Main.main
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN541)
//Pop
@POP_R542
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R542)
//call
@RETURN543
D=A
@R13
M=D
(call_Sys.halt)
@Sys.halt
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN543)
//Pop
@POP_R544
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R544)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Sys.halt)
@0
D=A
@R14
M=D
@F545
D;JEQ
D=A
@FUNCT
0;JMP
(F545)
(Sys.haltWHILE_EXP0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//NOT
@SP
A=M-1
M=!M
//if
@IF546
D=A
@IF
0;JMP
(IF546)
@Sys.haltWHILE_END0
D;JNE
//goto
@Sys.haltWHILE_EXP0
0;JMP
(Sys.haltWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Sys.wait)
@1
D=A
@R14
M=D
@F547
D;JEQ
D=A
@FUNCT
0;JMP
(F547)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n548
D=A
@LT
0;JMP
(n548)
//if
@IF549
D=A
@IF
0;JMP
(IF549)
@Sys.waitIF_TRUE0
D;JNE
//goto
@Sys.waitIF_FALSE0
0;JMP
(Sys.waitIF_TRUE0)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-57
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-57)
//Pop
@POP_R550
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R550)
(Sys.waitIF_FALSE0)
(Sys.waitWHILE_EXP0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n551
D=A
@GT
0;JMP
(n551)
//NOT
@SP
A=M-1
M=!M
//if
@IF552
D=A
@IF
0;JMP
(IF552)
@Sys.waitWHILE_END0
D;JNE
//Push C
@50
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R553
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R553)
(Sys.waitWHILE_EXP1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n554
D=A
@GT
0;JMP
(n554)
//NOT
@SP
A=M-1
M=!M
//if
@IF555
D=A
@IF
0;JMP
(IF555)
@Sys.waitWHILE_END1
D;JNE
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R556
D=A
@SUB
0;JMP
(SUB_R556)
//Pop
@POP_R557
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R557)
//goto
@Sys.waitWHILE_EXP1
0;JMP
(Sys.waitWHILE_END1)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R558
D=A
@SUB
0;JMP
(SUB_R558)
//Pop
@POP_R559
D=A
@R14
M=D
//A
@0
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R559)
//goto
@Sys.waitWHILE_EXP0
0;JMP
(Sys.waitWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Sys.error)
@0
D=A
@R14
M=D
@F560
D;JEQ
D=A
@FUNCT
0;JMP
(F560)
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-58
D=A
@R13
M=D
@call_String.new
0;JMP
(RETURN-58)
//Push C
@69
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-59
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-59)
//Push C
@82
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-60
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-60)
//Push C
@82
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-61
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-61)
@RETURN-62
D=A
@R13
M=D
@call_Output.printString
0;JMP
(RETURN-62)
//Pop
@POP_R561
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R561)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN562
D=A
@R13
M=D
(call_Output.printInt)
@Output.printInt
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN562)
//Pop
@POP_R563
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R563)
@RETURN-63
D=A
@R13
M=D
@call_Sys.halt
0;JMP
(RETURN-63)
//Pop
@POP_R564
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R564)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.init)
@0
D=A
@R14
M=D
@F565
D;JEQ
D=A
@FUNCT
0;JMP
(F565)
//Push C
@16384
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R566
D=A
@R14
M=D
//S
@Output.4
D=A
@POP
0;JMP
(POP_R566)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R567
D=A
@R14
M=D
//S
@Output.2
D=A
@POP
0;JMP
(POP_R567)
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R568
D=A
@R14
M=D
//S
@Output.1
D=A
@POP
0;JMP
(POP_R568)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R569
D=A
@R14
M=D
//S
@Output.0
D=A
@POP
0;JMP
(POP_R569)
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-64
D=A
@R13
M=D
@call_String.new
0;JMP
(RETURN-64)
//Pop
@POP_R570
D=A
@R14
M=D
//S
@Output.3
D=A
@POP
0;JMP
(POP_R570)
//call
@RETURN571
D=A
@R13
M=D
(call_Output.initMap)
@Output.initMap
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN571)
//Pop
@POP_R572
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R572)
//call
@RETURN573
D=A
@R13
M=D
(call_Output.createShiftedMap)
@Output.createShiftedMap
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN573)
//Pop
@POP_R574
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R574)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.initMap)
@0
D=A
@R14
M=D
@F575
D;JEQ
D=A
@FUNCT
0;JMP
(F575)
//Push C
@127
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-65
D=A
@R13
M=D
@call_Array.new
0;JMP
(RETURN-65)
//Pop
@POP_R576
D=A
@R14
M=D
//S
@Output.5
D=A
@POP
0;JMP
(POP_R576)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN577
D=A
@R13
M=D
(call_Output.create)
@Output.create
D=A
@R14
M=D
@12
D=A
@CALL
0;JMP
(RETURN577)
//Pop
@POP_R578
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R578)
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-66
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-66)
//Pop
@POP_R579
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R579)
//Push C
@33
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-67
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-67)
//Pop
@POP_R580
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R580)
//Push C
@34
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@20
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-68
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-68)
//Pop
@POP_R581
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R581)
//Push C
@35
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@18
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@18
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@18
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@18
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@18
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@18
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-69
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-69)
//Pop
@POP_R582
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R582)
//Push C
@36
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-70
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-70)
//Pop
@POP_R583
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R583)
//Push C
@37
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@35
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@49
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-71
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-71)
//Pop
@POP_R584
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R584)
//Push C
@38
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-72
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-72)
//Pop
@POP_R585
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R585)
//Push C
@39
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-73
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-73)
//Pop
@POP_R586
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R586)
//Push C
@40
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-74
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-74)
//Pop
@POP_R587
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R587)
//Push C
@41
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-75
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-75)
//Pop
@POP_R588
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R588)
//Push C
@42
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-76
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-76)
//Pop
@POP_R589
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R589)
//Push C
@43
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-77
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-77)
//Pop
@POP_R590
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R590)
//Push C
@44
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-78
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-78)
//Pop
@POP_R591
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R591)
//Push C
@45
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-79
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-79)
//Pop
@POP_R592
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R592)
//Push C
@46
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-80
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-80)
//Pop
@POP_R593
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R593)
//Push C
@47
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-81
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-81)
//Pop
@POP_R594
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R594)
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-82
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-82)
//Pop
@POP_R595
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R595)
//Push C
@49
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@14
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-83
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-83)
//Pop
@POP_R596
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R596)
//Push C
@50
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-84
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-84)
//Pop
@POP_R597
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R597)
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@28
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-85
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-85)
//Pop
@POP_R598
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R598)
//Push C
@52
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@28
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@26
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@25
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@60
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-86
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-86)
//Pop
@POP_R599
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R599)
//Push C
@53
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-87
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-87)
//Pop
@POP_R600
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R600)
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@28
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-88
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-88)
//Pop
@POP_R601
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R601)
//Push C
@55
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@49
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-89
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-89)
//Pop
@POP_R602
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R602)
//Push C
@56
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-90
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-90)
//Pop
@POP_R603
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R603)
//Push C
@57
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@62
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@14
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-91
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-91)
//Pop
@POP_R604
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R604)
//Push C
@58
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-92
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-92)
//Pop
@POP_R605
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R605)
//Push C
@59
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-93
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-93)
//Pop
@POP_R606
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R606)
//Push C
@60
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-94
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-94)
//Pop
@POP_R607
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R607)
//Push C
@61
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-95
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-95)
//Pop
@POP_R608
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R608)
//Push C
@62
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-96
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-96)
//Pop
@POP_R609
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R609)
//Push C
@64
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@59
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@59
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@59
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-97
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-97)
//Pop
@POP_R610
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R610)
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-98
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-98)
//Pop
@POP_R611
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R611)
//Push C
@65
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-99
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-99)
//Pop
@POP_R612
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R612)
//Push C
@66
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-100
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-100)
//Pop
@POP_R613
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R613)
//Push C
@67
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@28
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@35
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@35
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@28
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-101
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-101)
//Pop
@POP_R614
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R614)
//Push C
@68
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-102
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-102)
//Pop
@POP_R615
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R615)
//Push C
@69
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@35
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@11
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@11
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@35
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-103
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-103)
//Pop
@POP_R616
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R616)
//Push C
@70
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@35
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@11
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@11
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-104
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-104)
//Pop
@POP_R617
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R617)
//Push C
@71
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@28
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@35
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@59
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@44
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-105
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-105)
//Pop
@POP_R618
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R618)
//Push C
@72
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-106
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-106)
//Pop
@POP_R619
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R619)
//Push C
@73
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-107
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-107)
//Pop
@POP_R620
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R620)
//Push C
@74
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@60
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@14
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-108
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-108)
//Pop
@POP_R621
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R621)
//Push C
@75
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-109
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-109)
//Pop
@POP_R622
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R622)
//Push C
@76
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@35
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-110
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-110)
//Pop
@POP_R623
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R623)
//Push C
@77
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@33
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-111
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-111)
//Pop
@POP_R624
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R624)
//Push C
@78
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@55
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@55
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@59
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@59
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-112
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-112)
//Pop
@POP_R625
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R625)
//Push C
@79
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-113
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-113)
//Pop
@POP_R626
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R626)
//Push C
@80
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-114
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-114)
//Pop
@POP_R627
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R627)
//Push C
@81
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@59
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-115
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-115)
//Pop
@POP_R628
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R628)
//Push C
@82
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-116
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-116)
//Pop
@POP_R629
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R629)
//Push C
@83
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@28
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-117
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-117)
//Pop
@POP_R630
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R630)
//Push C
@84
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@45
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-118
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-118)
//Pop
@POP_R631
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R631)
//Push C
@85
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-119
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-119)
//Pop
@POP_R632
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R632)
//Push C
@86
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-120
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-120)
//Pop
@POP_R633
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R633)
//Push C
@87
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@18
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-121
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-121)
//Pop
@POP_R634
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R634)
//Push C
@88
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-122
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-122)
//Pop
@POP_R635
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R635)
//Push C
@89
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-123
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-123)
//Pop
@POP_R636
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R636)
//Push C
@90
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@49
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@35
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-124
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-124)
//Pop
@POP_R637
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R637)
//Push C
@91
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-125
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-125)
//Pop
@POP_R638
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R638)
//Push C
@92
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-126
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-126)
//Pop
@POP_R639
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R639)
//Push C
@93
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-127
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-127)
//Pop
@POP_R640
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R640)
//Push C
@94
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@8
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@28
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-128
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-128)
//Pop
@POP_R641
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R641)
//Push C
@95
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-129
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-129)
//Pop
@POP_R642
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R642)
//Push C
@96
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-130
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-130)
//Pop
@POP_R643
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R643)
//Push C
@97
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@14
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-131
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-131)
//Pop
@POP_R644
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R644)
//Push C
@98
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-132
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-132)
//Pop
@POP_R645
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R645)
//Push C
@99
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-133
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-133)
//Pop
@POP_R646
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R646)
//Push C
@100
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@60
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-134
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-134)
//Pop
@POP_R647
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R647)
//Push C
@101
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-135
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-135)
//Pop
@POP_R648
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R648)
//Push C
@102
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@28
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@38
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-136
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-136)
//Pop
@POP_R649
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R649)
//Push C
@103
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@62
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-137
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-137)
//Pop
@POP_R650
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R650)
//Push C
@104
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@55
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-138
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-138)
//Pop
@POP_R651
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R651)
//Push C
@105
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@14
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-139
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-139)
//Pop
@POP_R652
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R652)
//Push C
@106
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@56
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-140
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-140)
//Pop
@POP_R653
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R653)
//Push C
@107
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-141
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-141)
//Pop
@POP_R654
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R654)
//Push C
@108
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@14
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-142
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-142)
//Pop
@POP_R655
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R655)
//Push C
@109
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@29
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@43
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@43
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@43
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@43
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-143
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-143)
//Pop
@POP_R656
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R656)
//Push C
@110
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@29
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-144
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-144)
//Pop
@POP_R657
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R657)
//Push C
@111
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-145
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-145)
//Pop
@POP_R658
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R658)
//Push C
@112
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-146
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-146)
//Pop
@POP_R659
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R659)
//Push C
@113
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@62
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-147
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-147)
//Pop
@POP_R660
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R660)
//Push C
@114
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@29
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@55
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@7
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-148
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-148)
//Pop
@POP_R661
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R661)
//Push C
@115
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-149
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-149)
//Pop
@POP_R662
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R662)
//Push C
@116
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@28
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-150
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-150)
//Pop
@POP_R663
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R663)
//Push C
@117
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-151
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-151)
//Pop
@POP_R664
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R664)
//Push C
@118
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-152
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-152)
//Pop
@POP_R665
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R665)
//Push C
@119
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@18
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-153
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-153)
//Pop
@POP_R666
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R666)
//Push C
@120
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-154
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-154)
//Pop
@POP_R667
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R667)
//Push C
@121
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@62
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-155
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-155)
//Pop
@POP_R668
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R668)
//Push C
@122
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-156
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-156)
//Pop
@POP_R669
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R669)
//Push C
@123
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@56
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@7
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@56
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-157
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-157)
//Pop
@POP_R670
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R670)
//Push C
@124
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-158
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-158)
//Pop
@POP_R671
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R671)
//Push C
@125
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@7
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@56
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@7
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-159
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-159)
//Pop
@POP_R672
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R672)
//Push C
@126
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@38
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@45
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@25
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-160
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-160)
//Pop
@POP_R673
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R673)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.create)
@1
D=A
@R14
M=D
@F674
D;JEQ
D=A
@FUNCT
0;JMP
(F674)
//Push C
@11
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-161
D=A
@R13
M=D
@call_Array.new
0;JMP
(RETURN-161)
//Pop
@POP_R675
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R675)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Output.5
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R676
D=A
@ADD
0;JMP
(ADD_R676)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R677
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R677)
//Pop point
@POP_R678
D=A
@THT
0;JMP
(POP_R678)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R679
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R679)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R680
D=A
@ADD
0;JMP
(ADD_R680)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R681
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R681)
//Pop point
@POP_R682
D=A
@THT
0;JMP
(POP_R682)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R683
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R683)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R684
D=A
@ADD
0;JMP
(ADD_R684)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R685
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R685)
//Pop point
@POP_R686
D=A
@THT
0;JMP
(POP_R686)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R687
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R687)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R688
D=A
@ADD
0;JMP
(ADD_R688)
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R689
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R689)
//Pop point
@POP_R690
D=A
@THT
0;JMP
(POP_R690)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R691
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R691)
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R692
D=A
@ADD
0;JMP
(ADD_R692)
//Push A
@4
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R693
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R693)
//Pop point
@POP_R694
D=A
@THT
0;JMP
(POP_R694)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R695
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R695)
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R696
D=A
@ADD
0;JMP
(ADD_R696)
//Push A
@5
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R697
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R697)
//Pop point
@POP_R698
D=A
@THT
0;JMP
(POP_R698)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R699
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R699)
//Push C
@5
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R700
D=A
@ADD
0;JMP
(ADD_R700)
//Push A
@6
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R701
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R701)
//Pop point
@POP_R702
D=A
@THT
0;JMP
(POP_R702)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R703
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R703)
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R704
D=A
@ADD
0;JMP
(ADD_R704)
//Push A
@7
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R705
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R705)
//Pop point
@POP_R706
D=A
@THT
0;JMP
(POP_R706)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R707
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R707)
//Push C
@7
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R708
D=A
@ADD
0;JMP
(ADD_R708)
//Push A
@8
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R709
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R709)
//Pop point
@POP_R710
D=A
@THT
0;JMP
(POP_R710)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R711
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R711)
//Push C
@8
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R712
D=A
@ADD
0;JMP
(ADD_R712)
//Push A
@9
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R713
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R713)
//Pop point
@POP_R714
D=A
@THT
0;JMP
(POP_R714)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R715
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R715)
//Push C
@9
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R716
D=A
@ADD
0;JMP
(ADD_R716)
//Push A
@10
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R717
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R717)
//Pop point
@POP_R718
D=A
@THT
0;JMP
(POP_R718)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R719
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R719)
//Push C
@10
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R720
D=A
@ADD
0;JMP
(ADD_R720)
//Push A
@11
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R721
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R721)
//Pop point
@POP_R722
D=A
@THT
0;JMP
(POP_R722)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R723
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R723)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.createShiftedMap)
@4
D=A
@R14
M=D
@F724
D;JEQ
D=A
@FUNCT
0;JMP
(F724)
//Push C
@127
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-162
D=A
@R13
M=D
@call_Array.new
0;JMP
(RETURN-162)
//Pop
@POP_R725
D=A
@R14
M=D
//S
@Output.6
D=A
@POP
0;JMP
(POP_R725)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R726
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R726)
(Output.createShiftedMapWHILE_EXP0)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@127
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n727
D=A
@LT
0;JMP
(n727)
//NOT
@SP
A=M-1
M=!M
//if
@IF728
D=A
@IF
0;JMP
(IF728)
@Output.createShiftedMapWHILE_END0
D;JNE
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Output.5
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R729
D=A
@ADD
0;JMP
(ADD_R729)
//Pop point
@POP_R730
D=A
@THT
0;JMP
(POP_R730)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R731
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R731)
//Push C
@11
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-163
D=A
@R13
M=D
@call_Array.new
0;JMP
(RETURN-163)
//Pop
@POP_R732
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R732)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Output.6
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R733
D=A
@ADD
0;JMP
(ADD_R733)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R734
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R734)
//Pop point
@POP_R735
D=A
@THT
0;JMP
(POP_R735)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R736
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R736)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R737
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R737)
(Output.createShiftedMapWHILE_EXP1)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@11
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n738
D=A
@LT
0;JMP
(n738)
//NOT
@SP
A=M-1
M=!M
//if
@IF739
D=A
@IF
0;JMP
(IF739)
@Output.createShiftedMapWHILE_END1
D;JNE
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R740
D=A
@ADD
0;JMP
(ADD_R740)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R741
D=A
@ADD
0;JMP
(ADD_R741)
//Pop point
@POP_R742
D=A
@THT
0;JMP
(POP_R742)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@256
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-164
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-164)
//Pop
@POP_R743
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R743)
//Pop point
@POP_R744
D=A
@THT
0;JMP
(POP_R744)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R745
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R745)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R746
D=A
@ADD
0;JMP
(ADD_R746)
//Pop
@POP_R747
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R747)
//goto
@Output.createShiftedMapWHILE_EXP1
0;JMP
(Output.createShiftedMapWHILE_END1)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n748
D=A
@EQ
0;JMP
(n748)
//if
@IF749
D=A
@IF
0;JMP
(IF749)
@Output.createShiftedMapIF_TRUE0
D;JNE
//goto
@Output.createShiftedMapIF_FALSE0
0;JMP
(Output.createShiftedMapIF_TRUE0)
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R750
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R750)
//goto
@Output.createShiftedMapIF_END0
0;JMP
(Output.createShiftedMapIF_FALSE0)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R751
D=A
@ADD
0;JMP
(ADD_R751)
//Pop
@POP_R752
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R752)
(Output.createShiftedMapIF_END0)
//goto
@Output.createShiftedMapWHILE_EXP0
0;JMP
(Output.createShiftedMapWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.getMap)
@1
D=A
@R14
M=D
@F753
D;JEQ
D=A
@FUNCT
0;JMP
(F753)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n754
D=A
@LT
0;JMP
(n754)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@126
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n755
D=A
@GT
0;JMP
(n755)
//OR
@OR_R756
D=A
@OR
0;JMP
(OR_R756)
//if
@IF757
D=A
@IF
0;JMP
(IF757)
@Output.getMapIF_TRUE0
D;JNE
//goto
@Output.getMapIF_FALSE0
0;JMP
(Output.getMapIF_TRUE0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R758
D=A
@R14
M=D
//A
@0
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R758)
(Output.getMapIF_FALSE0)
//Push S
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF759
D=A
@IF
0;JMP
(IF759)
@Output.getMapIF_TRUE1
D;JNE
//goto
@Output.getMapIF_FALSE1
0;JMP
(Output.getMapIF_TRUE1)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Output.5
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R760
D=A
@ADD
0;JMP
(ADD_R760)
//Pop point
@POP_R761
D=A
@THT
0;JMP
(POP_R761)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R762
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R762)
//goto
@Output.getMapIF_END1
0;JMP
(Output.getMapIF_FALSE1)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Output.6
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R763
D=A
@ADD
0;JMP
(ADD_R763)
//Pop point
@POP_R764
D=A
@THT
0;JMP
(POP_R764)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R765
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R765)
(Output.getMapIF_END1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.drawChar)
@4
D=A
@R14
M=D
@F766
D;JEQ
D=A
@FUNCT
0;JMP
(F766)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN767
D=A
@R13
M=D
(call_Output.getMap)
@Output.getMap
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN767)
//Pop
@POP_R768
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R768)
//Push S
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R769
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R769)
(Output.drawCharWHILE_EXP0)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@11
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n770
D=A
@LT
0;JMP
(n770)
//NOT
@SP
A=M-1
M=!M
//if
@IF771
D=A
@IF
0;JMP
(IF771)
@Output.drawCharWHILE_END0
D;JNE
//Push S
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF772
D=A
@IF
0;JMP
(IF772)
@Output.drawCharIF_TRUE0
D;JNE
//goto
@Output.drawCharIF_FALSE0
0;JMP
(Output.drawCharIF_TRUE0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Output.4
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R773
D=A
@ADD
0;JMP
(ADD_R773)
//Pop point
@POP_R774
D=A
@THT
0;JMP
(POP_R774)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@256
D=A
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//AND
@AND_R775
D=A
@AND
0;JMP
(AND_R775)
//Pop
@POP_R776
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R776)
//goto
@Output.drawCharIF_END0
0;JMP
(Output.drawCharIF_FALSE0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Output.4
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R777
D=A
@ADD
0;JMP
(ADD_R777)
//Pop point
@POP_R778
D=A
@THT
0;JMP
(POP_R778)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@255
D=A
@SP
M=M+1
A=M-1
M=D
//AND
@AND_R779
D=A
@AND
0;JMP
(AND_R779)
//Pop
@POP_R780
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R780)
(Output.drawCharIF_END0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Output.4
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R781
D=A
@ADD
0;JMP
(ADD_R781)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R782
D=A
@ADD
0;JMP
(ADD_R782)
//Pop point
@POP_R783
D=A
@THT
0;JMP
(POP_R783)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//OR
@OR_R784
D=A
@OR
0;JMP
(OR_R784)
//Pop
@POP_R785
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R785)
//Pop point
@POP_R786
D=A
@THT
0;JMP
(POP_R786)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R787
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R787)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R788
D=A
@ADD
0;JMP
(ADD_R788)
//Pop
@POP_R789
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R789)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R790
D=A
@ADD
0;JMP
(ADD_R790)
//Pop
@POP_R791
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R791)
//goto
@Output.drawCharWHILE_EXP0
0;JMP
(Output.drawCharWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.moveCursor)
@0
D=A
@R14
M=D
@F792
D;JEQ
D=A
@FUNCT
0;JMP
(F792)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n793
D=A
@LT
0;JMP
(n793)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@22
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n794
D=A
@GT
0;JMP
(n794)
//OR
@OR_R795
D=A
@OR
0;JMP
(OR_R795)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n796
D=A
@LT
0;JMP
(n796)
//OR
@OR_R797
D=A
@OR
0;JMP
(OR_R797)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n798
D=A
@GT
0;JMP
(n798)
//OR
@OR_R799
D=A
@OR
0;JMP
(OR_R799)
//if
@IF800
D=A
@IF
0;JMP
(IF800)
@Output.moveCursorIF_TRUE0
D;JNE
//goto
@Output.moveCursorIF_FALSE0
0;JMP
(Output.moveCursorIF_TRUE0)
//Push C
@20
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-165
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-165)
//Pop
@POP_R801
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R801)
(Output.moveCursorIF_FALSE0)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-166
D=A
@R13
M=D
@call_Math.divide
0;JMP
(RETURN-166)
//Pop
@POP_R802
D=A
@R14
M=D
//S
@Output.0
D=A
@POP
0;JMP
(POP_R802)
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@352
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-167
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-167)
//ADD
@ADD_R803
D=A
@ADD
0;JMP
(ADD_R803)
//Push S
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R804
D=A
@ADD
0;JMP
(ADD_R804)
//Pop
@POP_R805
D=A
@R14
M=D
//S
@Output.1
D=A
@POP
0;JMP
(POP_R805)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-168
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-168)
//EQ
@n806
D=A
@EQ
0;JMP
(n806)
//Pop
@POP_R807
D=A
@R14
M=D
//S
@Output.2
D=A
@POP
0;JMP
(POP_R807)
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN808
D=A
@R13
M=D
(call_Output.drawChar)
@Output.drawChar
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN808)
//Pop
@POP_R809
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R809)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.printChar)
@0
D=A
@R14
M=D
@F810
D;JEQ
D=A
@FUNCT
0;JMP
(F810)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-169
D=A
@R13
M=D
@call_String.newLine
0;JMP
(RETURN-169)
//EQ
@n811
D=A
@EQ
0;JMP
(n811)
//if
@IF812
D=A
@IF
0;JMP
(IF812)
@Output.printCharIF_TRUE0
D;JNE
//goto
@Output.printCharIF_FALSE0
0;JMP
(Output.printCharIF_TRUE0)
//call
@RETURN813
D=A
@R13
M=D
(call_Output.println)
@Output.println
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN813)
//Pop
@POP_R814
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R814)
//goto
@Output.printCharIF_END0
0;JMP
(Output.printCharIF_FALSE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-170
D=A
@R13
M=D
@call_String.backSpace
0;JMP
(RETURN-170)
//EQ
@n815
D=A
@EQ
0;JMP
(n815)
//if
@IF816
D=A
@IF
0;JMP
(IF816)
@Output.printCharIF_TRUE1
D;JNE
//goto
@Output.printCharIF_FALSE1
0;JMP
(Output.printCharIF_TRUE1)
//call
@RETURN817
D=A
@R13
M=D
(call_Output.backSpace)
@Output.backSpace
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN817)
//Pop
@POP_R818
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R818)
//goto
@Output.printCharIF_END1
0;JMP
(Output.printCharIF_FALSE1)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-171
D=A
@R13
M=D
@call_Output.drawChar
0;JMP
(RETURN-171)
//Pop
@POP_R819
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R819)
//Push S
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//if
@IF820
D=A
@IF
0;JMP
(IF820)
@Output.printCharIF_TRUE2
D;JNE
//goto
@Output.printCharIF_FALSE2
0;JMP
(Output.printCharIF_TRUE2)
//Push S
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R821
D=A
@ADD
0;JMP
(ADD_R821)
//Pop
@POP_R822
D=A
@R14
M=D
//S
@Output.0
D=A
@POP
0;JMP
(POP_R822)
//Push S
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R823
D=A
@ADD
0;JMP
(ADD_R823)
//Pop
@POP_R824
D=A
@R14
M=D
//S
@Output.1
D=A
@POP
0;JMP
(POP_R824)
(Output.printCharIF_FALSE2)
//Push S
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n825
D=A
@EQ
0;JMP
(n825)
//if
@IF826
D=A
@IF
0;JMP
(IF826)
@Output.printCharIF_TRUE3
D;JNE
//goto
@Output.printCharIF_FALSE3
0;JMP
(Output.printCharIF_TRUE3)
@RETURN-172
D=A
@R13
M=D
@call_Output.println
0;JMP
(RETURN-172)
//Pop
@POP_R827
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R827)
//goto
@Output.printCharIF_END3
0;JMP
(Output.printCharIF_FALSE3)
//Push S
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R828
D=A
@R14
M=D
//S
@Output.2
D=A
@POP
0;JMP
(POP_R828)
(Output.printCharIF_END3)
(Output.printCharIF_END1)
(Output.printCharIF_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.printString)
@2
D=A
@R14
M=D
@F829
D;JEQ
D=A
@FUNCT
0;JMP
(F829)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN830
D=A
@R13
M=D
(call_String.length)
@String.length
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN830)
//Pop
@POP_R831
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R831)
(Output.printStringWHILE_EXP0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n832
D=A
@LT
0;JMP
(n832)
//NOT
@SP
A=M-1
M=!M
//if
@IF833
D=A
@IF
0;JMP
(IF833)
@Output.printStringWHILE_END0
D;JNE
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN834
D=A
@R13
M=D
(call_String.charAt)
@String.charAt
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN834)
@RETURN-173
D=A
@R13
M=D
@call_Output.printChar
0;JMP
(RETURN-173)
//Pop
@POP_R835
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R835)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R836
D=A
@ADD
0;JMP
(ADD_R836)
//Pop
@POP_R837
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R837)
//goto
@Output.printStringWHILE_EXP0
0;JMP
(Output.printStringWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.printInt)
@0
D=A
@R14
M=D
@F838
D;JEQ
D=A
@FUNCT
0;JMP
(F838)
//Push S
@Output.3
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN839
D=A
@R13
M=D
(call_String.setInt)
@String.setInt
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN839)
//Pop
@POP_R840
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R840)
//Push S
@Output.3
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-174
D=A
@R13
M=D
@call_Output.printString
0;JMP
(RETURN-174)
//Pop
@POP_R841
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R841)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.println)
@0
D=A
@R14
M=D
@F842
D;JEQ
D=A
@FUNCT
0;JMP
(F842)
//Push S
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@352
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R843
D=A
@ADD
0;JMP
(ADD_R843)
//Push S
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R844
D=A
@SUB
0;JMP
(SUB_R844)
//Pop
@POP_R845
D=A
@R14
M=D
//S
@Output.1
D=A
@POP
0;JMP
(POP_R845)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R846
D=A
@R14
M=D
//S
@Output.0
D=A
@POP
0;JMP
(POP_R846)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R847
D=A
@R14
M=D
//S
@Output.2
D=A
@POP
0;JMP
(POP_R847)
//Push S
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@8128
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n848
D=A
@EQ
0;JMP
(n848)
//if
@IF849
D=A
@IF
0;JMP
(IF849)
@Output.printlnIF_TRUE0
D;JNE
//goto
@Output.printlnIF_FALSE0
0;JMP
(Output.printlnIF_TRUE0)
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R850
D=A
@R14
M=D
//S
@Output.1
D=A
@POP
0;JMP
(POP_R850)
(Output.printlnIF_FALSE0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.backSpace)
@0
D=A
@R14
M=D
@F851
D;JEQ
D=A
@FUNCT
0;JMP
(F851)
//Push S
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF852
D=A
@IF
0;JMP
(IF852)
@Output.backSpaceIF_TRUE0
D;JNE
//goto
@Output.backSpaceIF_FALSE0
0;JMP
(Output.backSpaceIF_TRUE0)
//Push S
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n853
D=A
@GT
0;JMP
(n853)
//if
@IF854
D=A
@IF
0;JMP
(IF854)
@Output.backSpaceIF_TRUE1
D;JNE
//goto
@Output.backSpaceIF_FALSE1
0;JMP
(Output.backSpaceIF_TRUE1)
//Push S
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R855
D=A
@SUB
0;JMP
(SUB_R855)
//Pop
@POP_R856
D=A
@R14
M=D
//S
@Output.0
D=A
@POP
0;JMP
(POP_R856)
//Push S
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R857
D=A
@SUB
0;JMP
(SUB_R857)
//Pop
@POP_R858
D=A
@R14
M=D
//S
@Output.1
D=A
@POP
0;JMP
(POP_R858)
//goto
@Output.backSpaceIF_END1
0;JMP
(Output.backSpaceIF_FALSE1)
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R859
D=A
@R14
M=D
//S
@Output.0
D=A
@POP
0;JMP
(POP_R859)
//Push S
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n860
D=A
@EQ
0;JMP
(n860)
//if
@IF861
D=A
@IF
0;JMP
(IF861)
@Output.backSpaceIF_TRUE2
D;JNE
//goto
@Output.backSpaceIF_FALSE2
0;JMP
(Output.backSpaceIF_TRUE2)
//Push C
@8128
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R862
D=A
@R14
M=D
//S
@Output.1
D=A
@POP
0;JMP
(POP_R862)
(Output.backSpaceIF_FALSE2)
//Push S
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@321
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R863
D=A
@SUB
0;JMP
(SUB_R863)
//Pop
@POP_R864
D=A
@R14
M=D
//S
@Output.1
D=A
@POP
0;JMP
(POP_R864)
(Output.backSpaceIF_END1)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R865
D=A
@R14
M=D
//S
@Output.2
D=A
@POP
0;JMP
(POP_R865)
//goto
@Output.backSpaceIF_END0
0;JMP
(Output.backSpaceIF_FALSE0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R866
D=A
@R14
M=D
//S
@Output.2
D=A
@POP
0;JMP
(POP_R866)
(Output.backSpaceIF_END0)
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-175
D=A
@R13
M=D
@call_Output.drawChar
0;JMP
(RETURN-175)
//Pop
@POP_R867
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R867)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.init)
@1
D=A
@R14
M=D
@F868
D;JEQ
D=A
@FUNCT
0;JMP
(F868)
//Push C
@16384
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R869
D=A
@R14
M=D
//S
@Screen.1
D=A
@POP
0;JMP
(POP_R869)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R870
D=A
@R14
M=D
//S
@Screen.2
D=A
@POP
0;JMP
(POP_R870)
//Push C
@17
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-176
D=A
@R13
M=D
@call_Array.new
0;JMP
(RETURN-176)
//Pop
@POP_R871
D=A
@R14
M=D
//S
@Screen.0
D=A
@POP
0;JMP
(POP_R871)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push S
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R872
D=A
@ADD
0;JMP
(ADD_R872)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R873
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R873)
//Pop point
@POP_R874
D=A
@THT
0;JMP
(POP_R874)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R875
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R875)
(Screen.initWHILE_EXP0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n876
D=A
@LT
0;JMP
(n876)
//NOT
@SP
A=M-1
M=!M
//if
@IF877
D=A
@IF
0;JMP
(IF877)
@Screen.initWHILE_END0
D;JNE
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R878
D=A
@ADD
0;JMP
(ADD_R878)
//Pop
@POP_R879
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R879)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R880
D=A
@ADD
0;JMP
(ADD_R880)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R881
D=A
@SUB
0;JMP
(SUB_R881)
//Push S
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R882
D=A
@ADD
0;JMP
(ADD_R882)
//Pop point
@POP_R883
D=A
@THT
0;JMP
(POP_R883)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R884
D=A
@SUB
0;JMP
(SUB_R884)
//Push S
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R885
D=A
@ADD
0;JMP
(ADD_R885)
//Pop point
@POP_R886
D=A
@THT
0;JMP
(POP_R886)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R887
D=A
@ADD
0;JMP
(ADD_R887)
//Pop
@POP_R888
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R888)
//Pop point
@POP_R889
D=A
@THT
0;JMP
(POP_R889)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R890
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R890)
//goto
@Screen.initWHILE_EXP0
0;JMP
(Screen.initWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.clearScreen)
@1
D=A
@R14
M=D
@F891
D;JEQ
D=A
@FUNCT
0;JMP
(F891)
(Screen.clearScreenWHILE_EXP0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@8192
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n892
D=A
@LT
0;JMP
(n892)
//NOT
@SP
A=M-1
M=!M
//if
@IF893
D=A
@IF
0;JMP
(IF893)
@Screen.clearScreenWHILE_END0
D;JNE
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Screen.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R894
D=A
@ADD
0;JMP
(ADD_R894)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R895
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R895)
//Pop point
@POP_R896
D=A
@THT
0;JMP
(POP_R896)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R897
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R897)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R898
D=A
@ADD
0;JMP
(ADD_R898)
//Pop
@POP_R899
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R899)
//goto
@Screen.clearScreenWHILE_EXP0
0;JMP
(Screen.clearScreenWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.updateLocation)
@0
D=A
@R14
M=D
@F900
D;JEQ
D=A
@FUNCT
0;JMP
(F900)
//Push S
@Screen.2
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF901
D=A
@IF
0;JMP
(IF901)
@Screen.updateLocationIF_TRUE0
D;JNE
//goto
@Screen.updateLocationIF_FALSE0
0;JMP
(Screen.updateLocationIF_TRUE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Screen.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R902
D=A
@ADD
0;JMP
(ADD_R902)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Screen.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R903
D=A
@ADD
0;JMP
(ADD_R903)
//Pop point
@POP_R904
D=A
@THT
0;JMP
(POP_R904)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//OR
@OR_R905
D=A
@OR
0;JMP
(OR_R905)
//Pop
@POP_R906
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R906)
//Pop point
@POP_R907
D=A
@THT
0;JMP
(POP_R907)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R908
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R908)
//goto
@Screen.updateLocationIF_END0
0;JMP
(Screen.updateLocationIF_FALSE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Screen.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R909
D=A
@ADD
0;JMP
(ADD_R909)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Screen.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R910
D=A
@ADD
0;JMP
(ADD_R910)
//Pop point
@POP_R911
D=A
@THT
0;JMP
(POP_R911)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//AND
@AND_R912
D=A
@AND
0;JMP
(AND_R912)
//Pop
@POP_R913
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R913)
//Pop point
@POP_R914
D=A
@THT
0;JMP
(POP_R914)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R915
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R915)
(Screen.updateLocationIF_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.setColor)
@0
D=A
@R14
M=D
@F916
D;JEQ
D=A
@FUNCT
0;JMP
(F916)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R917
D=A
@R14
M=D
//S
@Screen.2
D=A
@POP
0;JMP
(POP_R917)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.drawPixel)
@3
D=A
@R14
M=D
@F918
D;JEQ
D=A
@FUNCT
0;JMP
(F918)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n919
D=A
@LT
0;JMP
(n919)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@511
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n920
D=A
@GT
0;JMP
(n920)
//OR
@OR_R921
D=A
@OR
0;JMP
(OR_R921)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n922
D=A
@LT
0;JMP
(n922)
//OR
@OR_R923
D=A
@OR
0;JMP
(OR_R923)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@255
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n924
D=A
@GT
0;JMP
(n924)
//OR
@OR_R925
D=A
@OR
0;JMP
(OR_R925)
//if
@IF926
D=A
@IF
0;JMP
(IF926)
@Screen.drawPixelIF_TRUE0
D;JNE
//goto
@Screen.drawPixelIF_FALSE0
0;JMP
(Screen.drawPixelIF_TRUE0)
//Push C
@7
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-177
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-177)
//Pop
@POP_R927
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R927)
(Screen.drawPixelIF_FALSE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-178
D=A
@R13
M=D
@call_Math.divide
0;JMP
(RETURN-178)
//Pop
@POP_R928
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R928)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-179
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-179)
//SUB
@SUB_R929
D=A
@SUB
0;JMP
(SUB_R929)
//Pop
@POP_R930
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R930)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-180
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-180)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R931
D=A
@ADD
0;JMP
(ADD_R931)
//Pop
@POP_R932
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R932)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R933
D=A
@ADD
0;JMP
(ADD_R933)
//Pop point
@POP_R934
D=A
@THT
0;JMP
(POP_R934)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN935
D=A
@R13
M=D
(call_Screen.updateLocation)
@Screen.updateLocation
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN935)
//Pop
@POP_R936
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R936)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.drawConditional)
@0
D=A
@R14
M=D
@F937
D;JEQ
D=A
@FUNCT
0;JMP
(F937)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF938
D=A
@IF
0;JMP
(IF938)
@Screen.drawConditionalIF_TRUE0
D;JNE
//goto
@Screen.drawConditionalIF_FALSE0
0;JMP
(Screen.drawConditionalIF_TRUE0)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN939
D=A
@R13
M=D
(call_Screen.drawPixel)
@Screen.drawPixel
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN939)
//Pop
@POP_R940
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R940)
//goto
@Screen.drawConditionalIF_END0
0;JMP
(Screen.drawConditionalIF_FALSE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-181
D=A
@R13
M=D
@call_Screen.drawPixel
0;JMP
(RETURN-181)
//Pop
@POP_R941
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R941)
(Screen.drawConditionalIF_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.drawLine)
@11
D=A
@R14
M=D
@F942
D;JEQ
D=A
@FUNCT
0;JMP
(F942)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n943
D=A
@LT
0;JMP
(n943)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@511
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n944
D=A
@GT
0;JMP
(n944)
//OR
@OR_R945
D=A
@OR
0;JMP
(OR_R945)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n946
D=A
@LT
0;JMP
(n946)
//OR
@OR_R947
D=A
@OR
0;JMP
(OR_R947)
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@255
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n948
D=A
@GT
0;JMP
(n948)
//OR
@OR_R949
D=A
@OR
0;JMP
(OR_R949)
//if
@IF950
D=A
@IF
0;JMP
(IF950)
@Screen.drawLineIF_TRUE0
D;JNE
//goto
@Screen.drawLineIF_FALSE0
0;JMP
(Screen.drawLineIF_TRUE0)
//Push C
@8
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-182
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-182)
//Pop
@POP_R951
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R951)
(Screen.drawLineIF_FALSE0)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R952
D=A
@SUB
0;JMP
(SUB_R952)
@RETURN-183
D=A
@R13
M=D
@call_Math.abs
0;JMP
(RETURN-183)
//Pop
@POP_R953
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R953)
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R954
D=A
@SUB
0;JMP
(SUB_R954)
@RETURN-184
D=A
@R13
M=D
@call_Math.abs
0;JMP
(RETURN-184)
//Pop
@POP_R955
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R955)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n956
D=A
@LT
0;JMP
(n956)
//Pop
@POP_R957
D=A
@R14
M=D
//L
@6
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R957)
//Push L
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n958
D=A
@LT
0;JMP
(n958)
//AND
@AND_R959
D=A
@AND
0;JMP
(AND_R959)
//Push L
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n960
D=A
@LT
0;JMP
(n960)
//AND
@AND_R961
D=A
@AND
0;JMP
(AND_R961)
//OR
@OR_R962
D=A
@OR
0;JMP
(OR_R962)
//if
@IF963
D=A
@IF
0;JMP
(IF963)
@Screen.drawLineIF_TRUE1
D;JNE
//goto
@Screen.drawLineIF_FALSE1
0;JMP
(Screen.drawLineIF_TRUE1)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R964
D=A
@R14
M=D
//L
@4
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R964)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R965
D=A
@R14
M=D
//A
@0
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R965)
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R966
D=A
@R14
M=D
//A
@2
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R966)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R967
D=A
@R14
M=D
//L
@4
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R967)
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R968
D=A
@R14
M=D
//A
@1
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R968)
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R969
D=A
@R14
M=D
//A
@3
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R969)
(Screen.drawLineIF_FALSE1)
//Push L
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF970
D=A
@IF
0;JMP
(IF970)
@Screen.drawLineIF_TRUE2
D;JNE
//goto
@Screen.drawLineIF_FALSE2
0;JMP
(Screen.drawLineIF_TRUE2)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R971
D=A
@R14
M=D
//L
@4
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R971)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R972
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R972)
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R973
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R973)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R974
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R974)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R975
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R975)
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R976
D=A
@R14
M=D
//L
@8
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R976)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n977
D=A
@GT
0;JMP
(n977)
//Pop
@POP_R978
D=A
@R14
M=D
//L
@7
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R978)
//goto
@Screen.drawLineIF_END2
0;JMP
(Screen.drawLineIF_FALSE2)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R979
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R979)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R980
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R980)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R981
D=A
@R14
M=D
//L
@8
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R981)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n982
D=A
@GT
0;JMP
(n982)
//Pop
@POP_R983
D=A
@R14
M=D
//L
@7
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R983)
(Screen.drawLineIF_END2)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-185
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-185)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R984
D=A
@SUB
0;JMP
(SUB_R984)
//Pop
@POP_R985
D=A
@R14
M=D
//L
@5
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R985)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-186
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-186)
//Pop
@POP_R986
D=A
@R14
M=D
//L
@9
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R986)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R987
D=A
@SUB
0;JMP
(SUB_R987)
@RETURN-187
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-187)
//Pop
@POP_R988
D=A
@R14
M=D
//L
@10
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R988)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN989
D=A
@R13
M=D
(call_Screen.drawConditional)
@Screen.drawConditional
D=A
@R14
M=D
@3
D=A
@CALL
0;JMP
(RETURN989)
//Pop
@POP_R990
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R990)
(Screen.drawLineWHILE_EXP0)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@8
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n991
D=A
@LT
0;JMP
(n991)
//NOT
@SP
A=M-1
M=!M
//if
@IF992
D=A
@IF
0;JMP
(IF992)
@Screen.drawLineWHILE_END0
D;JNE
//Push L
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n993
D=A
@LT
0;JMP
(n993)
//if
@IF994
D=A
@IF
0;JMP
(IF994)
@Screen.drawLineIF_TRUE3
D;JNE
//goto
@Screen.drawLineIF_FALSE3
0;JMP
(Screen.drawLineIF_TRUE3)
//Push L
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@9
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R995
D=A
@ADD
0;JMP
(ADD_R995)
//Pop
@POP_R996
D=A
@R14
M=D
//L
@5
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R996)
//goto
@Screen.drawLineIF_END3
0;JMP
(Screen.drawLineIF_FALSE3)
//Push L
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@10
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R997
D=A
@ADD
0;JMP
(ADD_R997)
//Pop
@POP_R998
D=A
@R14
M=D
//L
@5
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R998)
//Push L
@7
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF999
D=A
@IF
0;JMP
(IF999)
@Screen.drawLineIF_TRUE4
D;JNE
//goto
@Screen.drawLineIF_FALSE4
0;JMP
(Screen.drawLineIF_TRUE4)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1000
D=A
@SUB
0;JMP
(SUB_R1000)
//Pop
@POP_R1001
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1001)
//goto
@Screen.drawLineIF_END4
0;JMP
(Screen.drawLineIF_FALSE4)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1002
D=A
@ADD
0;JMP
(ADD_R1002)
//Pop
@POP_R1003
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1003)
(Screen.drawLineIF_END4)
(Screen.drawLineIF_END3)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1004
D=A
@ADD
0;JMP
(ADD_R1004)
//Pop
@POP_R1005
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1005)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-188
D=A
@R13
M=D
@call_Screen.drawConditional
0;JMP
(RETURN-188)
//Pop
@POP_R1006
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1006)
//goto
@Screen.drawLineWHILE_EXP0
0;JMP
(Screen.drawLineWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.drawRectangle)
@9
D=A
@R14
M=D
@F1007
D;JEQ
D=A
@FUNCT
0;JMP
(F1007)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n1008
D=A
@GT
0;JMP
(n1008)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n1009
D=A
@GT
0;JMP
(n1009)
//OR
@OR_R1010
D=A
@OR
0;JMP
(OR_R1010)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1011
D=A
@LT
0;JMP
(n1011)
//OR
@OR_R1012
D=A
@OR
0;JMP
(OR_R1012)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@511
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n1013
D=A
@GT
0;JMP
(n1013)
//OR
@OR_R1014
D=A
@OR
0;JMP
(OR_R1014)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1015
D=A
@LT
0;JMP
(n1015)
//OR
@OR_R1016
D=A
@OR
0;JMP
(OR_R1016)
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@255
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n1017
D=A
@GT
0;JMP
(n1017)
//OR
@OR_R1018
D=A
@OR
0;JMP
(OR_R1018)
//if
@IF1019
D=A
@IF
0;JMP
(IF1019)
@Screen.drawRectangleIF_TRUE0
D;JNE
//goto
@Screen.drawRectangleIF_FALSE0
0;JMP
(Screen.drawRectangleIF_TRUE0)
//Push C
@9
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-189
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-189)
//Pop
@POP_R1020
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1020)
(Screen.drawRectangleIF_FALSE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-190
D=A
@R13
M=D
@call_Math.divide
0;JMP
(RETURN-190)
//Pop
@POP_R1021
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1021)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-191
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-191)
//SUB
@SUB_R1022
D=A
@SUB
0;JMP
(SUB_R1022)
//Pop
@POP_R1023
D=A
@R14
M=D
//L
@7
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1023)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-192
D=A
@R13
M=D
@call_Math.divide
0;JMP
(RETURN-192)
//Pop
@POP_R1024
D=A
@R14
M=D
//L
@4
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1024)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-193
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-193)
//SUB
@SUB_R1025
D=A
@SUB
0;JMP
(SUB_R1025)
//Pop
@POP_R1026
D=A
@R14
M=D
//L
@8
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1026)
//Push L
@7
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1027
D=A
@ADD
0;JMP
(ADD_R1027)
//Pop point
@POP_R1028
D=A
@THT
0;JMP
(POP_R1028)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1029
D=A
@SUB
0;JMP
(SUB_R1029)
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R1030
D=A
@R14
M=D
//L
@6
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1030)
//Push L
@8
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1031
D=A
@ADD
0;JMP
(ADD_R1031)
//Push S
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1032
D=A
@ADD
0;JMP
(ADD_R1032)
//Pop point
@POP_R1033
D=A
@THT
0;JMP
(POP_R1033)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1034
D=A
@SUB
0;JMP
(SUB_R1034)
//Pop
@POP_R1035
D=A
@R14
M=D
//L
@5
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1035)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-194
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-194)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1036
D=A
@ADD
0;JMP
(ADD_R1036)
//Pop
@POP_R1037
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1037)
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1038
D=A
@SUB
0;JMP
(SUB_R1038)
//Pop
@POP_R1039
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1039)
(Screen.drawRectangleWHILE_EXP0)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n1040
D=A
@GT
0;JMP
(n1040)
//NOT
@SP
A=M-1
M=!M
//NOT
@SP
A=M-1
M=!M
//if
@IF1041
D=A
@IF
0;JMP
(IF1041)
@Screen.drawRectangleWHILE_END0
D;JNE
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1042
D=A
@ADD
0;JMP
(ADD_R1042)
//Pop
@POP_R1043
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1043)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n1044
D=A
@EQ
0;JMP
(n1044)
//if
@IF1045
D=A
@IF
0;JMP
(IF1045)
@Screen.drawRectangleIF_TRUE1
D;JNE
//goto
@Screen.drawRectangleIF_FALSE1
0;JMP
(Screen.drawRectangleIF_TRUE1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//AND
@AND_R1046
D=A
@AND
0;JMP
(AND_R1046)
@RETURN-195
D=A
@R13
M=D
@call_Screen.updateLocation
0;JMP
(RETURN-195)
//Pop
@POP_R1047
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1047)
//goto
@Screen.drawRectangleIF_END1
0;JMP
(Screen.drawRectangleIF_FALSE1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-196
D=A
@R13
M=D
@call_Screen.updateLocation
0;JMP
(RETURN-196)
//Pop
@POP_R1048
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1048)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1049
D=A
@ADD
0;JMP
(ADD_R1049)
//Pop
@POP_R1050
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1050)
(Screen.drawRectangleWHILE_EXP1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n1051
D=A
@LT
0;JMP
(n1051)
//NOT
@SP
A=M-1
M=!M
//if
@IF1052
D=A
@IF
0;JMP
(IF1052)
@Screen.drawRectangleWHILE_END1
D;JNE
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
@RETURN-197
D=A
@R13
M=D
@call_Screen.updateLocation
0;JMP
(RETURN-197)
//Pop
@POP_R1053
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1053)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1054
D=A
@ADD
0;JMP
(ADD_R1054)
//Pop
@POP_R1055
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1055)
//goto
@Screen.drawRectangleWHILE_EXP1
0;JMP
(Screen.drawRectangleWHILE_END1)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-198
D=A
@R13
M=D
@call_Screen.updateLocation
0;JMP
(RETURN-198)
//Pop
@POP_R1056
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1056)
(Screen.drawRectangleIF_END1)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1057
D=A
@ADD
0;JMP
(ADD_R1057)
//Pop
@POP_R1058
D=A
@R14
M=D
//A
@1
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R1058)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1059
D=A
@ADD
0;JMP
(ADD_R1059)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1060
D=A
@SUB
0;JMP
(SUB_R1060)
//Pop
@POP_R1061
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1061)
//goto
@Screen.drawRectangleWHILE_EXP0
0;JMP
(Screen.drawRectangleWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.drawHorizontal)
@11
D=A
@R14
M=D
@F1062
D;JEQ
D=A
@FUNCT
0;JMP
(F1062)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN1063
D=A
@R13
M=D
(call_Math.min)
@Math.min
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN1063)
//Pop
@POP_R1064
D=A
@R14
M=D
//L
@7
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1064)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN1065
D=A
@R13
M=D
(call_Math.max)
@Math.max
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN1065)
//Pop
@POP_R1066
D=A
@R14
M=D
//L
@8
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1066)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//GT
@n1067
D=A
@GT
0;JMP
(n1067)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@256
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1068
D=A
@LT
0;JMP
(n1068)
//AND
@AND_R1069
D=A
@AND
0;JMP
(AND_R1069)
//Push L
@7
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@512
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1070
D=A
@LT
0;JMP
(n1070)
//AND
@AND_R1071
D=A
@AND
0;JMP
(AND_R1071)
//Push L
@8
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//GT
@n1072
D=A
@GT
0;JMP
(n1072)
//AND
@AND_R1073
D=A
@AND
0;JMP
(AND_R1073)
//if
@IF1074
D=A
@IF
0;JMP
(IF1074)
@Screen.drawHorizontalIF_TRUE0
D;JNE
//goto
@Screen.drawHorizontalIF_FALSE0
0;JMP
(Screen.drawHorizontalIF_TRUE0)
//Push L
@7
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-199
D=A
@R13
M=D
@call_Math.max
0;JMP
(RETURN-199)
//Pop
@POP_R1075
D=A
@R14
M=D
//L
@7
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1075)
//Push L
@8
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@511
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-200
D=A
@R13
M=D
@call_Math.min
0;JMP
(RETURN-200)
//Pop
@POP_R1076
D=A
@R14
M=D
//L
@8
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1076)
//Push L
@7
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-201
D=A
@R13
M=D
@call_Math.divide
0;JMP
(RETURN-201)
//Pop
@POP_R1077
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1077)
//Push L
@7
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-202
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-202)
//SUB
@SUB_R1078
D=A
@SUB
0;JMP
(SUB_R1078)
//Pop
@POP_R1079
D=A
@R14
M=D
//L
@9
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1079)
//Push L
@8
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-203
D=A
@R13
M=D
@call_Math.divide
0;JMP
(RETURN-203)
//Pop
@POP_R1080
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1080)
//Push L
@8
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-204
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-204)
//SUB
@SUB_R1081
D=A
@SUB
0;JMP
(SUB_R1081)
//Pop
@POP_R1082
D=A
@R14
M=D
//L
@10
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1082)
//Push L
@9
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1083
D=A
@ADD
0;JMP
(ADD_R1083)
//Pop point
@POP_R1084
D=A
@THT
0;JMP
(POP_R1084)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1085
D=A
@SUB
0;JMP
(SUB_R1085)
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R1086
D=A
@R14
M=D
//L
@5
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1086)
//Push L
@10
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1087
D=A
@ADD
0;JMP
(ADD_R1087)
//Push S
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1088
D=A
@ADD
0;JMP
(ADD_R1088)
//Pop point
@POP_R1089
D=A
@THT
0;JMP
(POP_R1089)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1090
D=A
@SUB
0;JMP
(SUB_R1090)
//Pop
@POP_R1091
D=A
@R14
M=D
//L
@4
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1091)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-205
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-205)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1092
D=A
@ADD
0;JMP
(ADD_R1092)
//Pop
@POP_R1093
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1093)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1094
D=A
@SUB
0;JMP
(SUB_R1094)
//Pop
@POP_R1095
D=A
@R14
M=D
//L
@6
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1095)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1096
D=A
@ADD
0;JMP
(ADD_R1096)
//Pop
@POP_R1097
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1097)
//Push L
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n1098
D=A
@EQ
0;JMP
(n1098)
//if
@IF1099
D=A
@IF
0;JMP
(IF1099)
@Screen.drawHorizontalIF_TRUE1
D;JNE
//goto
@Screen.drawHorizontalIF_FALSE1
0;JMP
(Screen.drawHorizontalIF_TRUE1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//AND
@AND_R1100
D=A
@AND
0;JMP
(AND_R1100)
@RETURN-206
D=A
@R13
M=D
@call_Screen.updateLocation
0;JMP
(RETURN-206)
//Pop
@POP_R1101
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1101)
//goto
@Screen.drawHorizontalIF_END1
0;JMP
(Screen.drawHorizontalIF_FALSE1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-207
D=A
@R13
M=D
@call_Screen.updateLocation
0;JMP
(RETURN-207)
//Pop
@POP_R1102
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1102)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1103
D=A
@ADD
0;JMP
(ADD_R1103)
//Pop
@POP_R1104
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1104)
(Screen.drawHorizontalWHILE_EXP0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n1105
D=A
@LT
0;JMP
(n1105)
//NOT
@SP
A=M-1
M=!M
//if
@IF1106
D=A
@IF
0;JMP
(IF1106)
@Screen.drawHorizontalWHILE_END0
D;JNE
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
@RETURN-208
D=A
@R13
M=D
@call_Screen.updateLocation
0;JMP
(RETURN-208)
//Pop
@POP_R1107
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1107)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1108
D=A
@ADD
0;JMP
(ADD_R1108)
//Pop
@POP_R1109
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1109)
//goto
@Screen.drawHorizontalWHILE_EXP0
0;JMP
(Screen.drawHorizontalWHILE_END0)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-209
D=A
@R13
M=D
@call_Screen.updateLocation
0;JMP
(RETURN-209)
//Pop
@POP_R1110
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1110)
(Screen.drawHorizontalIF_END1)
(Screen.drawHorizontalIF_FALSE0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.drawSymetric)
@0
D=A
@R14
M=D
@F1111
D;JEQ
D=A
@FUNCT
0;JMP
(F1111)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1112
D=A
@SUB
0;JMP
(SUB_R1112)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1113
D=A
@ADD
0;JMP
(ADD_R1113)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1114
D=A
@SUB
0;JMP
(SUB_R1114)
//call
@RETURN1115
D=A
@R13
M=D
(call_Screen.drawHorizontal)
@Screen.drawHorizontal
D=A
@R14
M=D
@3
D=A
@CALL
0;JMP
(RETURN1115)
//Pop
@POP_R1116
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1116)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1117
D=A
@ADD
0;JMP
(ADD_R1117)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1118
D=A
@ADD
0;JMP
(ADD_R1118)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1119
D=A
@SUB
0;JMP
(SUB_R1119)
@RETURN-210
D=A
@R13
M=D
@call_Screen.drawHorizontal
0;JMP
(RETURN-210)
//Pop
@POP_R1120
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1120)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1121
D=A
@SUB
0;JMP
(SUB_R1121)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1122
D=A
@SUB
0;JMP
(SUB_R1122)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1123
D=A
@ADD
0;JMP
(ADD_R1123)
@RETURN-211
D=A
@R13
M=D
@call_Screen.drawHorizontal
0;JMP
(RETURN-211)
//Pop
@POP_R1124
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1124)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1125
D=A
@ADD
0;JMP
(ADD_R1125)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1126
D=A
@SUB
0;JMP
(SUB_R1126)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1127
D=A
@ADD
0;JMP
(ADD_R1127)
@RETURN-212
D=A
@R13
M=D
@call_Screen.drawHorizontal
0;JMP
(RETURN-212)
//Pop
@POP_R1128
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1128)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.drawCircle)
@3
D=A
@R14
M=D
@F1129
D;JEQ
D=A
@FUNCT
0;JMP
(F1129)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1130
D=A
@LT
0;JMP
(n1130)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@511
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n1131
D=A
@GT
0;JMP
(n1131)
//OR
@OR_R1132
D=A
@OR
0;JMP
(OR_R1132)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1133
D=A
@LT
0;JMP
(n1133)
//OR
@OR_R1134
D=A
@OR
0;JMP
(OR_R1134)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@255
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n1135
D=A
@GT
0;JMP
(n1135)
//OR
@OR_R1136
D=A
@OR
0;JMP
(OR_R1136)
//if
@IF1137
D=A
@IF
0;JMP
(IF1137)
@Screen.drawCircleIF_TRUE0
D;JNE
//goto
@Screen.drawCircleIF_FALSE0
0;JMP
(Screen.drawCircleIF_TRUE0)
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-213
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-213)
//Pop
@POP_R1138
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1138)
(Screen.drawCircleIF_FALSE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1139
D=A
@SUB
0;JMP
(SUB_R1139)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1140
D=A
@LT
0;JMP
(n1140)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1141
D=A
@ADD
0;JMP
(ADD_R1141)
//Push C
@511
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n1142
D=A
@GT
0;JMP
(n1142)
//OR
@OR_R1143
D=A
@OR
0;JMP
(OR_R1143)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1144
D=A
@SUB
0;JMP
(SUB_R1144)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1145
D=A
@LT
0;JMP
(n1145)
//OR
@OR_R1146
D=A
@OR
0;JMP
(OR_R1146)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1147
D=A
@ADD
0;JMP
(ADD_R1147)
//Push C
@255
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n1148
D=A
@GT
0;JMP
(n1148)
//OR
@OR_R1149
D=A
@OR
0;JMP
(OR_R1149)
//if
@IF1150
D=A
@IF
0;JMP
(IF1150)
@Screen.drawCircleIF_TRUE1
D;JNE
//goto
@Screen.drawCircleIF_FALSE1
0;JMP
(Screen.drawCircleIF_TRUE1)
//Push C
@13
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-214
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-214)
//Pop
@POP_R1151
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1151)
(Screen.drawCircleIF_FALSE1)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1152
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1152)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1153
D=A
@SUB
0;JMP
(SUB_R1153)
//Pop
@POP_R1154
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1154)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN1155
D=A
@R13
M=D
(call_Screen.drawSymetric)
@Screen.drawSymetric
D=A
@R14
M=D
@4
D=A
@CALL
0;JMP
(RETURN1155)
//Pop
@POP_R1156
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1156)
(Screen.drawCircleWHILE_EXP0)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n1157
D=A
@GT
0;JMP
(n1157)
//NOT
@SP
A=M-1
M=!M
//if
@IF1158
D=A
@IF
0;JMP
(IF1158)
@Screen.drawCircleWHILE_END0
D;JNE
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1159
D=A
@LT
0;JMP
(n1159)
//if
@IF1160
D=A
@IF
0;JMP
(IF1160)
@Screen.drawCircleIF_TRUE2
D;JNE
//goto
@Screen.drawCircleIF_FALSE2
0;JMP
(Screen.drawCircleIF_TRUE2)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-215
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-215)
//ADD
@ADD_R1161
D=A
@ADD
0;JMP
(ADD_R1161)
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1162
D=A
@ADD
0;JMP
(ADD_R1162)
//Pop
@POP_R1163
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1163)
//goto
@Screen.drawCircleIF_END2
0;JMP
(Screen.drawCircleIF_FALSE2)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1164
D=A
@SUB
0;JMP
(SUB_R1164)
@RETURN-216
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-216)
//ADD
@ADD_R1165
D=A
@ADD
0;JMP
(ADD_R1165)
//Push C
@5
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1166
D=A
@ADD
0;JMP
(ADD_R1166)
//Pop
@POP_R1167
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1167)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1168
D=A
@SUB
0;JMP
(SUB_R1168)
//Pop
@POP_R1169
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1169)
(Screen.drawCircleIF_END2)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1170
D=A
@ADD
0;JMP
(ADD_R1170)
//Pop
@POP_R1171
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1171)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-217
D=A
@R13
M=D
@call_Screen.drawSymetric
0;JMP
(RETURN-217)
//Pop
@POP_R1172
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1172)
//goto
@Screen.drawCircleWHILE_EXP0
0;JMP
(Screen.drawCircleWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Memory.init)
@0
D=A
@R14
M=D
@F1173
D;JEQ
D=A
@FUNCT
0;JMP
(F1173)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1174
D=A
@R14
M=D
//S
@Memory.0
D=A
@POP
0;JMP
(POP_R1174)
//Push C
@2048
D=A
@SP
M=M+1
A=M-1
M=D
//Push S
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1175
D=A
@ADD
0;JMP
(ADD_R1175)
//Push C
@14334
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1176
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1176)
//Pop point
@POP_R1177
D=A
@THT
0;JMP
(POP_R1177)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1178
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1178)
//Push C
@2049
D=A
@SP
M=M+1
A=M-1
M=D
//Push S
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1179
D=A
@ADD
0;JMP
(ADD_R1179)
//Push C
@2050
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1180
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1180)
//Pop point
@POP_R1181
D=A
@THT
0;JMP
(POP_R1181)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1182
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1182)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Memory.peek)
@0
D=A
@R14
M=D
@F1183
D;JEQ
D=A
@FUNCT
0;JMP
(F1183)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1184
D=A
@ADD
0;JMP
(ADD_R1184)
//Pop point
@POP_R1185
D=A
@THT
0;JMP
(POP_R1185)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Memory.poke)
@0
D=A
@R14
M=D
@F1186
D;JEQ
D=A
@FUNCT
0;JMP
(F1186)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1187
D=A
@ADD
0;JMP
(ADD_R1187)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1188
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1188)
//Pop point
@POP_R1189
D=A
@THT
0;JMP
(POP_R1189)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1190
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1190)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Memory.alloc)
@1
D=A
@R14
M=D
@F1191
D;JEQ
D=A
@FUNCT
0;JMP
(F1191)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1192
D=A
@LT
0;JMP
(n1192)
//if
@IF1193
D=A
@IF
0;JMP
(IF1193)
@Memory.allocIF_TRUE0
D;JNE
//goto
@Memory.allocIF_FALSE0
0;JMP
(Memory.allocIF_TRUE0)
//Push C
@5
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-218
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-218)
//Pop
@POP_R1194
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1194)
(Memory.allocIF_FALSE0)
//Push C
@2048
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1195
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1195)
(Memory.allocWHILE_EXP0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1196
D=A
@ADD
0;JMP
(ADD_R1196)
//Pop point
@POP_R1197
D=A
@THT
0;JMP
(POP_R1197)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n1198
D=A
@LT
0;JMP
(n1198)
//NOT
@SP
A=M-1
M=!M
//if
@IF1199
D=A
@IF
0;JMP
(IF1199)
@Memory.allocWHILE_END0
D;JNE
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1200
D=A
@ADD
0;JMP
(ADD_R1200)
//Pop point
@POP_R1201
D=A
@THT
0;JMP
(POP_R1201)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1202
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1202)
//goto
@Memory.allocWHILE_EXP0
0;JMP
(Memory.allocWHILE_END0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1203
D=A
@ADD
0;JMP
(ADD_R1203)
//Push C
@16379
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n1204
D=A
@GT
0;JMP
(n1204)
//if
@IF1205
D=A
@IF
0;JMP
(IF1205)
@Memory.allocIF_TRUE1
D;JNE
//goto
@Memory.allocIF_FALSE1
0;JMP
(Memory.allocIF_TRUE1)
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-219
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-219)
//Pop
@POP_R1206
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1206)
(Memory.allocIF_FALSE1)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1207
D=A
@ADD
0;JMP
(ADD_R1207)
//Pop point
@POP_R1208
D=A
@THT
0;JMP
(POP_R1208)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1209
D=A
@ADD
0;JMP
(ADD_R1209)
//GT
@n1210
D=A
@GT
0;JMP
(n1210)
//if
@IF1211
D=A
@IF
0;JMP
(IF1211)
@Memory.allocIF_TRUE2
D;JNE
//goto
@Memory.allocIF_FALSE2
0;JMP
(Memory.allocIF_TRUE2)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1212
D=A
@ADD
0;JMP
(ADD_R1212)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1213
D=A
@ADD
0;JMP
(ADD_R1213)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1214
D=A
@ADD
0;JMP
(ADD_R1214)
//Pop point
@POP_R1215
D=A
@THT
0;JMP
(POP_R1215)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1216
D=A
@SUB
0;JMP
(SUB_R1216)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1217
D=A
@SUB
0;JMP
(SUB_R1217)
//Pop
@POP_R1218
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1218)
//Pop point
@POP_R1219
D=A
@THT
0;JMP
(POP_R1219)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1220
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1220)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1221
D=A
@ADD
0;JMP
(ADD_R1221)
//Pop point
@POP_R1222
D=A
@THT
0;JMP
(POP_R1222)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1223
D=A
@ADD
0;JMP
(ADD_R1223)
//EQ
@n1224
D=A
@EQ
0;JMP
(n1224)
//if
@IF1225
D=A
@IF
0;JMP
(IF1225)
@Memory.allocIF_TRUE3
D;JNE
//goto
@Memory.allocIF_FALSE3
0;JMP
(Memory.allocIF_TRUE3)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1226
D=A
@ADD
0;JMP
(ADD_R1226)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1227
D=A
@ADD
0;JMP
(ADD_R1227)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1228
D=A
@ADD
0;JMP
(ADD_R1228)
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1229
D=A
@ADD
0;JMP
(ADD_R1229)
//Pop
@POP_R1230
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1230)
//Pop point
@POP_R1231
D=A
@THT
0;JMP
(POP_R1231)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1232
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1232)
//goto
@Memory.allocIF_END3
0;JMP
(Memory.allocIF_FALSE3)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1233
D=A
@ADD
0;JMP
(ADD_R1233)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1234
D=A
@ADD
0;JMP
(ADD_R1234)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1235
D=A
@ADD
0;JMP
(ADD_R1235)
//Pop point
@POP_R1236
D=A
@THT
0;JMP
(POP_R1236)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1237
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1237)
//Pop point
@POP_R1238
D=A
@THT
0;JMP
(POP_R1238)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1239
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1239)
(Memory.allocIF_END3)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1240
D=A
@ADD
0;JMP
(ADD_R1240)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1241
D=A
@ADD
0;JMP
(ADD_R1241)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1242
D=A
@ADD
0;JMP
(ADD_R1242)
//Pop
@POP_R1243
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1243)
//Pop point
@POP_R1244
D=A
@THT
0;JMP
(POP_R1244)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1245
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1245)
(Memory.allocIF_FALSE2)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1246
D=A
@ADD
0;JMP
(ADD_R1246)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1247
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1247)
//Pop point
@POP_R1248
D=A
@THT
0;JMP
(POP_R1248)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1249
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1249)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1250
D=A
@ADD
0;JMP
(ADD_R1250)
@RETURNS
0;JMP
//funct
(Memory.deAlloc)
@2
D=A
@R14
M=D
@F1251
D;JEQ
D=A
@FUNCT
0;JMP
(F1251)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1252
D=A
@SUB
0;JMP
(SUB_R1252)
//Pop
@POP_R1253
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1253)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1254
D=A
@ADD
0;JMP
(ADD_R1254)
//Pop point
@POP_R1255
D=A
@THT
0;JMP
(POP_R1255)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1256
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1256)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1257
D=A
@ADD
0;JMP
(ADD_R1257)
//Pop point
@POP_R1258
D=A
@THT
0;JMP
(POP_R1258)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n1259
D=A
@EQ
0;JMP
(n1259)
//if
@IF1260
D=A
@IF
0;JMP
(IF1260)
@Memory.deAllocIF_TRUE0
D;JNE
//goto
@Memory.deAllocIF_FALSE0
0;JMP
(Memory.deAllocIF_TRUE0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1261
D=A
@ADD
0;JMP
(ADD_R1261)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1262
D=A
@ADD
0;JMP
(ADD_R1262)
//Pop point
@POP_R1263
D=A
@THT
0;JMP
(POP_R1263)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1264
D=A
@SUB
0;JMP
(SUB_R1264)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1265
D=A
@SUB
0;JMP
(SUB_R1265)
//Pop
@POP_R1266
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1266)
//Pop point
@POP_R1267
D=A
@THT
0;JMP
(POP_R1267)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1268
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1268)
//goto
@Memory.deAllocIF_END0
0;JMP
(Memory.deAllocIF_FALSE0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1269
D=A
@ADD
0;JMP
(ADD_R1269)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1270
D=A
@ADD
0;JMP
(ADD_R1270)
//Pop point
@POP_R1271
D=A
@THT
0;JMP
(POP_R1271)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1272
D=A
@SUB
0;JMP
(SUB_R1272)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1273
D=A
@ADD
0;JMP
(ADD_R1273)
//Pop point
@POP_R1274
D=A
@THT
0;JMP
(POP_R1274)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1275
D=A
@ADD
0;JMP
(ADD_R1275)
//Pop
@POP_R1276
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1276)
//Pop point
@POP_R1277
D=A
@THT
0;JMP
(POP_R1277)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1278
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1278)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1279
D=A
@ADD
0;JMP
(ADD_R1279)
//Pop point
@POP_R1280
D=A
@THT
0;JMP
(POP_R1280)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1281
D=A
@ADD
0;JMP
(ADD_R1281)
//EQ
@n1282
D=A
@EQ
0;JMP
(n1282)
//if
@IF1283
D=A
@IF
0;JMP
(IF1283)
@Memory.deAllocIF_TRUE1
D;JNE
//goto
@Memory.deAllocIF_FALSE1
0;JMP
(Memory.deAllocIF_TRUE1)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1284
D=A
@ADD
0;JMP
(ADD_R1284)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1285
D=A
@ADD
0;JMP
(ADD_R1285)
//Pop
@POP_R1286
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1286)
//Pop point
@POP_R1287
D=A
@THT
0;JMP
(POP_R1287)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1288
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1288)
//goto
@Memory.deAllocIF_END1
0;JMP
(Memory.deAllocIF_FALSE1)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1289
D=A
@ADD
0;JMP
(ADD_R1289)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1290
D=A
@ADD
0;JMP
(ADD_R1290)
//Pop point
@POP_R1291
D=A
@THT
0;JMP
(POP_R1291)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1292
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1292)
//Pop point
@POP_R1293
D=A
@THT
0;JMP
(POP_R1293)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1294
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1294)
(Memory.deAllocIF_END1)
(Memory.deAllocIF_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
