@256
D=A
@SP
M=D
@Sys.init
0;JMP
(CALL)
@R15
M=D
@R13
D=M
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@5
D=A
@R15
D=D+M
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@R14
A=M
0;JMP
(RETURNS)
@LCL
D=M
@R13
M=D
@5
D=A
@R13
A=M-D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A
@SP
M=D+1
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@1
D=A
@R13
A=M-D
D=M
@THAT
M=D
@R14
A=M
0;JMP
(ADD)
@R13
M=D
@SP
A=M-1
D=M
M=0
@SP
M=M-1
A=M-1
M=M+D
@R13
A=M
0;JMP
(SUB)
@R13
M=D
@SP
A=M-1
D=M
M=0
@SP
M=M-1
A=M-1
M=M-D
@R13
A=M
0;JMP
(AND)
@R13
M=D
@SP
A=M-1
D=M
M=0
@SP
M=M-1
A=M-1
M=M&D
@R13
A=M
0;JMP
(OR)
@R13
M=D
@SP
A=M-1
D=M
M=0
@SP
M=M-1
A=M-1
M=M|D
@R13
A=M
0;JMP
(EQ)
@R13
M=D
@SP
A=M-1
D=M
M=0
@SP
M=M-1
A=M-1
D=M-D
M=-1
@FALSE
D;JNE
@R13
A=M
0;JMP
(GT)
@R13
M=D
@SP
A=M-1
D=M
M=0
@SP
M=M-1
A=M-1
D=M-D
M=-1
@FALSE
D;JLE
@R13
A=M
0;JMP
(LT)
@R13
M=D
@SP
A=M-1
D=M
M=0
@SP
M=M-1
A=M-1
D=M-D
M=-1
@FALSE
D;JGE
@R13
A=M
0;JMP
(FALSE)
@SP
A=M-1
M=0
@R13
A=M
0;JMP
(FUNCT)
@R13
M=D
@R14
D=M
(F_LOOP)
@SP
M=M+1
A=M-1
M=0
D=D-1
@F_LOOP
D;JGT
@R13
A=M
0;JMP
(IF)
@R13
M=D
@SP
A=M-1
D=M
M=0
@SP
M=M-1
@R13
A=M
0;JMP
(POP)
@R13
M=D
@SP
AM=M-1
D=M
M=0
@R13
A=M
M=D
@R14
A=M
0;JMP
(THS)
@R14
M=D
@THIS
D=A
@POP
0;JMP
(THT)
@R14
M=D
@THAT
D=A
@POP
0;JMP
//funct
(Ball.new)
@0
D=A
@R14
M=D
@F0
D;JEQ
D=A
@FUNCT
0;JMP
(F0)
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN1
D=A
@R13
M=D
(call_Memory.alloc)
@Memory.alloc
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN1)
//Pop point
@POP_R2
D=A
@THS
0;JMP
(POP_R2)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R3
D=A
@R14
M=D
//THS
@0
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R3)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R4
D=A
@R14
M=D
//THS
@1
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R4)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R5
D=A
@R14
M=D
//THS
@10
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R5)
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R6
D=A
@SUB
0;JMP
(SUB_R6)
//Pop
@POP_R7
D=A
@R14
M=D
//THS
@11
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R7)
//Push A
@4
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R8
D=A
@R14
M=D
//THS
@12
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R8)
//Push A
@5
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R9
D=A
@SUB
0;JMP
(SUB_R9)
//Pop
@POP_R10
D=A
@R14
M=D
//THS
@13
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R10)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R11
D=A
@R14
M=D
//THS
@14
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R11)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN12
D=A
@R13
M=D
(call_Ball.show)
@Ball.show
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN12)
//Pop
@POP_R13
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R13)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Ball.dispose)
@0
D=A
@R14
M=D
@F14
D;JEQ
D=A
@FUNCT
0;JMP
(F14)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R15
D=A
@THS
0;JMP
(POP_R15)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN16
D=A
@R13
M=D
(call_Memory.deAlloc)
@Memory.deAlloc
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN16)
//Pop
@POP_R17
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R17)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Ball.show)
@0
D=A
@R14
M=D
@F18
D;JEQ
D=A
@FUNCT
0;JMP
(F18)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R19
D=A
@THS
0;JMP
(POP_R19)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//call
@RETURN20
D=A
@R13
M=D
(call_Screen.setColor)
@Screen.setColor
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN20)
//Pop
@POP_R21
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R21)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN22
D=A
@R13
M=D
(call_Ball.draw)
@Ball.draw
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN22)
//Pop
@POP_R23
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R23)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Ball.hide)
@0
D=A
@R14
M=D
@F24
D;JEQ
D=A
@FUNCT
0;JMP
(F24)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R25
D=A
@THS
0;JMP
(POP_R25)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-1
D=A
@R13
M=D
@call_Screen.setColor
0;JMP
(RETURN-1)
//Pop
@POP_R26
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R26)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-2
D=A
@R13
M=D
@call_Ball.draw
0;JMP
(RETURN-2)
//Pop
@POP_R27
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R27)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Ball.draw)
@0
D=A
@R14
M=D
@F28
D;JEQ
D=A
@FUNCT
0;JMP
(F28)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R29
D=A
@THS
0;JMP
(POP_R29)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@5
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R30
D=A
@ADD
0;JMP
(ADD_R30)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@5
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R31
D=A
@ADD
0;JMP
(ADD_R31)
//call
@RETURN32
D=A
@R13
M=D
(call_Screen.drawRectangle)
@Screen.drawRectangle
D=A
@R14
M=D
@4
D=A
@CALL
0;JMP
(RETURN32)
//Pop
@POP_R33
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R33)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Ball.getLeft)
@0
D=A
@R14
M=D
@F34
D;JEQ
D=A
@FUNCT
0;JMP
(F34)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R35
D=A
@THS
0;JMP
(POP_R35)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Ball.getRight)
@0
D=A
@R14
M=D
@F36
D;JEQ
D=A
@FUNCT
0;JMP
(F36)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R37
D=A
@THS
0;JMP
(POP_R37)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@5
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R38
D=A
@ADD
0;JMP
(ADD_R38)
@RETURNS
0;JMP
//funct
(Ball.setDestination)
@3
D=A
@R14
M=D
@F39
D;JEQ
D=A
@FUNCT
0;JMP
(F39)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R40
D=A
@THS
0;JMP
(POP_R40)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R41
D=A
@SUB
0;JMP
(SUB_R41)
//Pop
@POP_R42
D=A
@R14
M=D
//THS
@2
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R42)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R43
D=A
@SUB
0;JMP
(SUB_R43)
//Pop
@POP_R44
D=A
@R14
M=D
//THS
@3
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R44)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN45
D=A
@R13
M=D
(call_Math.abs)
@Math.abs
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN45)
//Pop
@POP_R46
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R46)
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-3
D=A
@R13
M=D
@call_Math.abs
0;JMP
(RETURN-3)
//Pop
@POP_R47
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R47)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n48
D=A
@LT
0;JMP
(n48)
//Pop
@POP_R49
D=A
@R14
M=D
//THS
@7
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R49)
//Push THS
@7
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF50
D=A
@IF
0;JMP
(IF50)
@Ball.setDestinationIF_TRUE0
D;JNE
//goto
@Ball.setDestinationIF_FALSE0
0;JMP
(Ball.setDestinationIF_TRUE0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R51
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R51)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R52
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R52)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R53
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R53)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n54
D=A
@LT
0;JMP
(n54)
//Pop
@POP_R55
D=A
@R14
M=D
//THS
@8
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R55)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n56
D=A
@LT
0;JMP
(n56)
//Pop
@POP_R57
D=A
@R14
M=D
//THS
@9
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R57)
//goto
@Ball.setDestinationIF_END0
0;JMP
(Ball.setDestinationIF_FALSE0)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n58
D=A
@LT
0;JMP
(n58)
//Pop
@POP_R59
D=A
@R14
M=D
//THS
@8
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R59)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n60
D=A
@LT
0;JMP
(n60)
//Pop
@POP_R61
D=A
@R14
M=D
//THS
@9
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R61)
(Ball.setDestinationIF_END0)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN62
D=A
@R13
M=D
(call_Math.multiply)
@Math.multiply
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN62)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R63
D=A
@SUB
0;JMP
(SUB_R63)
//Pop
@POP_R64
D=A
@R14
M=D
//THS
@4
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R64)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-4
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-4)
//Pop
@POP_R65
D=A
@R14
M=D
//THS
@5
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R65)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R66
D=A
@SUB
0;JMP
(SUB_R66)
@RETURN-5
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-5)
//Pop
@POP_R67
D=A
@R14
M=D
//THS
@6
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R67)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Ball.move)
@0
D=A
@R14
M=D
@F68
D;JEQ
D=A
@FUNCT
0;JMP
(F68)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R69
D=A
@THS
0;JMP
(POP_R69)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN70
D=A
@R13
M=D
(call_Ball.hide)
@Ball.hide
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN70)
//Pop
@POP_R71
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R71)
//Push THS
@4
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n72
D=A
@LT
0;JMP
(n72)
//if
@IF73
D=A
@IF
0;JMP
(IF73)
@Ball.moveIF_TRUE0
D;JNE
//goto
@Ball.moveIF_FALSE0
0;JMP
(Ball.moveIF_TRUE0)
//Push THS
@4
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@5
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R74
D=A
@ADD
0;JMP
(ADD_R74)
//Pop
@POP_R75
D=A
@R14
M=D
//THS
@4
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R75)
//goto
@Ball.moveIF_END0
0;JMP
(Ball.moveIF_FALSE0)
//Push THS
@4
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@6
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R76
D=A
@ADD
0;JMP
(ADD_R76)
//Pop
@POP_R77
D=A
@R14
M=D
//THS
@4
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R77)
//Push THS
@9
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF78
D=A
@IF
0;JMP
(IF78)
@Ball.moveIF_TRUE1
D;JNE
//goto
@Ball.moveIF_FALSE1
0;JMP
(Ball.moveIF_TRUE1)
//Push THS
@7
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF79
D=A
@IF
0;JMP
(IF79)
@Ball.moveIF_TRUE2
D;JNE
//goto
@Ball.moveIF_FALSE2
0;JMP
(Ball.moveIF_TRUE2)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R80
D=A
@ADD
0;JMP
(ADD_R80)
//Pop
@POP_R81
D=A
@R14
M=D
//THS
@0
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R81)
//goto
@Ball.moveIF_END2
0;JMP
(Ball.moveIF_FALSE2)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R82
D=A
@ADD
0;JMP
(ADD_R82)
//Pop
@POP_R83
D=A
@R14
M=D
//THS
@1
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R83)
(Ball.moveIF_END2)
//goto
@Ball.moveIF_END1
0;JMP
(Ball.moveIF_FALSE1)
//Push THS
@7
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF84
D=A
@IF
0;JMP
(IF84)
@Ball.moveIF_TRUE3
D;JNE
//goto
@Ball.moveIF_FALSE3
0;JMP
(Ball.moveIF_TRUE3)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R85
D=A
@SUB
0;JMP
(SUB_R85)
//Pop
@POP_R86
D=A
@R14
M=D
//THS
@0
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R86)
//goto
@Ball.moveIF_END3
0;JMP
(Ball.moveIF_FALSE3)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R87
D=A
@SUB
0;JMP
(SUB_R87)
//Pop
@POP_R88
D=A
@R14
M=D
//THS
@1
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R88)
(Ball.moveIF_END3)
(Ball.moveIF_END1)
(Ball.moveIF_END0)
//Push THS
@8
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF89
D=A
@IF
0;JMP
(IF89)
@Ball.moveIF_TRUE4
D;JNE
//goto
@Ball.moveIF_FALSE4
0;JMP
(Ball.moveIF_TRUE4)
//Push THS
@7
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF90
D=A
@IF
0;JMP
(IF90)
@Ball.moveIF_TRUE5
D;JNE
//goto
@Ball.moveIF_FALSE5
0;JMP
(Ball.moveIF_TRUE5)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R91
D=A
@ADD
0;JMP
(ADD_R91)
//Pop
@POP_R92
D=A
@R14
M=D
//THS
@1
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R92)
//goto
@Ball.moveIF_END5
0;JMP
(Ball.moveIF_FALSE5)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R93
D=A
@ADD
0;JMP
(ADD_R93)
//Pop
@POP_R94
D=A
@R14
M=D
//THS
@0
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R94)
(Ball.moveIF_END5)
//goto
@Ball.moveIF_END4
0;JMP
(Ball.moveIF_FALSE4)
//Push THS
@7
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF95
D=A
@IF
0;JMP
(IF95)
@Ball.moveIF_TRUE6
D;JNE
//goto
@Ball.moveIF_FALSE6
0;JMP
(Ball.moveIF_TRUE6)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R96
D=A
@SUB
0;JMP
(SUB_R96)
//Pop
@POP_R97
D=A
@R14
M=D
//THS
@1
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R97)
//goto
@Ball.moveIF_END6
0;JMP
(Ball.moveIF_FALSE6)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R98
D=A
@SUB
0;JMP
(SUB_R98)
//Pop
@POP_R99
D=A
@R14
M=D
//THS
@0
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R99)
(Ball.moveIF_END6)
(Ball.moveIF_END4)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@10
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n100
D=A
@GT
0;JMP
(n100)
//NOT
@SP
A=M-1
M=!M
//if
@IF101
D=A
@IF
0;JMP
(IF101)
@Ball.moveIF_TRUE7
D;JNE
//goto
@Ball.moveIF_FALSE7
0;JMP
(Ball.moveIF_TRUE7)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R102
D=A
@R14
M=D
//THS
@14
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R102)
//Push THS
@10
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R103
D=A
@R14
M=D
//THS
@0
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R103)
(Ball.moveIF_FALSE7)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@11
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n104
D=A
@LT
0;JMP
(n104)
//NOT
@SP
A=M-1
M=!M
//if
@IF105
D=A
@IF
0;JMP
(IF105)
@Ball.moveIF_TRUE8
D;JNE
//goto
@Ball.moveIF_FALSE8
0;JMP
(Ball.moveIF_TRUE8)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R106
D=A
@R14
M=D
//THS
@14
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R106)
//Push THS
@11
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R107
D=A
@R14
M=D
//THS
@0
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R107)
(Ball.moveIF_FALSE8)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@12
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n108
D=A
@GT
0;JMP
(n108)
//NOT
@SP
A=M-1
M=!M
//if
@IF109
D=A
@IF
0;JMP
(IF109)
@Ball.moveIF_TRUE9
D;JNE
//goto
@Ball.moveIF_FALSE9
0;JMP
(Ball.moveIF_TRUE9)
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R110
D=A
@R14
M=D
//THS
@14
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R110)
//Push THS
@12
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R111
D=A
@R14
M=D
//THS
@1
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R111)
(Ball.moveIF_FALSE9)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@13
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n112
D=A
@LT
0;JMP
(n112)
//NOT
@SP
A=M-1
M=!M
//if
@IF113
D=A
@IF
0;JMP
(IF113)
@Ball.moveIF_TRUE10
D;JNE
//goto
@Ball.moveIF_FALSE10
0;JMP
(Ball.moveIF_TRUE10)
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R114
D=A
@R14
M=D
//THS
@14
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R114)
//Push THS
@13
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R115
D=A
@R14
M=D
//THS
@1
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R115)
(Ball.moveIF_FALSE10)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-6
D=A
@R13
M=D
@call_Ball.show
0;JMP
(RETURN-6)
//Pop
@POP_R116
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R116)
//Push THS
@14
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Ball.bounce)
@5
D=A
@R14
M=D
@F117
D;JEQ
D=A
@FUNCT
0;JMP
(F117)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R118
D=A
@THS
0;JMP
(POP_R118)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@10
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN119
D=A
@R13
M=D
(call_Math.divide)
@Math.divide
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN119)
//Pop
@POP_R120
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R120)
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@10
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-7
D=A
@R13
M=D
@call_Math.divide
0;JMP
(RETURN-7)
//Pop
@POP_R121
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R121)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n122
D=A
@EQ
0;JMP
(n122)
//if
@IF123
D=A
@IF
0;JMP
(IF123)
@Ball.bounceIF_TRUE0
D;JNE
//goto
@Ball.bounceIF_FALSE0
0;JMP
(Ball.bounceIF_TRUE0)
//Push C
@10
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R124
D=A
@R14
M=D
//L
@4
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R124)
//goto
@Ball.bounceIF_END0
0;JMP
(Ball.bounceIF_FALSE0)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n125
D=A
@LT
0;JMP
(n125)
//NOT
@SP
A=M-1
M=!M
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n126
D=A
@EQ
0;JMP
(n126)
//AND
@AND_R127
D=A
@AND
0;JMP
(AND_R127)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n128
D=A
@LT
0;JMP
(n128)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//EQ
@n129
D=A
@EQ
0;JMP
(n129)
//AND
@AND_R130
D=A
@AND
0;JMP
(AND_R130)
//OR
@OR_R131
D=A
@OR
0;JMP
(OR_R131)
//if
@IF132
D=A
@IF
0;JMP
(IF132)
@Ball.bounceIF_TRUE1
D;JNE
//goto
@Ball.bounceIF_FALSE1
0;JMP
(Ball.bounceIF_TRUE1)
//Push C
@20
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R133
D=A
@R14
M=D
//L
@4
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R133)
//goto
@Ball.bounceIF_END1
0;JMP
(Ball.bounceIF_FALSE1)
//Push C
@5
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R134
D=A
@R14
M=D
//L
@4
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R134)
(Ball.bounceIF_END1)
(Ball.bounceIF_END0)
//Push THS
@14
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n135
D=A
@EQ
0;JMP
(n135)
//if
@IF136
D=A
@IF
0;JMP
(IF136)
@Ball.bounceIF_TRUE2
D;JNE
//goto
@Ball.bounceIF_FALSE2
0;JMP
(Ball.bounceIF_TRUE2)
//Push C
@506
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R137
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R137)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@50
D=A
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
@RETURN-8
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-8)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-9
D=A
@R13
M=D
@call_Math.divide
0;JMP
(RETURN-9)
//Pop
@POP_R138
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R138)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-10
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-10)
//ADD
@ADD_R139
D=A
@ADD
0;JMP
(ADD_R139)
//Pop
@POP_R140
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R140)
//goto
@Ball.bounceIF_END2
0;JMP
(Ball.bounceIF_FALSE2)
//Push THS
@14
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n141
D=A
@EQ
0;JMP
(n141)
//if
@IF142
D=A
@IF
0;JMP
(IF142)
@Ball.bounceIF_TRUE3
D;JNE
//goto
@Ball.bounceIF_FALSE3
0;JMP
(Ball.bounceIF_TRUE3)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R143
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R143)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@50
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-11
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-11)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-12
D=A
@R13
M=D
@call_Math.divide
0;JMP
(RETURN-12)
//Pop
@POP_R144
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R144)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-13
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-13)
//ADD
@ADD_R145
D=A
@ADD
0;JMP
(ADD_R145)
//Pop
@POP_R146
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R146)
//goto
@Ball.bounceIF_END3
0;JMP
(Ball.bounceIF_FALSE3)
//Push THS
@14
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n147
D=A
@EQ
0;JMP
(n147)
//if
@IF148
D=A
@IF
0;JMP
(IF148)
@Ball.bounceIF_TRUE4
D;JNE
//goto
@Ball.bounceIF_FALSE4
0;JMP
(Ball.bounceIF_TRUE4)
//Push C
@250
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R149
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R149)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@25
D=A
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
@RETURN-14
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-14)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-15
D=A
@R13
M=D
@call_Math.divide
0;JMP
(RETURN-15)
//Pop
@POP_R150
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R150)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-16
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-16)
//ADD
@ADD_R151
D=A
@ADD
0;JMP
(ADD_R151)
//Pop
@POP_R152
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R152)
//goto
@Ball.bounceIF_END4
0;JMP
(Ball.bounceIF_FALSE4)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R153
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R153)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@25
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-17
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-17)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-18
D=A
@R13
M=D
@call_Math.divide
0;JMP
(RETURN-18)
//Pop
@POP_R154
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R154)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-19
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-19)
//ADD
@ADD_R155
D=A
@ADD
0;JMP
(ADD_R155)
//Pop
@POP_R156
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R156)
(Ball.bounceIF_END4)
(Ball.bounceIF_END3)
(Ball.bounceIF_END2)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN157
D=A
@R13
M=D
(call_Ball.setDestination)
@Ball.setDestination
D=A
@R14
M=D
@3
D=A
@CALL
0;JMP
(RETURN157)
//Pop
@POP_R158
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R158)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(PongGame.new)
@0
D=A
@R14
M=D
@F159
D;JEQ
D=A
@FUNCT
0;JMP
(F159)
//Push C
@7
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-20
D=A
@R13
M=D
@call_Memory.alloc
0;JMP
(RETURN-20)
//Pop point
@POP_R160
D=A
@THS
0;JMP
(POP_R160)
//call
@RETURN161
D=A
@R13
M=D
(call_Screen.clearScreen)
@Screen.clearScreen
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN161)
//Pop
@POP_R162
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R162)
//Push C
@50
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R163
D=A
@R14
M=D
//THS
@6
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R163)
//Push C
@230
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@229
D=A
@SP
M=M+1
A=M-1
M=D
//Push THS
@6
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@7
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN164
D=A
@R13
M=D
(call_Bat.new)
@Bat.new
D=A
@R14
M=D
@4
D=A
@CALL
0;JMP
(RETURN164)
//Pop
@POP_R165
D=A
@R14
M=D
//THS
@0
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R165)
//Push C
@253
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@222
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@511
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@229
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN166
D=A
@R13
M=D
(call_Ball.new)
@Ball.new
D=A
@R14
M=D
@6
D=A
@CALL
0;JMP
(RETURN166)
//Pop
@POP_R167
D=A
@R14
M=D
//THS
@1
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R167)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@400
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-21
D=A
@R13
M=D
@call_Ball.setDestination
0;JMP
(RETURN-21)
//Pop
@POP_R168
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R168)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@238
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@511
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@240
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-22
D=A
@R13
M=D
@call_Screen.drawRectangle
0;JMP
(RETURN-22)
//Pop
@POP_R169
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R169)
//Push C
@22
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN170
D=A
@R13
M=D
(call_Output.moveCursor)
@Output.moveCursor
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN170)
//Pop
@POP_R171
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R171)
//Push C
@8
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN172
D=A
@R13
M=D
(call_String.new)
@String.new
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN172)
//Push C
@83
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN173
D=A
@R13
M=D
(call_String.appendChar)
@String.appendChar
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN173)
//Push C
@99
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-23
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-23)
//Push C
@111
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-24
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-24)
//Push C
@114
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-25
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-25)
//Push C
@101
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-26
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-26)
//Push C
@58
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-27
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-27)
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-28
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-28)
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-29
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-29)
//call
@RETURN174
D=A
@R13
M=D
(call_Output.printString)
@Output.printString
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN174)
//Pop
@POP_R175
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R175)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R176
D=A
@R14
M=D
//THS
@3
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R176)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R177
D=A
@R14
M=D
//THS
@4
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R177)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R178
D=A
@R14
M=D
//THS
@2
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R178)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R179
D=A
@R14
M=D
//THS
@5
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R179)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(PongGame.dispose)
@0
D=A
@R14
M=D
@F180
D;JEQ
D=A
@FUNCT
0;JMP
(F180)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R181
D=A
@THS
0;JMP
(POP_R181)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN182
D=A
@R13
M=D
(call_Bat.dispose)
@Bat.dispose
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN182)
//Pop
@POP_R183
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R183)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN184
D=A
@R13
M=D
(call_Ball.dispose)
@Ball.dispose
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN184)
//Pop
@POP_R185
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R185)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-30
D=A
@R13
M=D
@call_Memory.deAlloc
0;JMP
(RETURN-30)
//Pop
@POP_R186
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R186)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(PongGame.newInstance)
@0
D=A
@R14
M=D
@F187
D;JEQ
D=A
@FUNCT
0;JMP
(F187)
//call
@RETURN188
D=A
@R13
M=D
(call_PongGame.new)
@PongGame.new
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN188)
//Pop
@POP_R189
D=A
@R14
M=D
//S
@PongGame.0
D=A
@POP
0;JMP
(POP_R189)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(PongGame.getInstance)
@0
D=A
@R14
M=D
@F190
D;JEQ
D=A
@FUNCT
0;JMP
(F190)
//Push S
@PongGame.0
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(PongGame.run)
@1
D=A
@R14
M=D
@F191
D;JEQ
D=A
@FUNCT
0;JMP
(F191)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R192
D=A
@THS
0;JMP
(POP_R192)
(PongGame.runWHILE_EXP0)
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//NOT
@SP
A=M-1
M=!M
//if
@IF193
D=A
@IF
0;JMP
(IF193)
@PongGame.runWHILE_END0
D;JNE
(PongGame.runWHILE_EXP1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n194
D=A
@EQ
0;JMP
(n194)
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//AND
@AND_R195
D=A
@AND
0;JMP
(AND_R195)
//NOT
@SP
A=M-1
M=!M
//if
@IF196
D=A
@IF
0;JMP
(IF196)
@PongGame.runWHILE_END1
D;JNE
//call
@RETURN197
D=A
@R13
M=D
(call_Keyboard.keyPressed)
@Keyboard.keyPressed
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN197)
//Pop
@POP_R198
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R198)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN199
D=A
@R13
M=D
(call_Bat.move)
@Bat.move
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN199)
//Pop
@POP_R200
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R200)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN201
D=A
@R13
M=D
(call_PongGame.moveBall)
@PongGame.moveBall
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN201)
//Pop
@POP_R202
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R202)
//goto
@PongGame.runWHILE_EXP1
0;JMP
(PongGame.runWHILE_END1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@130
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n203
D=A
@EQ
0;JMP
(n203)
//if
@IF204
D=A
@IF
0;JMP
(IF204)
@PongGame.runIF_TRUE0
D;JNE
//goto
@PongGame.runIF_FALSE0
0;JMP
(PongGame.runIF_TRUE0)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN205
D=A
@R13
M=D
(call_Bat.setDirection)
@Bat.setDirection
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN205)
//Pop
@POP_R206
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R206)
//goto
@PongGame.runIF_END0
0;JMP
(PongGame.runIF_FALSE0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@132
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n207
D=A
@EQ
0;JMP
(n207)
//if
@IF208
D=A
@IF
0;JMP
(IF208)
@PongGame.runIF_TRUE1
D;JNE
//goto
@PongGame.runIF_FALSE1
0;JMP
(PongGame.runIF_TRUE1)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-31
D=A
@R13
M=D
@call_Bat.setDirection
0;JMP
(RETURN-31)
//Pop
@POP_R209
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R209)
//goto
@PongGame.runIF_END1
0;JMP
(PongGame.runIF_FALSE1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@140
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n210
D=A
@EQ
0;JMP
(n210)
//if
@IF211
D=A
@IF
0;JMP
(IF211)
@PongGame.runIF_TRUE2
D;JNE
//goto
@PongGame.runIF_FALSE2
0;JMP
(PongGame.runIF_TRUE2)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R212
D=A
@R14
M=D
//THS
@3
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R212)
(PongGame.runIF_FALSE2)
(PongGame.runIF_END1)
(PongGame.runIF_END0)
(PongGame.runWHILE_EXP2)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n213
D=A
@EQ
0;JMP
(n213)
//NOT
@SP
A=M-1
M=!M
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//AND
@AND_R214
D=A
@AND
0;JMP
(AND_R214)
//NOT
@SP
A=M-1
M=!M
//if
@IF215
D=A
@IF
0;JMP
(IF215)
@PongGame.runWHILE_END2
D;JNE
@RETURN-32
D=A
@R13
M=D
@call_Keyboard.keyPressed
0;JMP
(RETURN-32)
//Pop
@POP_R216
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R216)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-33
D=A
@R13
M=D
@call_Bat.move
0;JMP
(RETURN-33)
//Pop
@POP_R217
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R217)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-34
D=A
@R13
M=D
@call_PongGame.moveBall
0;JMP
(RETURN-34)
//Pop
@POP_R218
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R218)
//goto
@PongGame.runWHILE_EXP2
0;JMP
(PongGame.runWHILE_END2)
//goto
@PongGame.runWHILE_EXP0
0;JMP
(PongGame.runWHILE_END0)
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF219
D=A
@IF
0;JMP
(IF219)
@PongGame.runIF_TRUE3
D;JNE
//goto
@PongGame.runIF_FALSE3
0;JMP
(PongGame.runIF_TRUE3)
//Push C
@10
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-35
D=A
@R13
M=D
@call_Output.moveCursor
0;JMP
(RETURN-35)
//Pop
@POP_R220
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R220)
//Push C
@9
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-36
D=A
@R13
M=D
@call_String.new
0;JMP
(RETURN-36)
//Push C
@71
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-37
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-37)
//Push C
@97
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-38
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-38)
//Push C
@109
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-39
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-39)
//Push C
@101
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-40
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-40)
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-41
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-41)
//Push C
@79
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-42
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-42)
//Push C
@118
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-43
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-43)
//Push C
@101
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-44
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-44)
//Push C
@114
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-45
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-45)
@RETURN-46
D=A
@R13
M=D
@call_Output.printString
0;JMP
(RETURN-46)
//Pop
@POP_R221
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R221)
(PongGame.runIF_FALSE3)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(PongGame.moveBall)
@5
D=A
@R14
M=D
@F222
D;JEQ
D=A
@FUNCT
0;JMP
(F222)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R223
D=A
@THS
0;JMP
(POP_R223)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN224
D=A
@R13
M=D
(call_Ball.move)
@Ball.move
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN224)
//Pop
@POP_R225
D=A
@R14
M=D
//THS
@2
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R225)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n226
D=A
@GT
0;JMP
(n226)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@5
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//EQ
@n227
D=A
@EQ
0;JMP
(n227)
//NOT
@SP
A=M-1
M=!M
//AND
@AND_R228
D=A
@AND
0;JMP
(AND_R228)
//if
@IF229
D=A
@IF
0;JMP
(IF229)
@PongGame.moveBallIF_TRUE0
D;JNE
//goto
@PongGame.moveBallIF_FALSE0
0;JMP
(PongGame.moveBallIF_TRUE0)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R230
D=A
@R14
M=D
//THS
@5
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R230)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R231
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R231)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN232
D=A
@R13
M=D
(call_Bat.getLeft)
@Bat.getLeft
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN232)
//Pop
@POP_R233
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R233)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN234
D=A
@R13
M=D
(call_Bat.getRight)
@Bat.getRight
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN234)
//Pop
@POP_R235
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R235)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN236
D=A
@R13
M=D
(call_Ball.getLeft)
@Ball.getLeft
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN236)
//Pop
@POP_R237
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R237)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN238
D=A
@R13
M=D
(call_Ball.getRight)
@Ball.getRight
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN238)
//Pop
@POP_R239
D=A
@R14
M=D
//L
@4
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R239)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n240
D=A
@EQ
0;JMP
(n240)
//if
@IF241
D=A
@IF
0;JMP
(IF241)
@PongGame.moveBallIF_TRUE1
D;JNE
//goto
@PongGame.moveBallIF_FALSE1
0;JMP
(PongGame.moveBallIF_TRUE1)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n242
D=A
@GT
0;JMP
(n242)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n243
D=A
@LT
0;JMP
(n243)
//OR
@OR_R244
D=A
@OR
0;JMP
(OR_R244)
//Pop
@POP_R245
D=A
@R14
M=D
//THS
@3
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R245)
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//if
@IF246
D=A
@IF
0;JMP
(IF246)
@PongGame.moveBallIF_TRUE2
D;JNE
//goto
@PongGame.moveBallIF_FALSE2
0;JMP
(PongGame.moveBallIF_TRUE2)
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@10
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R247
D=A
@ADD
0;JMP
(ADD_R247)
//LT
@n248
D=A
@LT
0;JMP
(n248)
//if
@IF249
D=A
@IF
0;JMP
(IF249)
@PongGame.moveBallIF_TRUE3
D;JNE
//goto
@PongGame.moveBallIF_FALSE3
0;JMP
(PongGame.moveBallIF_TRUE3)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//Pop
@POP_R250
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R250)
//goto
@PongGame.moveBallIF_END3
0;JMP
(PongGame.moveBallIF_FALSE3)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@10
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R251
D=A
@SUB
0;JMP
(SUB_R251)
//GT
@n252
D=A
@GT
0;JMP
(n252)
//if
@IF253
D=A
@IF
0;JMP
(IF253)
@PongGame.moveBallIF_TRUE4
D;JNE
//goto
@PongGame.moveBallIF_FALSE4
0;JMP
(PongGame.moveBallIF_TRUE4)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R254
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R254)
(PongGame.moveBallIF_FALSE4)
(PongGame.moveBallIF_END3)
//Push THS
@6
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R255
D=A
@SUB
0;JMP
(SUB_R255)
//Pop
@POP_R256
D=A
@R14
M=D
//THS
@6
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R256)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@6
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN257
D=A
@R13
M=D
(call_Bat.setWidth)
@Bat.setWidth
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN257)
//Pop
@POP_R258
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R258)
//Push THS
@4
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R259
D=A
@ADD
0;JMP
(ADD_R259)
//Pop
@POP_R260
D=A
@R14
M=D
//THS
@4
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R260)
//Push C
@22
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@7
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-47
D=A
@R13
M=D
@call_Output.moveCursor
0;JMP
(RETURN-47)
//Pop
@POP_R261
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R261)
//Push THS
@4
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN262
D=A
@R13
M=D
(call_Output.printInt)
@Output.printInt
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN262)
//Pop
@POP_R263
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R263)
(PongGame.moveBallIF_FALSE2)
(PongGame.moveBallIF_FALSE1)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN264
D=A
@R13
M=D
(call_Ball.bounce)
@Ball.bounce
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN264)
//Pop
@POP_R265
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R265)
(PongGame.moveBallIF_FALSE0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.new)
@0
D=A
@R14
M=D
@F266
D;JEQ
D=A
@FUNCT
0;JMP
(F266)
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-48
D=A
@R13
M=D
@call_Memory.alloc
0;JMP
(RETURN-48)
//Pop point
@POP_R267
D=A
@THS
0;JMP
(POP_R267)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n268
D=A
@LT
0;JMP
(n268)
//if
@IF269
D=A
@IF
0;JMP
(IF269)
@String.newIF_TRUE0
D;JNE
//goto
@String.newIF_FALSE0
0;JMP
(String.newIF_TRUE0)
//Push C
@14
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN270
D=A
@R13
M=D
(call_Sys.error)
@Sys.error
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN270)
//Pop
@POP_R271
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R271)
(String.newIF_FALSE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n272
D=A
@GT
0;JMP
(n272)
//if
@IF273
D=A
@IF
0;JMP
(IF273)
@String.newIF_TRUE1
D;JNE
//goto
@String.newIF_FALSE1
0;JMP
(String.newIF_TRUE1)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN274
D=A
@R13
M=D
(call_Array.new)
@Array.new
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN274)
//Pop
@POP_R275
D=A
@R14
M=D
//THS
@1
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R275)
(String.newIF_FALSE1)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R276
D=A
@R14
M=D
//THS
@0
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R276)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R277
D=A
@R14
M=D
//THS
@2
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R277)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.dispose)
@0
D=A
@R14
M=D
@F278
D;JEQ
D=A
@FUNCT
0;JMP
(F278)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R279
D=A
@THS
0;JMP
(POP_R279)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n280
D=A
@GT
0;JMP
(n280)
//if
@IF281
D=A
@IF
0;JMP
(IF281)
@String.disposeIF_TRUE0
D;JNE
//goto
@String.disposeIF_FALSE0
0;JMP
(String.disposeIF_TRUE0)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN282
D=A
@R13
M=D
(call_Array.dispose)
@Array.dispose
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN282)
//Pop
@POP_R283
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R283)
(String.disposeIF_FALSE0)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-49
D=A
@R13
M=D
@call_Memory.deAlloc
0;JMP
(RETURN-49)
//Pop
@POP_R284
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R284)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.length)
@0
D=A
@R14
M=D
@F285
D;JEQ
D=A
@FUNCT
0;JMP
(F285)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R286
D=A
@THS
0;JMP
(POP_R286)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.charAt)
@0
D=A
@R14
M=D
@F287
D;JEQ
D=A
@FUNCT
0;JMP
(F287)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R288
D=A
@THS
0;JMP
(POP_R288)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n289
D=A
@LT
0;JMP
(n289)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n290
D=A
@GT
0;JMP
(n290)
//OR
@OR_R291
D=A
@OR
0;JMP
(OR_R291)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//EQ
@n292
D=A
@EQ
0;JMP
(n292)
//OR
@OR_R293
D=A
@OR
0;JMP
(OR_R293)
//if
@IF294
D=A
@IF
0;JMP
(IF294)
@String.charAtIF_TRUE0
D;JNE
//goto
@String.charAtIF_FALSE0
0;JMP
(String.charAtIF_TRUE0)
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-50
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-50)
//Pop
@POP_R295
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R295)
(String.charAtIF_FALSE0)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R296
D=A
@ADD
0;JMP
(ADD_R296)
//Pop point
@POP_R297
D=A
@THT
0;JMP
(POP_R297)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.setCharAt)
@0
D=A
@R14
M=D
@F298
D;JEQ
D=A
@FUNCT
0;JMP
(F298)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R299
D=A
@THS
0;JMP
(POP_R299)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n300
D=A
@LT
0;JMP
(n300)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n301
D=A
@GT
0;JMP
(n301)
//OR
@OR_R302
D=A
@OR
0;JMP
(OR_R302)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//EQ
@n303
D=A
@EQ
0;JMP
(n303)
//OR
@OR_R304
D=A
@OR
0;JMP
(OR_R304)
//if
@IF305
D=A
@IF
0;JMP
(IF305)
@String.setCharAtIF_TRUE0
D;JNE
//goto
@String.setCharAtIF_FALSE0
0;JMP
(String.setCharAtIF_TRUE0)
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-51
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-51)
//Pop
@POP_R306
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R306)
(String.setCharAtIF_FALSE0)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R307
D=A
@ADD
0;JMP
(ADD_R307)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R308
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R308)
//Pop point
@POP_R309
D=A
@THT
0;JMP
(POP_R309)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R310
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R310)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.appendChar)
@0
D=A
@R14
M=D
@F311
D;JEQ
D=A
@FUNCT
0;JMP
(F311)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R312
D=A
@THS
0;JMP
(POP_R312)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//EQ
@n313
D=A
@EQ
0;JMP
(n313)
//if
@IF314
D=A
@IF
0;JMP
(IF314)
@String.appendCharIF_TRUE0
D;JNE
//goto
@String.appendCharIF_FALSE0
0;JMP
(String.appendCharIF_TRUE0)
//Push C
@17
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-52
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-52)
//Pop
@POP_R315
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R315)
(String.appendCharIF_FALSE0)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R316
D=A
@ADD
0;JMP
(ADD_R316)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R317
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R317)
//Pop point
@POP_R318
D=A
@THT
0;JMP
(POP_R318)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R319
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R319)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R320
D=A
@ADD
0;JMP
(ADD_R320)
//Pop
@POP_R321
D=A
@R14
M=D
//THS
@2
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R321)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.eraseLastChar)
@0
D=A
@R14
M=D
@F322
D;JEQ
D=A
@FUNCT
0;JMP
(F322)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R323
D=A
@THS
0;JMP
(POP_R323)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n324
D=A
@EQ
0;JMP
(n324)
//if
@IF325
D=A
@IF
0;JMP
(IF325)
@String.eraseLastCharIF_TRUE0
D;JNE
//goto
@String.eraseLastCharIF_FALSE0
0;JMP
(String.eraseLastCharIF_TRUE0)
//Push C
@18
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-53
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-53)
//Pop
@POP_R326
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R326)
(String.eraseLastCharIF_FALSE0)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R327
D=A
@SUB
0;JMP
(SUB_R327)
//Pop
@POP_R328
D=A
@R14
M=D
//THS
@2
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R328)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.intValue)
@5
D=A
@R14
M=D
@F329
D;JEQ
D=A
@FUNCT
0;JMP
(F329)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R330
D=A
@THS
0;JMP
(POP_R330)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n331
D=A
@EQ
0;JMP
(n331)
//if
@IF332
D=A
@IF
0;JMP
(IF332)
@String.intValueIF_TRUE0
D;JNE
//goto
@String.intValueIF_FALSE0
0;JMP
(String.intValueIF_TRUE0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
(String.intValueIF_FALSE0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R333
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R333)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R334
D=A
@ADD
0;JMP
(ADD_R334)
//Pop point
@POP_R335
D=A
@THT
0;JMP
(POP_R335)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@45
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n336
D=A
@EQ
0;JMP
(n336)
//if
@IF337
D=A
@IF
0;JMP
(IF337)
@String.intValueIF_TRUE1
D;JNE
//goto
@String.intValueIF_FALSE1
0;JMP
(String.intValueIF_TRUE1)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R338
D=A
@R14
M=D
//L
@4
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R338)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R339
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R339)
(String.intValueIF_FALSE1)
(String.intValueWHILE_EXP0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n340
D=A
@LT
0;JMP
(n340)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//AND
@AND_R341
D=A
@AND
0;JMP
(AND_R341)
//NOT
@SP
A=M-1
M=!M
//if
@IF342
D=A
@IF
0;JMP
(IF342)
@String.intValueWHILE_END0
D;JNE
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R343
D=A
@ADD
0;JMP
(ADD_R343)
//Pop point
@POP_R344
D=A
@THT
0;JMP
(POP_R344)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R345
D=A
@SUB
0;JMP
(SUB_R345)
//Pop
@POP_R346
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R346)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n347
D=A
@LT
0;JMP
(n347)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@9
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n348
D=A
@GT
0;JMP
(n348)
//OR
@OR_R349
D=A
@OR
0;JMP
(OR_R349)
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R350
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R350)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF351
D=A
@IF
0;JMP
(IF351)
@String.intValueIF_TRUE2
D;JNE
//goto
@String.intValueIF_FALSE2
0;JMP
(String.intValueIF_TRUE2)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@10
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-54
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-54)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R352
D=A
@ADD
0;JMP
(ADD_R352)
//Pop
@POP_R353
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R353)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R354
D=A
@ADD
0;JMP
(ADD_R354)
//Pop
@POP_R355
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R355)
(String.intValueIF_FALSE2)
//goto
@String.intValueWHILE_EXP0
0;JMP
(String.intValueWHILE_END0)
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF356
D=A
@IF
0;JMP
(IF356)
@String.intValueIF_TRUE3
D;JNE
//goto
@String.intValueIF_FALSE3
0;JMP
(String.intValueIF_TRUE3)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//Pop
@POP_R357
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R357)
(String.intValueIF_FALSE3)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.setInt)
@4
D=A
@R14
M=D
@F358
D;JEQ
D=A
@FUNCT
0;JMP
(F358)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R359
D=A
@THS
0;JMP
(POP_R359)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n360
D=A
@EQ
0;JMP
(n360)
//if
@IF361
D=A
@IF
0;JMP
(IF361)
@String.setIntIF_TRUE0
D;JNE
//goto
@String.setIntIF_FALSE0
0;JMP
(String.setIntIF_TRUE0)
//Push C
@19
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-55
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-55)
//Pop
@POP_R362
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R362)
(String.setIntIF_FALSE0)
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-56
D=A
@R13
M=D
@call_Array.new
0;JMP
(RETURN-56)
//Pop
@POP_R363
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R363)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n364
D=A
@LT
0;JMP
(n364)
//if
@IF365
D=A
@IF
0;JMP
(IF365)
@String.setIntIF_TRUE1
D;JNE
//goto
@String.setIntIF_FALSE1
0;JMP
(String.setIntIF_TRUE1)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R366
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R366)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//Pop
@POP_R367
D=A
@R14
M=D
//A
@1
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R367)
(String.setIntIF_FALSE1)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R368
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R368)
(String.setIntWHILE_EXP0)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n369
D=A
@GT
0;JMP
(n369)
//NOT
@SP
A=M-1
M=!M
//if
@IF370
D=A
@IF
0;JMP
(IF370)
@String.setIntWHILE_END0
D;JNE
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@10
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-57
D=A
@R13
M=D
@call_Math.divide
0;JMP
(RETURN-57)
//Pop
@POP_R371
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R371)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R372
D=A
@ADD
0;JMP
(ADD_R372)
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@10
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-58
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-58)
//SUB
@SUB_R373
D=A
@SUB
0;JMP
(SUB_R373)
//ADD
@ADD_R374
D=A
@ADD
0;JMP
(ADD_R374)
//Pop
@POP_R375
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R375)
//Pop point
@POP_R376
D=A
@THT
0;JMP
(POP_R376)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R377
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R377)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R378
D=A
@ADD
0;JMP
(ADD_R378)
//Pop
@POP_R379
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R379)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R380
D=A
@R14
M=D
//A
@1
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R380)
//goto
@String.setIntWHILE_EXP0
0;JMP
(String.setIntWHILE_END0)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF381
D=A
@IF
0;JMP
(IF381)
@String.setIntIF_TRUE2
D;JNE
//goto
@String.setIntIF_FALSE2
0;JMP
(String.setIntIF_TRUE2)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R382
D=A
@ADD
0;JMP
(ADD_R382)
//Push C
@45
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R383
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R383)
//Pop point
@POP_R384
D=A
@THT
0;JMP
(POP_R384)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R385
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R385)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R386
D=A
@ADD
0;JMP
(ADD_R386)
//Pop
@POP_R387
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R387)
(String.setIntIF_FALSE2)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n388
D=A
@LT
0;JMP
(n388)
//if
@IF389
D=A
@IF
0;JMP
(IF389)
@String.setIntIF_TRUE3
D;JNE
//goto
@String.setIntIF_FALSE3
0;JMP
(String.setIntIF_TRUE3)
//Push C
@19
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-59
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-59)
//Pop
@POP_R390
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R390)
(String.setIntIF_FALSE3)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n391
D=A
@EQ
0;JMP
(n391)
//if
@IF392
D=A
@IF
0;JMP
(IF392)
@String.setIntIF_TRUE4
D;JNE
//goto
@String.setIntIF_FALSE4
0;JMP
(String.setIntIF_TRUE4)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R393
D=A
@ADD
0;JMP
(ADD_R393)
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R394
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R394)
//Pop point
@POP_R395
D=A
@THT
0;JMP
(POP_R395)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R396
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R396)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R397
D=A
@R14
M=D
//THS
@2
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R397)
//goto
@String.setIntIF_END4
0;JMP
(String.setIntIF_FALSE4)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R398
D=A
@R14
M=D
//THS
@2
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R398)
(String.setIntWHILE_EXP1)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n399
D=A
@LT
0;JMP
(n399)
//NOT
@SP
A=M-1
M=!M
//if
@IF400
D=A
@IF
0;JMP
(IF400)
@String.setIntWHILE_END1
D;JNE
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R401
D=A
@ADD
0;JMP
(ADD_R401)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R402
D=A
@ADD
0;JMP
(ADD_R402)
//SUB
@SUB_R403
D=A
@SUB
0;JMP
(SUB_R403)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R404
D=A
@ADD
0;JMP
(ADD_R404)
//Pop point
@POP_R405
D=A
@THT
0;JMP
(POP_R405)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R406
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R406)
//Pop point
@POP_R407
D=A
@THT
0;JMP
(POP_R407)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R408
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R408)
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R409
D=A
@ADD
0;JMP
(ADD_R409)
//Pop
@POP_R410
D=A
@R14
M=D
//THS
@2
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R410)
//goto
@String.setIntWHILE_EXP1
0;JMP
(String.setIntWHILE_END1)
(String.setIntIF_END4)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-60
D=A
@R13
M=D
@call_Array.dispose
0;JMP
(RETURN-60)
//Pop
@POP_R411
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R411)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.newLine)
@0
D=A
@R14
M=D
@F412
D;JEQ
D=A
@FUNCT
0;JMP
(F412)
//Push C
@128
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.backSpace)
@0
D=A
@R14
M=D
@F413
D;JEQ
D=A
@FUNCT
0;JMP
(F413)
//Push C
@129
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(String.doubleQuote)
@0
D=A
@R14
M=D
@F414
D;JEQ
D=A
@FUNCT
0;JMP
(F414)
//Push C
@34
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Math.init)
@1
D=A
@R14
M=D
@F415
D;JEQ
D=A
@FUNCT
0;JMP
(F415)
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-61
D=A
@R13
M=D
@call_Array.new
0;JMP
(RETURN-61)
//Pop
@POP_R416
D=A
@R14
M=D
//S
@Math.1
D=A
@POP
0;JMP
(POP_R416)
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-62
D=A
@R13
M=D
@call_Array.new
0;JMP
(RETURN-62)
//Pop
@POP_R417
D=A
@R14
M=D
//S
@Math.0
D=A
@POP
0;JMP
(POP_R417)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R418
D=A
@ADD
0;JMP
(ADD_R418)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R419
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R419)
//Pop point
@POP_R420
D=A
@THT
0;JMP
(POP_R420)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R421
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R421)
(Math.initWHILE_EXP0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n422
D=A
@LT
0;JMP
(n422)
//NOT
@SP
A=M-1
M=!M
//if
@IF423
D=A
@IF
0;JMP
(IF423)
@Math.initWHILE_END0
D;JNE
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R424
D=A
@ADD
0;JMP
(ADD_R424)
//Pop
@POP_R425
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R425)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R426
D=A
@ADD
0;JMP
(ADD_R426)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R427
D=A
@SUB
0;JMP
(SUB_R427)
//Push S
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R428
D=A
@ADD
0;JMP
(ADD_R428)
//Pop point
@POP_R429
D=A
@THT
0;JMP
(POP_R429)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R430
D=A
@SUB
0;JMP
(SUB_R430)
//Push S
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R431
D=A
@ADD
0;JMP
(ADD_R431)
//Pop point
@POP_R432
D=A
@THT
0;JMP
(POP_R432)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R433
D=A
@ADD
0;JMP
(ADD_R433)
//Pop
@POP_R434
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R434)
//Pop point
@POP_R435
D=A
@THT
0;JMP
(POP_R435)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R436
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R436)
//goto
@Math.initWHILE_EXP0
0;JMP
(Math.initWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Math.abs)
@0
D=A
@R14
M=D
@F437
D;JEQ
D=A
@FUNCT
0;JMP
(F437)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n438
D=A
@LT
0;JMP
(n438)
//if
@IF439
D=A
@IF
0;JMP
(IF439)
@Math.absIF_TRUE0
D;JNE
//goto
@Math.absIF_FALSE0
0;JMP
(Math.absIF_TRUE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//Pop
@POP_R440
D=A
@R14
M=D
//A
@0
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R440)
(Math.absIF_FALSE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Math.multiply)
@5
D=A
@R14
M=D
@F441
D;JEQ
D=A
@FUNCT
0;JMP
(F441)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n442
D=A
@LT
0;JMP
(n442)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n443
D=A
@GT
0;JMP
(n443)
//AND
@AND_R444
D=A
@AND
0;JMP
(AND_R444)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n445
D=A
@GT
0;JMP
(n445)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n446
D=A
@LT
0;JMP
(n446)
//AND
@AND_R447
D=A
@AND
0;JMP
(AND_R447)
//OR
@OR_R448
D=A
@OR
0;JMP
(OR_R448)
//Pop
@POP_R449
D=A
@R14
M=D
//L
@4
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R449)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-63
D=A
@R13
M=D
@call_Math.abs
0;JMP
(RETURN-63)
//Pop
@POP_R450
D=A
@R14
M=D
//A
@0
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R450)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-64
D=A
@R13
M=D
@call_Math.abs
0;JMP
(RETURN-64)
//Pop
@POP_R451
D=A
@R14
M=D
//A
@1
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R451)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n452
D=A
@LT
0;JMP
(n452)
//if
@IF453
D=A
@IF
0;JMP
(IF453)
@Math.multiplyIF_TRUE0
D;JNE
//goto
@Math.multiplyIF_FALSE0
0;JMP
(Math.multiplyIF_TRUE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R454
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R454)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R455
D=A
@R14
M=D
//A
@0
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R455)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R456
D=A
@R14
M=D
//A
@1
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R456)
(Math.multiplyIF_FALSE0)
(Math.multiplyWHILE_EXP0)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R457
D=A
@SUB
0;JMP
(SUB_R457)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R458
D=A
@SUB
0;JMP
(SUB_R458)
//LT
@n459
D=A
@LT
0;JMP
(n459)
//NOT
@SP
A=M-1
M=!M
//if
@IF460
D=A
@IF
0;JMP
(IF460)
@Math.multiplyWHILE_END0
D;JNE
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R461
D=A
@ADD
0;JMP
(ADD_R461)
//Pop point
@POP_R462
D=A
@THT
0;JMP
(POP_R462)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//AND
@AND_R463
D=A
@AND
0;JMP
(AND_R463)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n464
D=A
@EQ
0;JMP
(n464)
//NOT
@SP
A=M-1
M=!M
//if
@IF465
D=A
@IF
0;JMP
(IF465)
@Math.multiplyIF_TRUE1
D;JNE
//goto
@Math.multiplyIF_FALSE1
0;JMP
(Math.multiplyIF_TRUE1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R466
D=A
@ADD
0;JMP
(ADD_R466)
//Pop
@POP_R467
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R467)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R468
D=A
@ADD
0;JMP
(ADD_R468)
//Pop point
@POP_R469
D=A
@THT
0;JMP
(POP_R469)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R470
D=A
@ADD
0;JMP
(ADD_R470)
//Pop
@POP_R471
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R471)
(Math.multiplyIF_FALSE1)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R472
D=A
@ADD
0;JMP
(ADD_R472)
//Pop
@POP_R473
D=A
@R14
M=D
//A
@0
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R473)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R474
D=A
@ADD
0;JMP
(ADD_R474)
//Pop
@POP_R475
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R475)
//goto
@Math.multiplyWHILE_EXP0
0;JMP
(Math.multiplyWHILE_END0)
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF476
D=A
@IF
0;JMP
(IF476)
@Math.multiplyIF_TRUE2
D;JNE
//goto
@Math.multiplyIF_FALSE2
0;JMP
(Math.multiplyIF_TRUE2)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//Pop
@POP_R477
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R477)
(Math.multiplyIF_FALSE2)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Math.divide)
@4
D=A
@R14
M=D
@F478
D;JEQ
D=A
@FUNCT
0;JMP
(F478)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n479
D=A
@EQ
0;JMP
(n479)
//if
@IF480
D=A
@IF
0;JMP
(IF480)
@Math.divideIF_TRUE0
D;JNE
//goto
@Math.divideIF_FALSE0
0;JMP
(Math.divideIF_TRUE0)
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-65
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-65)
//Pop
@POP_R481
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R481)
(Math.divideIF_FALSE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n482
D=A
@LT
0;JMP
(n482)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n483
D=A
@GT
0;JMP
(n483)
//AND
@AND_R484
D=A
@AND
0;JMP
(AND_R484)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n485
D=A
@GT
0;JMP
(n485)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n486
D=A
@LT
0;JMP
(n486)
//AND
@AND_R487
D=A
@AND
0;JMP
(AND_R487)
//OR
@OR_R488
D=A
@OR
0;JMP
(OR_R488)
//Pop
@POP_R489
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R489)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R490
D=A
@ADD
0;JMP
(ADD_R490)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-66
D=A
@R13
M=D
@call_Math.abs
0;JMP
(RETURN-66)
//Pop
@POP_R491
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R491)
//Pop point
@POP_R492
D=A
@THT
0;JMP
(POP_R492)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R493
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R493)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-67
D=A
@R13
M=D
@call_Math.abs
0;JMP
(RETURN-67)
//Pop
@POP_R494
D=A
@R14
M=D
//A
@0
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R494)
(Math.divideWHILE_EXP0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n495
D=A
@LT
0;JMP
(n495)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//AND
@AND_R496
D=A
@AND
0;JMP
(AND_R496)
//NOT
@SP
A=M-1
M=!M
//if
@IF497
D=A
@IF
0;JMP
(IF497)
@Math.divideWHILE_END0
D;JNE
//Push C
@32767
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R498
D=A
@ADD
0;JMP
(ADD_R498)
//Pop point
@POP_R499
D=A
@THT
0;JMP
(POP_R499)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R500
D=A
@SUB
0;JMP
(SUB_R500)
//SUB
@SUB_R501
D=A
@SUB
0;JMP
(SUB_R501)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R502
D=A
@ADD
0;JMP
(ADD_R502)
//Pop point
@POP_R503
D=A
@THT
0;JMP
(POP_R503)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R504
D=A
@SUB
0;JMP
(SUB_R504)
//LT
@n505
D=A
@LT
0;JMP
(n505)
//Pop
@POP_R506
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R506)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//if
@IF507
D=A
@IF
0;JMP
(IF507)
@Math.divideIF_TRUE1
D;JNE
//goto
@Math.divideIF_FALSE1
0;JMP
(Math.divideIF_TRUE1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R508
D=A
@ADD
0;JMP
(ADD_R508)
//Push S
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R509
D=A
@ADD
0;JMP
(ADD_R509)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R510
D=A
@ADD
0;JMP
(ADD_R510)
//Pop point
@POP_R511
D=A
@THT
0;JMP
(POP_R511)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R512
D=A
@ADD
0;JMP
(ADD_R512)
//Pop point
@POP_R513
D=A
@THT
0;JMP
(POP_R513)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R514
D=A
@ADD
0;JMP
(ADD_R514)
//Pop
@POP_R515
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R515)
//Pop point
@POP_R516
D=A
@THT
0;JMP
(POP_R516)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R517
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R517)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R518
D=A
@ADD
0;JMP
(ADD_R518)
//Push S
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R519
D=A
@ADD
0;JMP
(ADD_R519)
//Pop point
@POP_R520
D=A
@THT
0;JMP
(POP_R520)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R521
D=A
@SUB
0;JMP
(SUB_R521)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R522
D=A
@SUB
0;JMP
(SUB_R522)
//GT
@n523
D=A
@GT
0;JMP
(n523)
//Pop
@POP_R524
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R524)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//if
@IF525
D=A
@IF
0;JMP
(IF525)
@Math.divideIF_TRUE2
D;JNE
//goto
@Math.divideIF_FALSE2
0;JMP
(Math.divideIF_TRUE2)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R526
D=A
@ADD
0;JMP
(ADD_R526)
//Pop
@POP_R527
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R527)
(Math.divideIF_FALSE2)
(Math.divideIF_FALSE1)
//goto
@Math.divideWHILE_EXP0
0;JMP
(Math.divideWHILE_END0)
(Math.divideWHILE_EXP1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//GT
@n528
D=A
@GT
0;JMP
(n528)
//NOT
@SP
A=M-1
M=!M
//if
@IF529
D=A
@IF
0;JMP
(IF529)
@Math.divideWHILE_END1
D;JNE
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R530
D=A
@ADD
0;JMP
(ADD_R530)
//Pop point
@POP_R531
D=A
@THT
0;JMP
(POP_R531)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R532
D=A
@SUB
0;JMP
(SUB_R532)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R533
D=A
@SUB
0;JMP
(SUB_R533)
//GT
@n534
D=A
@GT
0;JMP
(n534)
//NOT
@SP
A=M-1
M=!M
//if
@IF535
D=A
@IF
0;JMP
(IF535)
@Math.divideIF_TRUE3
D;JNE
//goto
@Math.divideIF_FALSE3
0;JMP
(Math.divideIF_TRUE3)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R536
D=A
@ADD
0;JMP
(ADD_R536)
//Pop point
@POP_R537
D=A
@THT
0;JMP
(POP_R537)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R538
D=A
@ADD
0;JMP
(ADD_R538)
//Pop
@POP_R539
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R539)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R540
D=A
@ADD
0;JMP
(ADD_R540)
//Pop point
@POP_R541
D=A
@THT
0;JMP
(POP_R541)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R542
D=A
@SUB
0;JMP
(SUB_R542)
//Pop
@POP_R543
D=A
@R14
M=D
//A
@0
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R543)
(Math.divideIF_FALSE3)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R544
D=A
@SUB
0;JMP
(SUB_R544)
//Pop
@POP_R545
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R545)
//goto
@Math.divideWHILE_EXP1
0;JMP
(Math.divideWHILE_END1)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF546
D=A
@IF
0;JMP
(IF546)
@Math.divideIF_TRUE4
D;JNE
//goto
@Math.divideIF_FALSE4
0;JMP
(Math.divideIF_TRUE4)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//Pop
@POP_R547
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R547)
(Math.divideIF_FALSE4)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Math.sqrt)
@4
D=A
@R14
M=D
@F548
D;JEQ
D=A
@FUNCT
0;JMP
(F548)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n549
D=A
@LT
0;JMP
(n549)
//if
@IF550
D=A
@IF
0;JMP
(IF550)
@Math.sqrtIF_TRUE0
D;JNE
//goto
@Math.sqrtIF_FALSE0
0;JMP
(Math.sqrtIF_TRUE0)
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-68
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-68)
//Pop
@POP_R551
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R551)
(Math.sqrtIF_FALSE0)
//Push C
@7
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R552
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R552)
(Math.sqrtWHILE_EXP0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//GT
@n553
D=A
@GT
0;JMP
(n553)
//NOT
@SP
A=M-1
M=!M
//if
@IF554
D=A
@IF
0;JMP
(IF554)
@Math.sqrtWHILE_END0
D;JNE
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R555
D=A
@ADD
0;JMP
(ADD_R555)
//Pop point
@POP_R556
D=A
@THT
0;JMP
(POP_R556)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R557
D=A
@ADD
0;JMP
(ADD_R557)
//Pop
@POP_R558
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R558)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-69
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-69)
//Pop
@POP_R559
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R559)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n560
D=A
@GT
0;JMP
(n560)
//NOT
@SP
A=M-1
M=!M
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n561
D=A
@LT
0;JMP
(n561)
//NOT
@SP
A=M-1
M=!M
//AND
@AND_R562
D=A
@AND
0;JMP
(AND_R562)
//if
@IF563
D=A
@IF
0;JMP
(IF563)
@Math.sqrtIF_TRUE1
D;JNE
//goto
@Math.sqrtIF_FALSE1
0;JMP
(Math.sqrtIF_TRUE1)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R564
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R564)
(Math.sqrtIF_FALSE1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R565
D=A
@SUB
0;JMP
(SUB_R565)
//Pop
@POP_R566
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R566)
//goto
@Math.sqrtWHILE_EXP0
0;JMP
(Math.sqrtWHILE_END0)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Math.max)
@0
D=A
@R14
M=D
@F567
D;JEQ
D=A
@FUNCT
0;JMP
(F567)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n568
D=A
@GT
0;JMP
(n568)
//if
@IF569
D=A
@IF
0;JMP
(IF569)
@Math.maxIF_TRUE0
D;JNE
//goto
@Math.maxIF_FALSE0
0;JMP
(Math.maxIF_TRUE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R570
D=A
@R14
M=D
//A
@1
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R570)
(Math.maxIF_FALSE0)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Math.min)
@0
D=A
@R14
M=D
@F571
D;JEQ
D=A
@FUNCT
0;JMP
(F571)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n572
D=A
@LT
0;JMP
(n572)
//if
@IF573
D=A
@IF
0;JMP
(IF573)
@Math.minIF_TRUE0
D;JNE
//goto
@Math.minIF_FALSE0
0;JMP
(Math.minIF_TRUE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R574
D=A
@R14
M=D
//A
@1
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R574)
(Math.minIF_FALSE0)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Array.new)
@0
D=A
@R14
M=D
@F575
D;JEQ
D=A
@FUNCT
0;JMP
(F575)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n576
D=A
@GT
0;JMP
(n576)
//NOT
@SP
A=M-1
M=!M
//if
@IF577
D=A
@IF
0;JMP
(IF577)
@Array.newIF_TRUE0
D;JNE
//goto
@Array.newIF_FALSE0
0;JMP
(Array.newIF_TRUE0)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-70
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-70)
//Pop
@POP_R578
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R578)
(Array.newIF_FALSE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-71
D=A
@R13
M=D
@call_Memory.alloc
0;JMP
(RETURN-71)
@RETURNS
0;JMP
//funct
(Array.dispose)
@0
D=A
@R14
M=D
@F579
D;JEQ
D=A
@FUNCT
0;JMP
(F579)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R580
D=A
@THS
0;JMP
(POP_R580)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-72
D=A
@R13
M=D
@call_Memory.deAlloc
0;JMP
(RETURN-72)
//Pop
@POP_R581
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R581)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Main.main)
@1
D=A
@R14
M=D
@F582
D;JEQ
D=A
@FUNCT
0;JMP
(F582)
//call
@RETURN583
D=A
@R13
M=D
(call_PongGame.newInstance)
@PongGame.newInstance
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN583)
//Pop
@POP_R584
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R584)
//call
@RETURN585
D=A
@R13
M=D
(call_PongGame.getInstance)
@PongGame.getInstance
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN585)
//Pop
@POP_R586
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R586)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN587
D=A
@R13
M=D
(call_PongGame.run)
@PongGame.run
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN587)
//Pop
@POP_R588
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R588)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN589
D=A
@R13
M=D
(call_PongGame.dispose)
@PongGame.dispose
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN589)
//Pop
@POP_R590
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R590)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Keyboard.init)
@0
D=A
@R14
M=D
@F591
D;JEQ
D=A
@FUNCT
0;JMP
(F591)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Keyboard.keyPressed)
@0
D=A
@R14
M=D
@F592
D;JEQ
D=A
@FUNCT
0;JMP
(F592)
//Push C
@24576
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN593
D=A
@R13
M=D
(call_Memory.peek)
@Memory.peek
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN593)
@RETURNS
0;JMP
//funct
(Keyboard.readChar)
@2
D=A
@R14
M=D
@F594
D;JEQ
D=A
@FUNCT
0;JMP
(F594)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN595
D=A
@R13
M=D
(call_Output.printChar)
@Output.printChar
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN595)
//Pop
@POP_R596
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R596)
(Keyboard.readCharWHILE_EXP0)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n597
D=A
@EQ
0;JMP
(n597)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n598
D=A
@GT
0;JMP
(n598)
//OR
@OR_R599
D=A
@OR
0;JMP
(OR_R599)
//NOT
@SP
A=M-1
M=!M
//if
@IF600
D=A
@IF
0;JMP
(IF600)
@Keyboard.readCharWHILE_END0
D;JNE
@RETURN-73
D=A
@R13
M=D
@call_Keyboard.keyPressed
0;JMP
(RETURN-73)
//Pop
@POP_R601
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R601)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n602
D=A
@GT
0;JMP
(n602)
//if
@IF603
D=A
@IF
0;JMP
(IF603)
@Keyboard.readCharIF_TRUE0
D;JNE
//goto
@Keyboard.readCharIF_FALSE0
0;JMP
(Keyboard.readCharIF_TRUE0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R604
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R604)
(Keyboard.readCharIF_FALSE0)
//goto
@Keyboard.readCharWHILE_EXP0
0;JMP
(Keyboard.readCharWHILE_END0)
//call
@RETURN605
D=A
@R13
M=D
(call_String.backSpace)
@String.backSpace
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN605)
@RETURN-74
D=A
@R13
M=D
@call_Output.printChar
0;JMP
(RETURN-74)
//Pop
@POP_R606
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R606)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-75
D=A
@R13
M=D
@call_Output.printChar
0;JMP
(RETURN-75)
//Pop
@POP_R607
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R607)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Keyboard.readLine)
@5
D=A
@R14
M=D
@F608
D;JEQ
D=A
@FUNCT
0;JMP
(F608)
//Push C
@80
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-76
D=A
@R13
M=D
@call_String.new
0;JMP
(RETURN-76)
//Pop
@POP_R609
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R609)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-77
D=A
@R13
M=D
@call_Output.printString
0;JMP
(RETURN-77)
//Pop
@POP_R610
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R610)
//call
@RETURN611
D=A
@R13
M=D
(call_String.newLine)
@String.newLine
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN611)
//Pop
@POP_R612
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R612)
@RETURN-78
D=A
@R13
M=D
@call_String.backSpace
0;JMP
(RETURN-78)
//Pop
@POP_R613
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R613)
(Keyboard.readLineWHILE_EXP0)
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//NOT
@SP
A=M-1
M=!M
//if
@IF614
D=A
@IF
0;JMP
(IF614)
@Keyboard.readLineWHILE_END0
D;JNE
//call
@RETURN615
D=A
@R13
M=D
(call_Keyboard.readChar)
@Keyboard.readChar
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN615)
//Pop
@POP_R616
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R616)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//EQ
@n617
D=A
@EQ
0;JMP
(n617)
//Pop
@POP_R618
D=A
@R14
M=D
//L
@4
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R618)
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//if
@IF619
D=A
@IF
0;JMP
(IF619)
@Keyboard.readLineIF_TRUE0
D;JNE
//goto
@Keyboard.readLineIF_FALSE0
0;JMP
(Keyboard.readLineIF_TRUE0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//EQ
@n620
D=A
@EQ
0;JMP
(n620)
//if
@IF621
D=A
@IF
0;JMP
(IF621)
@Keyboard.readLineIF_TRUE1
D;JNE
//goto
@Keyboard.readLineIF_FALSE1
0;JMP
(Keyboard.readLineIF_TRUE1)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN622
D=A
@R13
M=D
(call_String.eraseLastChar)
@String.eraseLastChar
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN622)
//Pop
@POP_R623
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R623)
//goto
@Keyboard.readLineIF_END1
0;JMP
(Keyboard.readLineIF_FALSE1)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-79
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-79)
//Pop
@POP_R624
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R624)
(Keyboard.readLineIF_END1)
(Keyboard.readLineIF_FALSE0)
//goto
@Keyboard.readLineWHILE_EXP0
0;JMP
(Keyboard.readLineWHILE_END0)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Keyboard.readInt)
@2
D=A
@R14
M=D
@F625
D;JEQ
D=A
@FUNCT
0;JMP
(F625)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN626
D=A
@R13
M=D
(call_Keyboard.readLine)
@Keyboard.readLine
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN626)
//Pop
@POP_R627
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R627)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN628
D=A
@R13
M=D
(call_String.intValue)
@String.intValue
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN628)
//Pop
@POP_R629
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R629)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN630
D=A
@R13
M=D
(call_String.dispose)
@String.dispose
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN630)
//Pop
@POP_R631
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R631)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Sys.init)
@0
D=A
@R14
M=D
@F632
D;JEQ
D=A
@FUNCT
0;JMP
(F632)
//call
@RETURN633
D=A
@R13
M=D
(call_Memory.init)
@Memory.init
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN633)
//Pop
@POP_R634
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R634)
//call
@RETURN635
D=A
@R13
M=D
(call_Math.init)
@Math.init
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN635)
//Pop
@POP_R636
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R636)
//call
@RETURN637
D=A
@R13
M=D
(call_Screen.init)
@Screen.init
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN637)
//Pop
@POP_R638
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R638)
//call
@RETURN639
D=A
@R13
M=D
(call_Output.init)
@Output.init
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN639)
//Pop
@POP_R640
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R640)
//call
@RETURN641
D=A
@R13
M=D
(call_Keyboard.init)
@Keyboard.init
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN641)
//Pop
@POP_R642
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R642)
//call
@RETURN643
D=A
@R13
M=D
(call_Main.main)
@Main.main
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN643)
//Pop
@POP_R644
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R644)
//call
@RETURN645
D=A
@R13
M=D
(call_Sys.halt)
@Sys.halt
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN645)
//Pop
@POP_R646
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R646)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Sys.halt)
@0
D=A
@R14
M=D
@F647
D;JEQ
D=A
@FUNCT
0;JMP
(F647)
(Sys.haltWHILE_EXP0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//NOT
@SP
A=M-1
M=!M
//if
@IF648
D=A
@IF
0;JMP
(IF648)
@Sys.haltWHILE_END0
D;JNE
//goto
@Sys.haltWHILE_EXP0
0;JMP
(Sys.haltWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Sys.wait)
@1
D=A
@R14
M=D
@F649
D;JEQ
D=A
@FUNCT
0;JMP
(F649)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n650
D=A
@LT
0;JMP
(n650)
//if
@IF651
D=A
@IF
0;JMP
(IF651)
@Sys.waitIF_TRUE0
D;JNE
//goto
@Sys.waitIF_FALSE0
0;JMP
(Sys.waitIF_TRUE0)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-80
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-80)
//Pop
@POP_R652
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R652)
(Sys.waitIF_FALSE0)
(Sys.waitWHILE_EXP0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n653
D=A
@GT
0;JMP
(n653)
//NOT
@SP
A=M-1
M=!M
//if
@IF654
D=A
@IF
0;JMP
(IF654)
@Sys.waitWHILE_END0
D;JNE
//Push C
@50
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R655
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R655)
(Sys.waitWHILE_EXP1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n656
D=A
@GT
0;JMP
(n656)
//NOT
@SP
A=M-1
M=!M
//if
@IF657
D=A
@IF
0;JMP
(IF657)
@Sys.waitWHILE_END1
D;JNE
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R658
D=A
@SUB
0;JMP
(SUB_R658)
//Pop
@POP_R659
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R659)
//goto
@Sys.waitWHILE_EXP1
0;JMP
(Sys.waitWHILE_END1)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R660
D=A
@SUB
0;JMP
(SUB_R660)
//Pop
@POP_R661
D=A
@R14
M=D
//A
@0
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R661)
//goto
@Sys.waitWHILE_EXP0
0;JMP
(Sys.waitWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Sys.error)
@0
D=A
@R14
M=D
@F662
D;JEQ
D=A
@FUNCT
0;JMP
(F662)
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-81
D=A
@R13
M=D
@call_String.new
0;JMP
(RETURN-81)
//Push C
@69
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-82
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-82)
//Push C
@82
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-83
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-83)
//Push C
@82
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-84
D=A
@R13
M=D
@call_String.appendChar
0;JMP
(RETURN-84)
@RETURN-85
D=A
@R13
M=D
@call_Output.printString
0;JMP
(RETURN-85)
//Pop
@POP_R663
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R663)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-86
D=A
@R13
M=D
@call_Output.printInt
0;JMP
(RETURN-86)
//Pop
@POP_R664
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R664)
@RETURN-87
D=A
@R13
M=D
@call_Sys.halt
0;JMP
(RETURN-87)
//Pop
@POP_R665
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R665)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.init)
@0
D=A
@R14
M=D
@F666
D;JEQ
D=A
@FUNCT
0;JMP
(F666)
//Push C
@16384
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R667
D=A
@R14
M=D
//S
@Output.4
D=A
@POP
0;JMP
(POP_R667)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R668
D=A
@R14
M=D
//S
@Output.2
D=A
@POP
0;JMP
(POP_R668)
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R669
D=A
@R14
M=D
//S
@Output.1
D=A
@POP
0;JMP
(POP_R669)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R670
D=A
@R14
M=D
//S
@Output.0
D=A
@POP
0;JMP
(POP_R670)
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-88
D=A
@R13
M=D
@call_String.new
0;JMP
(RETURN-88)
//Pop
@POP_R671
D=A
@R14
M=D
//S
@Output.3
D=A
@POP
0;JMP
(POP_R671)
//call
@RETURN672
D=A
@R13
M=D
(call_Output.initMap)
@Output.initMap
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN672)
//Pop
@POP_R673
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R673)
//call
@RETURN674
D=A
@R13
M=D
(call_Output.createShiftedMap)
@Output.createShiftedMap
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN674)
//Pop
@POP_R675
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R675)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.initMap)
@0
D=A
@R14
M=D
@F676
D;JEQ
D=A
@FUNCT
0;JMP
(F676)
//Push C
@127
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-89
D=A
@R13
M=D
@call_Array.new
0;JMP
(RETURN-89)
//Pop
@POP_R677
D=A
@R14
M=D
//S
@Output.5
D=A
@POP
0;JMP
(POP_R677)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN678
D=A
@R13
M=D
(call_Output.create)
@Output.create
D=A
@R14
M=D
@12
D=A
@CALL
0;JMP
(RETURN678)
//Pop
@POP_R679
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R679)
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-90
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-90)
//Pop
@POP_R680
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R680)
//Push C
@33
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-91
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-91)
//Pop
@POP_R681
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R681)
//Push C
@34
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@20
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-92
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-92)
//Pop
@POP_R682
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R682)
//Push C
@35
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@18
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@18
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@18
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@18
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@18
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@18
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-93
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-93)
//Pop
@POP_R683
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R683)
//Push C
@36
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-94
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-94)
//Pop
@POP_R684
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R684)
//Push C
@37
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@35
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@49
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-95
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-95)
//Pop
@POP_R685
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R685)
//Push C
@38
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-96
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-96)
//Pop
@POP_R686
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R686)
//Push C
@39
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-97
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-97)
//Pop
@POP_R687
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R687)
//Push C
@40
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-98
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-98)
//Pop
@POP_R688
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R688)
//Push C
@41
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-99
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-99)
//Pop
@POP_R689
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R689)
//Push C
@42
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-100
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-100)
//Pop
@POP_R690
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R690)
//Push C
@43
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-101
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-101)
//Pop
@POP_R691
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R691)
//Push C
@44
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-102
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-102)
//Pop
@POP_R692
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R692)
//Push C
@45
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-103
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-103)
//Pop
@POP_R693
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R693)
//Push C
@46
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-104
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-104)
//Pop
@POP_R694
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R694)
//Push C
@47
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-105
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-105)
//Pop
@POP_R695
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R695)
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-106
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-106)
//Pop
@POP_R696
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R696)
//Push C
@49
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@14
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-107
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-107)
//Pop
@POP_R697
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R697)
//Push C
@50
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-108
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-108)
//Pop
@POP_R698
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R698)
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@28
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-109
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-109)
//Pop
@POP_R699
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R699)
//Push C
@52
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@28
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@26
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@25
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@60
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-110
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-110)
//Pop
@POP_R700
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R700)
//Push C
@53
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-111
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-111)
//Pop
@POP_R701
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R701)
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@28
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-112
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-112)
//Pop
@POP_R702
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R702)
//Push C
@55
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@49
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-113
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-113)
//Pop
@POP_R703
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R703)
//Push C
@56
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-114
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-114)
//Pop
@POP_R704
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R704)
//Push C
@57
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@62
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@14
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-115
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-115)
//Pop
@POP_R705
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R705)
//Push C
@58
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-116
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-116)
//Pop
@POP_R706
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R706)
//Push C
@59
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-117
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-117)
//Pop
@POP_R707
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R707)
//Push C
@60
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-118
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-118)
//Pop
@POP_R708
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R708)
//Push C
@61
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-119
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-119)
//Pop
@POP_R709
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R709)
//Push C
@62
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-120
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-120)
//Pop
@POP_R710
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R710)
//Push C
@64
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@59
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@59
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@59
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-121
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-121)
//Pop
@POP_R711
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R711)
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-122
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-122)
//Pop
@POP_R712
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R712)
//Push C
@65
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-123
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-123)
//Pop
@POP_R713
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R713)
//Push C
@66
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-124
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-124)
//Pop
@POP_R714
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R714)
//Push C
@67
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@28
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@35
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@35
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@28
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-125
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-125)
//Pop
@POP_R715
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R715)
//Push C
@68
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-126
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-126)
//Pop
@POP_R716
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R716)
//Push C
@69
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@35
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@11
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@11
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@35
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-127
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-127)
//Pop
@POP_R717
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R717)
//Push C
@70
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@35
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@11
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@11
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-128
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-128)
//Pop
@POP_R718
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R718)
//Push C
@71
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@28
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@35
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@59
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@44
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-129
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-129)
//Pop
@POP_R719
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R719)
//Push C
@72
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-130
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-130)
//Pop
@POP_R720
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R720)
//Push C
@73
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-131
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-131)
//Pop
@POP_R721
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R721)
//Push C
@74
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@60
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@14
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-132
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-132)
//Pop
@POP_R722
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R722)
//Push C
@75
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-133
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-133)
//Pop
@POP_R723
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R723)
//Push C
@76
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@35
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-134
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-134)
//Pop
@POP_R724
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R724)
//Push C
@77
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@33
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-135
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-135)
//Pop
@POP_R725
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R725)
//Push C
@78
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@55
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@55
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@59
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@59
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-136
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-136)
//Pop
@POP_R726
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R726)
//Push C
@79
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-137
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-137)
//Pop
@POP_R727
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R727)
//Push C
@80
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-138
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-138)
//Pop
@POP_R728
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R728)
//Push C
@81
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@59
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-139
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-139)
//Pop
@POP_R729
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R729)
//Push C
@82
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-140
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-140)
//Pop
@POP_R730
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R730)
//Push C
@83
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@28
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-141
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-141)
//Pop
@POP_R731
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R731)
//Push C
@84
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@45
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-142
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-142)
//Pop
@POP_R732
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R732)
//Push C
@85
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-143
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-143)
//Pop
@POP_R733
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R733)
//Push C
@86
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-144
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-144)
//Pop
@POP_R734
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R734)
//Push C
@87
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@18
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-145
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-145)
//Pop
@POP_R735
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R735)
//Push C
@88
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-146
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-146)
//Pop
@POP_R736
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R736)
//Push C
@89
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-147
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-147)
//Pop
@POP_R737
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R737)
//Push C
@90
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@49
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@35
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-148
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-148)
//Pop
@POP_R738
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R738)
//Push C
@91
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-149
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-149)
//Pop
@POP_R739
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R739)
//Push C
@92
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-150
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-150)
//Pop
@POP_R740
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R740)
//Push C
@93
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-151
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-151)
//Pop
@POP_R741
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R741)
//Push C
@94
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@8
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@28
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-152
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-152)
//Pop
@POP_R742
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R742)
//Push C
@95
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-153
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-153)
//Pop
@POP_R743
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R743)
//Push C
@96
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-154
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-154)
//Pop
@POP_R744
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R744)
//Push C
@97
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@14
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-155
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-155)
//Pop
@POP_R745
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R745)
//Push C
@98
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-156
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-156)
//Pop
@POP_R746
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R746)
//Push C
@99
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-157
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-157)
//Pop
@POP_R747
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R747)
//Push C
@100
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@60
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-158
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-158)
//Pop
@POP_R748
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R748)
//Push C
@101
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-159
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-159)
//Pop
@POP_R749
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R749)
//Push C
@102
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@28
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@38
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-160
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-160)
//Pop
@POP_R750
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R750)
//Push C
@103
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@62
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-161
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-161)
//Pop
@POP_R751
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R751)
//Push C
@104
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@55
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-162
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-162)
//Pop
@POP_R752
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R752)
//Push C
@105
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@14
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-163
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-163)
//Pop
@POP_R753
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R753)
//Push C
@106
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@56
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-164
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-164)
//Pop
@POP_R754
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R754)
//Push C
@107
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-165
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-165)
//Pop
@POP_R755
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R755)
//Push C
@108
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@14
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-166
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-166)
//Pop
@POP_R756
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R756)
//Push C
@109
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@29
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@43
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@43
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@43
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@43
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-167
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-167)
//Pop
@POP_R757
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R757)
//Push C
@110
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@29
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-168
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-168)
//Pop
@POP_R758
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R758)
//Push C
@111
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-169
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-169)
//Pop
@POP_R759
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R759)
//Push C
@112
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-170
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-170)
//Pop
@POP_R760
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R760)
//Push C
@113
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@62
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-171
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-171)
//Pop
@POP_R761
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R761)
//Push C
@114
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@29
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@55
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@7
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-172
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-172)
//Pop
@POP_R762
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R762)
//Push C
@115
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-173
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-173)
//Pop
@POP_R763
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R763)
//Push C
@116
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@28
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-174
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-174)
//Pop
@POP_R764
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R764)
//Push C
@117
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@54
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-175
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-175)
//Pop
@POP_R765
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R765)
//Push C
@118
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-176
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-176)
//Pop
@POP_R766
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R766)
//Push C
@119
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@18
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-177
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-177)
//Pop
@POP_R767
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R767)
//Push C
@120
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@30
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-178
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-178)
//Pop
@POP_R768
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R768)
//Push C
@121
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@62
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@48
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@24
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@15
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-179
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-179)
//Pop
@POP_R769
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R769)
//Push C
@122
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@27
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@51
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-180
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-180)
//Pop
@POP_R770
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R770)
//Push C
@123
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@56
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@7
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@56
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-181
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-181)
//Pop
@POP_R771
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R771)
//Push C
@124
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-182
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-182)
//Pop
@POP_R772
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R772)
//Push C
@125
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@7
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@56
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@7
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-183
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-183)
//Pop
@POP_R773
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R773)
//Push C
@126
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@38
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@45
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@25
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-184
D=A
@R13
M=D
@call_Output.create
0;JMP
(RETURN-184)
//Pop
@POP_R774
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R774)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.create)
@1
D=A
@R14
M=D
@F775
D;JEQ
D=A
@FUNCT
0;JMP
(F775)
//Push C
@11
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-185
D=A
@R13
M=D
@call_Array.new
0;JMP
(RETURN-185)
//Pop
@POP_R776
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R776)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Output.5
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R777
D=A
@ADD
0;JMP
(ADD_R777)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R778
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R778)
//Pop point
@POP_R779
D=A
@THT
0;JMP
(POP_R779)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R780
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R780)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R781
D=A
@ADD
0;JMP
(ADD_R781)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R782
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R782)
//Pop point
@POP_R783
D=A
@THT
0;JMP
(POP_R783)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R784
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R784)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R785
D=A
@ADD
0;JMP
(ADD_R785)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R786
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R786)
//Pop point
@POP_R787
D=A
@THT
0;JMP
(POP_R787)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R788
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R788)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R789
D=A
@ADD
0;JMP
(ADD_R789)
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R790
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R790)
//Pop point
@POP_R791
D=A
@THT
0;JMP
(POP_R791)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R792
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R792)
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R793
D=A
@ADD
0;JMP
(ADD_R793)
//Push A
@4
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R794
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R794)
//Pop point
@POP_R795
D=A
@THT
0;JMP
(POP_R795)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R796
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R796)
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R797
D=A
@ADD
0;JMP
(ADD_R797)
//Push A
@5
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R798
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R798)
//Pop point
@POP_R799
D=A
@THT
0;JMP
(POP_R799)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R800
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R800)
//Push C
@5
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R801
D=A
@ADD
0;JMP
(ADD_R801)
//Push A
@6
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R802
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R802)
//Pop point
@POP_R803
D=A
@THT
0;JMP
(POP_R803)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R804
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R804)
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R805
D=A
@ADD
0;JMP
(ADD_R805)
//Push A
@7
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R806
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R806)
//Pop point
@POP_R807
D=A
@THT
0;JMP
(POP_R807)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R808
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R808)
//Push C
@7
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R809
D=A
@ADD
0;JMP
(ADD_R809)
//Push A
@8
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R810
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R810)
//Pop point
@POP_R811
D=A
@THT
0;JMP
(POP_R811)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R812
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R812)
//Push C
@8
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R813
D=A
@ADD
0;JMP
(ADD_R813)
//Push A
@9
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R814
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R814)
//Pop point
@POP_R815
D=A
@THT
0;JMP
(POP_R815)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R816
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R816)
//Push C
@9
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R817
D=A
@ADD
0;JMP
(ADD_R817)
//Push A
@10
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R818
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R818)
//Pop point
@POP_R819
D=A
@THT
0;JMP
(POP_R819)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R820
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R820)
//Push C
@10
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R821
D=A
@ADD
0;JMP
(ADD_R821)
//Push A
@11
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R822
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R822)
//Pop point
@POP_R823
D=A
@THT
0;JMP
(POP_R823)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R824
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R824)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.createShiftedMap)
@4
D=A
@R14
M=D
@F825
D;JEQ
D=A
@FUNCT
0;JMP
(F825)
//Push C
@127
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-186
D=A
@R13
M=D
@call_Array.new
0;JMP
(RETURN-186)
//Pop
@POP_R826
D=A
@R14
M=D
//S
@Output.6
D=A
@POP
0;JMP
(POP_R826)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R827
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R827)
(Output.createShiftedMapWHILE_EXP0)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@127
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n828
D=A
@LT
0;JMP
(n828)
//NOT
@SP
A=M-1
M=!M
//if
@IF829
D=A
@IF
0;JMP
(IF829)
@Output.createShiftedMapWHILE_END0
D;JNE
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Output.5
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R830
D=A
@ADD
0;JMP
(ADD_R830)
//Pop point
@POP_R831
D=A
@THT
0;JMP
(POP_R831)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R832
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R832)
//Push C
@11
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-187
D=A
@R13
M=D
@call_Array.new
0;JMP
(RETURN-187)
//Pop
@POP_R833
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R833)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Output.6
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R834
D=A
@ADD
0;JMP
(ADD_R834)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R835
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R835)
//Pop point
@POP_R836
D=A
@THT
0;JMP
(POP_R836)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R837
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R837)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R838
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R838)
(Output.createShiftedMapWHILE_EXP1)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@11
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n839
D=A
@LT
0;JMP
(n839)
//NOT
@SP
A=M-1
M=!M
//if
@IF840
D=A
@IF
0;JMP
(IF840)
@Output.createShiftedMapWHILE_END1
D;JNE
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R841
D=A
@ADD
0;JMP
(ADD_R841)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R842
D=A
@ADD
0;JMP
(ADD_R842)
//Pop point
@POP_R843
D=A
@THT
0;JMP
(POP_R843)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@256
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-188
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-188)
//Pop
@POP_R844
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R844)
//Pop point
@POP_R845
D=A
@THT
0;JMP
(POP_R845)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R846
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R846)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R847
D=A
@ADD
0;JMP
(ADD_R847)
//Pop
@POP_R848
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R848)
//goto
@Output.createShiftedMapWHILE_EXP1
0;JMP
(Output.createShiftedMapWHILE_END1)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n849
D=A
@EQ
0;JMP
(n849)
//if
@IF850
D=A
@IF
0;JMP
(IF850)
@Output.createShiftedMapIF_TRUE0
D;JNE
//goto
@Output.createShiftedMapIF_FALSE0
0;JMP
(Output.createShiftedMapIF_TRUE0)
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R851
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R851)
//goto
@Output.createShiftedMapIF_END0
0;JMP
(Output.createShiftedMapIF_FALSE0)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R852
D=A
@ADD
0;JMP
(ADD_R852)
//Pop
@POP_R853
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R853)
(Output.createShiftedMapIF_END0)
//goto
@Output.createShiftedMapWHILE_EXP0
0;JMP
(Output.createShiftedMapWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.getMap)
@1
D=A
@R14
M=D
@F854
D;JEQ
D=A
@FUNCT
0;JMP
(F854)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n855
D=A
@LT
0;JMP
(n855)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@126
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n856
D=A
@GT
0;JMP
(n856)
//OR
@OR_R857
D=A
@OR
0;JMP
(OR_R857)
//if
@IF858
D=A
@IF
0;JMP
(IF858)
@Output.getMapIF_TRUE0
D;JNE
//goto
@Output.getMapIF_FALSE0
0;JMP
(Output.getMapIF_TRUE0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R859
D=A
@R14
M=D
//A
@0
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R859)
(Output.getMapIF_FALSE0)
//Push S
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF860
D=A
@IF
0;JMP
(IF860)
@Output.getMapIF_TRUE1
D;JNE
//goto
@Output.getMapIF_FALSE1
0;JMP
(Output.getMapIF_TRUE1)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Output.5
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R861
D=A
@ADD
0;JMP
(ADD_R861)
//Pop point
@POP_R862
D=A
@THT
0;JMP
(POP_R862)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R863
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R863)
//goto
@Output.getMapIF_END1
0;JMP
(Output.getMapIF_FALSE1)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Output.6
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R864
D=A
@ADD
0;JMP
(ADD_R864)
//Pop point
@POP_R865
D=A
@THT
0;JMP
(POP_R865)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R866
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R866)
(Output.getMapIF_END1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.drawChar)
@4
D=A
@R14
M=D
@F867
D;JEQ
D=A
@FUNCT
0;JMP
(F867)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN868
D=A
@R13
M=D
(call_Output.getMap)
@Output.getMap
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN868)
//Pop
@POP_R869
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R869)
//Push S
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R870
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R870)
(Output.drawCharWHILE_EXP0)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@11
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n871
D=A
@LT
0;JMP
(n871)
//NOT
@SP
A=M-1
M=!M
//if
@IF872
D=A
@IF
0;JMP
(IF872)
@Output.drawCharWHILE_END0
D;JNE
//Push S
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF873
D=A
@IF
0;JMP
(IF873)
@Output.drawCharIF_TRUE0
D;JNE
//goto
@Output.drawCharIF_FALSE0
0;JMP
(Output.drawCharIF_TRUE0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Output.4
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R874
D=A
@ADD
0;JMP
(ADD_R874)
//Pop point
@POP_R875
D=A
@THT
0;JMP
(POP_R875)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@256
D=A
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//AND
@AND_R876
D=A
@AND
0;JMP
(AND_R876)
//Pop
@POP_R877
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R877)
//goto
@Output.drawCharIF_END0
0;JMP
(Output.drawCharIF_FALSE0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Output.4
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R878
D=A
@ADD
0;JMP
(ADD_R878)
//Pop point
@POP_R879
D=A
@THT
0;JMP
(POP_R879)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@255
D=A
@SP
M=M+1
A=M-1
M=D
//AND
@AND_R880
D=A
@AND
0;JMP
(AND_R880)
//Pop
@POP_R881
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R881)
(Output.drawCharIF_END0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Output.4
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R882
D=A
@ADD
0;JMP
(ADD_R882)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R883
D=A
@ADD
0;JMP
(ADD_R883)
//Pop point
@POP_R884
D=A
@THT
0;JMP
(POP_R884)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//OR
@OR_R885
D=A
@OR
0;JMP
(OR_R885)
//Pop
@POP_R886
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R886)
//Pop point
@POP_R887
D=A
@THT
0;JMP
(POP_R887)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R888
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R888)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R889
D=A
@ADD
0;JMP
(ADD_R889)
//Pop
@POP_R890
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R890)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R891
D=A
@ADD
0;JMP
(ADD_R891)
//Pop
@POP_R892
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R892)
//goto
@Output.drawCharWHILE_EXP0
0;JMP
(Output.drawCharWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.moveCursor)
@0
D=A
@R14
M=D
@F893
D;JEQ
D=A
@FUNCT
0;JMP
(F893)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n894
D=A
@LT
0;JMP
(n894)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@22
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n895
D=A
@GT
0;JMP
(n895)
//OR
@OR_R896
D=A
@OR
0;JMP
(OR_R896)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n897
D=A
@LT
0;JMP
(n897)
//OR
@OR_R898
D=A
@OR
0;JMP
(OR_R898)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@63
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n899
D=A
@GT
0;JMP
(n899)
//OR
@OR_R900
D=A
@OR
0;JMP
(OR_R900)
//if
@IF901
D=A
@IF
0;JMP
(IF901)
@Output.moveCursorIF_TRUE0
D;JNE
//goto
@Output.moveCursorIF_FALSE0
0;JMP
(Output.moveCursorIF_TRUE0)
//Push C
@20
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-189
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-189)
//Pop
@POP_R902
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R902)
(Output.moveCursorIF_FALSE0)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-190
D=A
@R13
M=D
@call_Math.divide
0;JMP
(RETURN-190)
//Pop
@POP_R903
D=A
@R14
M=D
//S
@Output.0
D=A
@POP
0;JMP
(POP_R903)
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@352
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-191
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-191)
//ADD
@ADD_R904
D=A
@ADD
0;JMP
(ADD_R904)
//Push S
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R905
D=A
@ADD
0;JMP
(ADD_R905)
//Pop
@POP_R906
D=A
@R14
M=D
//S
@Output.1
D=A
@POP
0;JMP
(POP_R906)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-192
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-192)
//EQ
@n907
D=A
@EQ
0;JMP
(n907)
//Pop
@POP_R908
D=A
@R14
M=D
//S
@Output.2
D=A
@POP
0;JMP
(POP_R908)
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//call
@RETURN909
D=A
@R13
M=D
(call_Output.drawChar)
@Output.drawChar
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN909)
//Pop
@POP_R910
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R910)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.printChar)
@0
D=A
@R14
M=D
@F911
D;JEQ
D=A
@FUNCT
0;JMP
(F911)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-193
D=A
@R13
M=D
@call_String.newLine
0;JMP
(RETURN-193)
//EQ
@n912
D=A
@EQ
0;JMP
(n912)
//if
@IF913
D=A
@IF
0;JMP
(IF913)
@Output.printCharIF_TRUE0
D;JNE
//goto
@Output.printCharIF_FALSE0
0;JMP
(Output.printCharIF_TRUE0)
//call
@RETURN914
D=A
@R13
M=D
(call_Output.println)
@Output.println
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN914)
//Pop
@POP_R915
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R915)
//goto
@Output.printCharIF_END0
0;JMP
(Output.printCharIF_FALSE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-194
D=A
@R13
M=D
@call_String.backSpace
0;JMP
(RETURN-194)
//EQ
@n916
D=A
@EQ
0;JMP
(n916)
//if
@IF917
D=A
@IF
0;JMP
(IF917)
@Output.printCharIF_TRUE1
D;JNE
//goto
@Output.printCharIF_FALSE1
0;JMP
(Output.printCharIF_TRUE1)
//call
@RETURN918
D=A
@R13
M=D
(call_Output.backSpace)
@Output.backSpace
D=A
@R14
M=D
@0
D=A
@CALL
0;JMP
(RETURN918)
//Pop
@POP_R919
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R919)
//goto
@Output.printCharIF_END1
0;JMP
(Output.printCharIF_FALSE1)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-195
D=A
@R13
M=D
@call_Output.drawChar
0;JMP
(RETURN-195)
//Pop
@POP_R920
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R920)
//Push S
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//if
@IF921
D=A
@IF
0;JMP
(IF921)
@Output.printCharIF_TRUE2
D;JNE
//goto
@Output.printCharIF_FALSE2
0;JMP
(Output.printCharIF_TRUE2)
//Push S
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R922
D=A
@ADD
0;JMP
(ADD_R922)
//Pop
@POP_R923
D=A
@R14
M=D
//S
@Output.0
D=A
@POP
0;JMP
(POP_R923)
//Push S
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R924
D=A
@ADD
0;JMP
(ADD_R924)
//Pop
@POP_R925
D=A
@R14
M=D
//S
@Output.1
D=A
@POP
0;JMP
(POP_R925)
(Output.printCharIF_FALSE2)
//Push S
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n926
D=A
@EQ
0;JMP
(n926)
//if
@IF927
D=A
@IF
0;JMP
(IF927)
@Output.printCharIF_TRUE3
D;JNE
//goto
@Output.printCharIF_FALSE3
0;JMP
(Output.printCharIF_TRUE3)
@RETURN-196
D=A
@R13
M=D
@call_Output.println
0;JMP
(RETURN-196)
//Pop
@POP_R928
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R928)
//goto
@Output.printCharIF_END3
0;JMP
(Output.printCharIF_FALSE3)
//Push S
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R929
D=A
@R14
M=D
//S
@Output.2
D=A
@POP
0;JMP
(POP_R929)
(Output.printCharIF_END3)
(Output.printCharIF_END1)
(Output.printCharIF_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.printString)
@2
D=A
@R14
M=D
@F930
D;JEQ
D=A
@FUNCT
0;JMP
(F930)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN931
D=A
@R13
M=D
(call_String.length)
@String.length
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN931)
//Pop
@POP_R932
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R932)
(Output.printStringWHILE_EXP0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n933
D=A
@LT
0;JMP
(n933)
//NOT
@SP
A=M-1
M=!M
//if
@IF934
D=A
@IF
0;JMP
(IF934)
@Output.printStringWHILE_END0
D;JNE
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN935
D=A
@R13
M=D
(call_String.charAt)
@String.charAt
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN935)
@RETURN-197
D=A
@R13
M=D
@call_Output.printChar
0;JMP
(RETURN-197)
//Pop
@POP_R936
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R936)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R937
D=A
@ADD
0;JMP
(ADD_R937)
//Pop
@POP_R938
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R938)
//goto
@Output.printStringWHILE_EXP0
0;JMP
(Output.printStringWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.printInt)
@0
D=A
@R14
M=D
@F939
D;JEQ
D=A
@FUNCT
0;JMP
(F939)
//Push S
@Output.3
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN940
D=A
@R13
M=D
(call_String.setInt)
@String.setInt
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN940)
//Pop
@POP_R941
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R941)
//Push S
@Output.3
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-198
D=A
@R13
M=D
@call_Output.printString
0;JMP
(RETURN-198)
//Pop
@POP_R942
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R942)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.println)
@0
D=A
@R14
M=D
@F943
D;JEQ
D=A
@FUNCT
0;JMP
(F943)
//Push S
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@352
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R944
D=A
@ADD
0;JMP
(ADD_R944)
//Push S
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R945
D=A
@SUB
0;JMP
(SUB_R945)
//Pop
@POP_R946
D=A
@R14
M=D
//S
@Output.1
D=A
@POP
0;JMP
(POP_R946)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R947
D=A
@R14
M=D
//S
@Output.0
D=A
@POP
0;JMP
(POP_R947)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R948
D=A
@R14
M=D
//S
@Output.2
D=A
@POP
0;JMP
(POP_R948)
//Push S
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@8128
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n949
D=A
@EQ
0;JMP
(n949)
//if
@IF950
D=A
@IF
0;JMP
(IF950)
@Output.printlnIF_TRUE0
D;JNE
//goto
@Output.printlnIF_FALSE0
0;JMP
(Output.printlnIF_TRUE0)
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R951
D=A
@R14
M=D
//S
@Output.1
D=A
@POP
0;JMP
(POP_R951)
(Output.printlnIF_FALSE0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Output.backSpace)
@0
D=A
@R14
M=D
@F952
D;JEQ
D=A
@FUNCT
0;JMP
(F952)
//Push S
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF953
D=A
@IF
0;JMP
(IF953)
@Output.backSpaceIF_TRUE0
D;JNE
//goto
@Output.backSpaceIF_FALSE0
0;JMP
(Output.backSpaceIF_TRUE0)
//Push S
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n954
D=A
@GT
0;JMP
(n954)
//if
@IF955
D=A
@IF
0;JMP
(IF955)
@Output.backSpaceIF_TRUE1
D;JNE
//goto
@Output.backSpaceIF_FALSE1
0;JMP
(Output.backSpaceIF_TRUE1)
//Push S
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R956
D=A
@SUB
0;JMP
(SUB_R956)
//Pop
@POP_R957
D=A
@R14
M=D
//S
@Output.0
D=A
@POP
0;JMP
(POP_R957)
//Push S
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R958
D=A
@SUB
0;JMP
(SUB_R958)
//Pop
@POP_R959
D=A
@R14
M=D
//S
@Output.1
D=A
@POP
0;JMP
(POP_R959)
//goto
@Output.backSpaceIF_END1
0;JMP
(Output.backSpaceIF_FALSE1)
//Push C
@31
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R960
D=A
@R14
M=D
//S
@Output.0
D=A
@POP
0;JMP
(POP_R960)
//Push S
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n961
D=A
@EQ
0;JMP
(n961)
//if
@IF962
D=A
@IF
0;JMP
(IF962)
@Output.backSpaceIF_TRUE2
D;JNE
//goto
@Output.backSpaceIF_FALSE2
0;JMP
(Output.backSpaceIF_TRUE2)
//Push C
@8128
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R963
D=A
@R14
M=D
//S
@Output.1
D=A
@POP
0;JMP
(POP_R963)
(Output.backSpaceIF_FALSE2)
//Push S
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@321
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R964
D=A
@SUB
0;JMP
(SUB_R964)
//Pop
@POP_R965
D=A
@R14
M=D
//S
@Output.1
D=A
@POP
0;JMP
(POP_R965)
(Output.backSpaceIF_END1)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R966
D=A
@R14
M=D
//S
@Output.2
D=A
@POP
0;JMP
(POP_R966)
//goto
@Output.backSpaceIF_END0
0;JMP
(Output.backSpaceIF_FALSE0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R967
D=A
@R14
M=D
//S
@Output.2
D=A
@POP
0;JMP
(POP_R967)
(Output.backSpaceIF_END0)
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-199
D=A
@R13
M=D
@call_Output.drawChar
0;JMP
(RETURN-199)
//Pop
@POP_R968
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R968)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.init)
@1
D=A
@R14
M=D
@F969
D;JEQ
D=A
@FUNCT
0;JMP
(F969)
//Push C
@16384
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R970
D=A
@R14
M=D
//S
@Screen.1
D=A
@POP
0;JMP
(POP_R970)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R971
D=A
@R14
M=D
//S
@Screen.2
D=A
@POP
0;JMP
(POP_R971)
//Push C
@17
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-200
D=A
@R13
M=D
@call_Array.new
0;JMP
(RETURN-200)
//Pop
@POP_R972
D=A
@R14
M=D
//S
@Screen.0
D=A
@POP
0;JMP
(POP_R972)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push S
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R973
D=A
@ADD
0;JMP
(ADD_R973)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R974
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R974)
//Pop point
@POP_R975
D=A
@THT
0;JMP
(POP_R975)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R976
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R976)
(Screen.initWHILE_EXP0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n977
D=A
@LT
0;JMP
(n977)
//NOT
@SP
A=M-1
M=!M
//if
@IF978
D=A
@IF
0;JMP
(IF978)
@Screen.initWHILE_END0
D;JNE
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R979
D=A
@ADD
0;JMP
(ADD_R979)
//Pop
@POP_R980
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R980)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R981
D=A
@ADD
0;JMP
(ADD_R981)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R982
D=A
@SUB
0;JMP
(SUB_R982)
//Push S
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R983
D=A
@ADD
0;JMP
(ADD_R983)
//Pop point
@POP_R984
D=A
@THT
0;JMP
(POP_R984)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R985
D=A
@SUB
0;JMP
(SUB_R985)
//Push S
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R986
D=A
@ADD
0;JMP
(ADD_R986)
//Pop point
@POP_R987
D=A
@THT
0;JMP
(POP_R987)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R988
D=A
@ADD
0;JMP
(ADD_R988)
//Pop
@POP_R989
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R989)
//Pop point
@POP_R990
D=A
@THT
0;JMP
(POP_R990)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R991
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R991)
//goto
@Screen.initWHILE_EXP0
0;JMP
(Screen.initWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.clearScreen)
@1
D=A
@R14
M=D
@F992
D;JEQ
D=A
@FUNCT
0;JMP
(F992)
(Screen.clearScreenWHILE_EXP0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@8192
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n993
D=A
@LT
0;JMP
(n993)
//NOT
@SP
A=M-1
M=!M
//if
@IF994
D=A
@IF
0;JMP
(IF994)
@Screen.clearScreenWHILE_END0
D;JNE
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Screen.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R995
D=A
@ADD
0;JMP
(ADD_R995)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R996
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R996)
//Pop point
@POP_R997
D=A
@THT
0;JMP
(POP_R997)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R998
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R998)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R999
D=A
@ADD
0;JMP
(ADD_R999)
//Pop
@POP_R1000
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1000)
//goto
@Screen.clearScreenWHILE_EXP0
0;JMP
(Screen.clearScreenWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.updateLocation)
@0
D=A
@R14
M=D
@F1001
D;JEQ
D=A
@FUNCT
0;JMP
(F1001)
//Push S
@Screen.2
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF1002
D=A
@IF
0;JMP
(IF1002)
@Screen.updateLocationIF_TRUE0
D;JNE
//goto
@Screen.updateLocationIF_FALSE0
0;JMP
(Screen.updateLocationIF_TRUE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Screen.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1003
D=A
@ADD
0;JMP
(ADD_R1003)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Screen.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1004
D=A
@ADD
0;JMP
(ADD_R1004)
//Pop point
@POP_R1005
D=A
@THT
0;JMP
(POP_R1005)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//OR
@OR_R1006
D=A
@OR
0;JMP
(OR_R1006)
//Pop
@POP_R1007
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1007)
//Pop point
@POP_R1008
D=A
@THT
0;JMP
(POP_R1008)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1009
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1009)
//goto
@Screen.updateLocationIF_END0
0;JMP
(Screen.updateLocationIF_FALSE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Screen.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1010
D=A
@ADD
0;JMP
(ADD_R1010)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Screen.1
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1011
D=A
@ADD
0;JMP
(ADD_R1011)
//Pop point
@POP_R1012
D=A
@THT
0;JMP
(POP_R1012)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//AND
@AND_R1013
D=A
@AND
0;JMP
(AND_R1013)
//Pop
@POP_R1014
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1014)
//Pop point
@POP_R1015
D=A
@THT
0;JMP
(POP_R1015)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1016
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1016)
(Screen.updateLocationIF_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.setColor)
@0
D=A
@R14
M=D
@F1017
D;JEQ
D=A
@FUNCT
0;JMP
(F1017)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1018
D=A
@R14
M=D
//S
@Screen.2
D=A
@POP
0;JMP
(POP_R1018)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.drawPixel)
@3
D=A
@R14
M=D
@F1019
D;JEQ
D=A
@FUNCT
0;JMP
(F1019)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1020
D=A
@LT
0;JMP
(n1020)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@511
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n1021
D=A
@GT
0;JMP
(n1021)
//OR
@OR_R1022
D=A
@OR
0;JMP
(OR_R1022)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1023
D=A
@LT
0;JMP
(n1023)
//OR
@OR_R1024
D=A
@OR
0;JMP
(OR_R1024)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@255
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n1025
D=A
@GT
0;JMP
(n1025)
//OR
@OR_R1026
D=A
@OR
0;JMP
(OR_R1026)
//if
@IF1027
D=A
@IF
0;JMP
(IF1027)
@Screen.drawPixelIF_TRUE0
D;JNE
//goto
@Screen.drawPixelIF_FALSE0
0;JMP
(Screen.drawPixelIF_TRUE0)
//Push C
@7
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-201
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-201)
//Pop
@POP_R1028
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1028)
(Screen.drawPixelIF_FALSE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-202
D=A
@R13
M=D
@call_Math.divide
0;JMP
(RETURN-202)
//Pop
@POP_R1029
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1029)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-203
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-203)
//SUB
@SUB_R1030
D=A
@SUB
0;JMP
(SUB_R1030)
//Pop
@POP_R1031
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1031)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-204
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-204)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1032
D=A
@ADD
0;JMP
(ADD_R1032)
//Pop
@POP_R1033
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1033)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1034
D=A
@ADD
0;JMP
(ADD_R1034)
//Pop point
@POP_R1035
D=A
@THT
0;JMP
(POP_R1035)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN1036
D=A
@R13
M=D
(call_Screen.updateLocation)
@Screen.updateLocation
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN1036)
//Pop
@POP_R1037
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1037)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.drawConditional)
@0
D=A
@R14
M=D
@F1038
D;JEQ
D=A
@FUNCT
0;JMP
(F1038)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF1039
D=A
@IF
0;JMP
(IF1039)
@Screen.drawConditionalIF_TRUE0
D;JNE
//goto
@Screen.drawConditionalIF_FALSE0
0;JMP
(Screen.drawConditionalIF_TRUE0)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN1040
D=A
@R13
M=D
(call_Screen.drawPixel)
@Screen.drawPixel
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN1040)
//Pop
@POP_R1041
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1041)
//goto
@Screen.drawConditionalIF_END0
0;JMP
(Screen.drawConditionalIF_FALSE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-205
D=A
@R13
M=D
@call_Screen.drawPixel
0;JMP
(RETURN-205)
//Pop
@POP_R1042
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1042)
(Screen.drawConditionalIF_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.drawLine)
@11
D=A
@R14
M=D
@F1043
D;JEQ
D=A
@FUNCT
0;JMP
(F1043)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1044
D=A
@LT
0;JMP
(n1044)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@511
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n1045
D=A
@GT
0;JMP
(n1045)
//OR
@OR_R1046
D=A
@OR
0;JMP
(OR_R1046)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1047
D=A
@LT
0;JMP
(n1047)
//OR
@OR_R1048
D=A
@OR
0;JMP
(OR_R1048)
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@255
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n1049
D=A
@GT
0;JMP
(n1049)
//OR
@OR_R1050
D=A
@OR
0;JMP
(OR_R1050)
//if
@IF1051
D=A
@IF
0;JMP
(IF1051)
@Screen.drawLineIF_TRUE0
D;JNE
//goto
@Screen.drawLineIF_FALSE0
0;JMP
(Screen.drawLineIF_TRUE0)
//Push C
@8
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-206
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-206)
//Pop
@POP_R1052
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1052)
(Screen.drawLineIF_FALSE0)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1053
D=A
@SUB
0;JMP
(SUB_R1053)
@RETURN-207
D=A
@R13
M=D
@call_Math.abs
0;JMP
(RETURN-207)
//Pop
@POP_R1054
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1054)
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1055
D=A
@SUB
0;JMP
(SUB_R1055)
@RETURN-208
D=A
@R13
M=D
@call_Math.abs
0;JMP
(RETURN-208)
//Pop
@POP_R1056
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1056)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n1057
D=A
@LT
0;JMP
(n1057)
//Pop
@POP_R1058
D=A
@R14
M=D
//L
@6
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1058)
//Push L
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n1059
D=A
@LT
0;JMP
(n1059)
//AND
@AND_R1060
D=A
@AND
0;JMP
(AND_R1060)
//Push L
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n1061
D=A
@LT
0;JMP
(n1061)
//AND
@AND_R1062
D=A
@AND
0;JMP
(AND_R1062)
//OR
@OR_R1063
D=A
@OR
0;JMP
(OR_R1063)
//if
@IF1064
D=A
@IF
0;JMP
(IF1064)
@Screen.drawLineIF_TRUE1
D;JNE
//goto
@Screen.drawLineIF_FALSE1
0;JMP
(Screen.drawLineIF_TRUE1)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1065
D=A
@R14
M=D
//L
@4
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1065)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1066
D=A
@R14
M=D
//A
@0
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R1066)
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1067
D=A
@R14
M=D
//A
@2
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R1067)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1068
D=A
@R14
M=D
//L
@4
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1068)
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1069
D=A
@R14
M=D
//A
@1
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R1069)
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1070
D=A
@R14
M=D
//A
@3
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R1070)
(Screen.drawLineIF_FALSE1)
//Push L
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF1071
D=A
@IF
0;JMP
(IF1071)
@Screen.drawLineIF_TRUE2
D;JNE
//goto
@Screen.drawLineIF_FALSE2
0;JMP
(Screen.drawLineIF_TRUE2)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1072
D=A
@R14
M=D
//L
@4
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1072)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1073
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1073)
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1074
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1074)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1075
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1075)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1076
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1076)
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1077
D=A
@R14
M=D
//L
@8
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1077)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n1078
D=A
@GT
0;JMP
(n1078)
//Pop
@POP_R1079
D=A
@R14
M=D
//L
@7
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1079)
//goto
@Screen.drawLineIF_END2
0;JMP
(Screen.drawLineIF_FALSE2)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1080
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1080)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1081
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1081)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1082
D=A
@R14
M=D
//L
@8
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1082)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n1083
D=A
@GT
0;JMP
(n1083)
//Pop
@POP_R1084
D=A
@R14
M=D
//L
@7
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1084)
(Screen.drawLineIF_END2)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-209
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-209)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1085
D=A
@SUB
0;JMP
(SUB_R1085)
//Pop
@POP_R1086
D=A
@R14
M=D
//L
@5
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1086)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-210
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-210)
//Pop
@POP_R1087
D=A
@R14
M=D
//L
@9
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1087)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1088
D=A
@SUB
0;JMP
(SUB_R1088)
@RETURN-211
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-211)
//Pop
@POP_R1089
D=A
@R14
M=D
//L
@10
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1089)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN1090
D=A
@R13
M=D
(call_Screen.drawConditional)
@Screen.drawConditional
D=A
@R14
M=D
@3
D=A
@CALL
0;JMP
(RETURN1090)
//Pop
@POP_R1091
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1091)
(Screen.drawLineWHILE_EXP0)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@8
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n1092
D=A
@LT
0;JMP
(n1092)
//NOT
@SP
A=M-1
M=!M
//if
@IF1093
D=A
@IF
0;JMP
(IF1093)
@Screen.drawLineWHILE_END0
D;JNE
//Push L
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1094
D=A
@LT
0;JMP
(n1094)
//if
@IF1095
D=A
@IF
0;JMP
(IF1095)
@Screen.drawLineIF_TRUE3
D;JNE
//goto
@Screen.drawLineIF_FALSE3
0;JMP
(Screen.drawLineIF_TRUE3)
//Push L
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@9
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1096
D=A
@ADD
0;JMP
(ADD_R1096)
//Pop
@POP_R1097
D=A
@R14
M=D
//L
@5
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1097)
//goto
@Screen.drawLineIF_END3
0;JMP
(Screen.drawLineIF_FALSE3)
//Push L
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@10
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1098
D=A
@ADD
0;JMP
(ADD_R1098)
//Pop
@POP_R1099
D=A
@R14
M=D
//L
@5
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1099)
//Push L
@7
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//if
@IF1100
D=A
@IF
0;JMP
(IF1100)
@Screen.drawLineIF_TRUE4
D;JNE
//goto
@Screen.drawLineIF_FALSE4
0;JMP
(Screen.drawLineIF_TRUE4)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1101
D=A
@SUB
0;JMP
(SUB_R1101)
//Pop
@POP_R1102
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1102)
//goto
@Screen.drawLineIF_END4
0;JMP
(Screen.drawLineIF_FALSE4)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1103
D=A
@ADD
0;JMP
(ADD_R1103)
//Pop
@POP_R1104
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1104)
(Screen.drawLineIF_END4)
(Screen.drawLineIF_END3)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1105
D=A
@ADD
0;JMP
(ADD_R1105)
//Pop
@POP_R1106
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1106)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-212
D=A
@R13
M=D
@call_Screen.drawConditional
0;JMP
(RETURN-212)
//Pop
@POP_R1107
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1107)
//goto
@Screen.drawLineWHILE_EXP0
0;JMP
(Screen.drawLineWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.drawRectangle)
@9
D=A
@R14
M=D
@F1108
D;JEQ
D=A
@FUNCT
0;JMP
(F1108)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n1109
D=A
@GT
0;JMP
(n1109)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n1110
D=A
@GT
0;JMP
(n1110)
//OR
@OR_R1111
D=A
@OR
0;JMP
(OR_R1111)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1112
D=A
@LT
0;JMP
(n1112)
//OR
@OR_R1113
D=A
@OR
0;JMP
(OR_R1113)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@511
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n1114
D=A
@GT
0;JMP
(n1114)
//OR
@OR_R1115
D=A
@OR
0;JMP
(OR_R1115)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1116
D=A
@LT
0;JMP
(n1116)
//OR
@OR_R1117
D=A
@OR
0;JMP
(OR_R1117)
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@255
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n1118
D=A
@GT
0;JMP
(n1118)
//OR
@OR_R1119
D=A
@OR
0;JMP
(OR_R1119)
//if
@IF1120
D=A
@IF
0;JMP
(IF1120)
@Screen.drawRectangleIF_TRUE0
D;JNE
//goto
@Screen.drawRectangleIF_FALSE0
0;JMP
(Screen.drawRectangleIF_TRUE0)
//Push C
@9
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-213
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-213)
//Pop
@POP_R1121
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1121)
(Screen.drawRectangleIF_FALSE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-214
D=A
@R13
M=D
@call_Math.divide
0;JMP
(RETURN-214)
//Pop
@POP_R1122
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1122)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-215
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-215)
//SUB
@SUB_R1123
D=A
@SUB
0;JMP
(SUB_R1123)
//Pop
@POP_R1124
D=A
@R14
M=D
//L
@7
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1124)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-216
D=A
@R13
M=D
@call_Math.divide
0;JMP
(RETURN-216)
//Pop
@POP_R1125
D=A
@R14
M=D
//L
@4
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1125)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-217
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-217)
//SUB
@SUB_R1126
D=A
@SUB
0;JMP
(SUB_R1126)
//Pop
@POP_R1127
D=A
@R14
M=D
//L
@8
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1127)
//Push L
@7
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1128
D=A
@ADD
0;JMP
(ADD_R1128)
//Pop point
@POP_R1129
D=A
@THT
0;JMP
(POP_R1129)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1130
D=A
@SUB
0;JMP
(SUB_R1130)
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R1131
D=A
@R14
M=D
//L
@6
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1131)
//Push L
@8
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1132
D=A
@ADD
0;JMP
(ADD_R1132)
//Push S
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1133
D=A
@ADD
0;JMP
(ADD_R1133)
//Pop point
@POP_R1134
D=A
@THT
0;JMP
(POP_R1134)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1135
D=A
@SUB
0;JMP
(SUB_R1135)
//Pop
@POP_R1136
D=A
@R14
M=D
//L
@5
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1136)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-218
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-218)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1137
D=A
@ADD
0;JMP
(ADD_R1137)
//Pop
@POP_R1138
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1138)
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1139
D=A
@SUB
0;JMP
(SUB_R1139)
//Pop
@POP_R1140
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1140)
(Screen.drawRectangleWHILE_EXP0)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n1141
D=A
@GT
0;JMP
(n1141)
//NOT
@SP
A=M-1
M=!M
//NOT
@SP
A=M-1
M=!M
//if
@IF1142
D=A
@IF
0;JMP
(IF1142)
@Screen.drawRectangleWHILE_END0
D;JNE
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1143
D=A
@ADD
0;JMP
(ADD_R1143)
//Pop
@POP_R1144
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1144)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n1145
D=A
@EQ
0;JMP
(n1145)
//if
@IF1146
D=A
@IF
0;JMP
(IF1146)
@Screen.drawRectangleIF_TRUE1
D;JNE
//goto
@Screen.drawRectangleIF_FALSE1
0;JMP
(Screen.drawRectangleIF_TRUE1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//AND
@AND_R1147
D=A
@AND
0;JMP
(AND_R1147)
@RETURN-219
D=A
@R13
M=D
@call_Screen.updateLocation
0;JMP
(RETURN-219)
//Pop
@POP_R1148
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1148)
//goto
@Screen.drawRectangleIF_END1
0;JMP
(Screen.drawRectangleIF_FALSE1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-220
D=A
@R13
M=D
@call_Screen.updateLocation
0;JMP
(RETURN-220)
//Pop
@POP_R1149
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1149)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1150
D=A
@ADD
0;JMP
(ADD_R1150)
//Pop
@POP_R1151
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1151)
(Screen.drawRectangleWHILE_EXP1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n1152
D=A
@LT
0;JMP
(n1152)
//NOT
@SP
A=M-1
M=!M
//if
@IF1153
D=A
@IF
0;JMP
(IF1153)
@Screen.drawRectangleWHILE_END1
D;JNE
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
@RETURN-221
D=A
@R13
M=D
@call_Screen.updateLocation
0;JMP
(RETURN-221)
//Pop
@POP_R1154
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1154)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1155
D=A
@ADD
0;JMP
(ADD_R1155)
//Pop
@POP_R1156
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1156)
//goto
@Screen.drawRectangleWHILE_EXP1
0;JMP
(Screen.drawRectangleWHILE_END1)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-222
D=A
@R13
M=D
@call_Screen.updateLocation
0;JMP
(RETURN-222)
//Pop
@POP_R1157
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1157)
(Screen.drawRectangleIF_END1)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1158
D=A
@ADD
0;JMP
(ADD_R1158)
//Pop
@POP_R1159
D=A
@R14
M=D
//A
@1
D=A
@ARG
D=D+M
@POP
0;JMP
(POP_R1159)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1160
D=A
@ADD
0;JMP
(ADD_R1160)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1161
D=A
@SUB
0;JMP
(SUB_R1161)
//Pop
@POP_R1162
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1162)
//goto
@Screen.drawRectangleWHILE_EXP0
0;JMP
(Screen.drawRectangleWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.drawHorizontal)
@11
D=A
@R14
M=D
@F1163
D;JEQ
D=A
@FUNCT
0;JMP
(F1163)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN1164
D=A
@R13
M=D
(call_Math.min)
@Math.min
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN1164)
//Pop
@POP_R1165
D=A
@R14
M=D
//L
@7
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1165)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN1166
D=A
@R13
M=D
(call_Math.max)
@Math.max
D=A
@R14
M=D
@2
D=A
@CALL
0;JMP
(RETURN1166)
//Pop
@POP_R1167
D=A
@R14
M=D
//L
@8
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1167)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//GT
@n1168
D=A
@GT
0;JMP
(n1168)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@256
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1169
D=A
@LT
0;JMP
(n1169)
//AND
@AND_R1170
D=A
@AND
0;JMP
(AND_R1170)
//Push L
@7
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@512
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1171
D=A
@LT
0;JMP
(n1171)
//AND
@AND_R1172
D=A
@AND
0;JMP
(AND_R1172)
//Push L
@8
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
//GT
@n1173
D=A
@GT
0;JMP
(n1173)
//AND
@AND_R1174
D=A
@AND
0;JMP
(AND_R1174)
//if
@IF1175
D=A
@IF
0;JMP
(IF1175)
@Screen.drawHorizontalIF_TRUE0
D;JNE
//goto
@Screen.drawHorizontalIF_FALSE0
0;JMP
(Screen.drawHorizontalIF_TRUE0)
//Push L
@7
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-223
D=A
@R13
M=D
@call_Math.max
0;JMP
(RETURN-223)
//Pop
@POP_R1176
D=A
@R14
M=D
//L
@7
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1176)
//Push L
@8
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@511
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-224
D=A
@R13
M=D
@call_Math.min
0;JMP
(RETURN-224)
//Pop
@POP_R1177
D=A
@R14
M=D
//L
@8
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1177)
//Push L
@7
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-225
D=A
@R13
M=D
@call_Math.divide
0;JMP
(RETURN-225)
//Pop
@POP_R1178
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1178)
//Push L
@7
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-226
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-226)
//SUB
@SUB_R1179
D=A
@SUB
0;JMP
(SUB_R1179)
//Pop
@POP_R1180
D=A
@R14
M=D
//L
@9
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1180)
//Push L
@8
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-227
D=A
@R13
M=D
@call_Math.divide
0;JMP
(RETURN-227)
//Pop
@POP_R1181
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1181)
//Push L
@8
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@16
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-228
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-228)
//SUB
@SUB_R1182
D=A
@SUB
0;JMP
(SUB_R1182)
//Pop
@POP_R1183
D=A
@R14
M=D
//L
@10
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1183)
//Push L
@9
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1184
D=A
@ADD
0;JMP
(ADD_R1184)
//Pop point
@POP_R1185
D=A
@THT
0;JMP
(POP_R1185)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1186
D=A
@SUB
0;JMP
(SUB_R1186)
//NOT
@SP
A=M-1
M=!M
//Pop
@POP_R1187
D=A
@R14
M=D
//L
@5
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1187)
//Push L
@10
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1188
D=A
@ADD
0;JMP
(ADD_R1188)
//Push S
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1189
D=A
@ADD
0;JMP
(ADD_R1189)
//Pop point
@POP_R1190
D=A
@THT
0;JMP
(POP_R1190)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1191
D=A
@SUB
0;JMP
(SUB_R1191)
//Pop
@POP_R1192
D=A
@R14
M=D
//L
@4
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1192)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@32
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-229
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-229)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1193
D=A
@ADD
0;JMP
(ADD_R1193)
//Pop
@POP_R1194
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1194)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1195
D=A
@SUB
0;JMP
(SUB_R1195)
//Pop
@POP_R1196
D=A
@R14
M=D
//L
@6
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1196)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1197
D=A
@ADD
0;JMP
(ADD_R1197)
//Pop
@POP_R1198
D=A
@R14
M=D
//L
@3
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1198)
//Push L
@6
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n1199
D=A
@EQ
0;JMP
(n1199)
//if
@IF1200
D=A
@IF
0;JMP
(IF1200)
@Screen.drawHorizontalIF_TRUE1
D;JNE
//goto
@Screen.drawHorizontalIF_FALSE1
0;JMP
(Screen.drawHorizontalIF_TRUE1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//AND
@AND_R1201
D=A
@AND
0;JMP
(AND_R1201)
@RETURN-230
D=A
@R13
M=D
@call_Screen.updateLocation
0;JMP
(RETURN-230)
//Pop
@POP_R1202
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1202)
//goto
@Screen.drawHorizontalIF_END1
0;JMP
(Screen.drawHorizontalIF_FALSE1)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@5
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-231
D=A
@R13
M=D
@call_Screen.updateLocation
0;JMP
(RETURN-231)
//Pop
@POP_R1203
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1203)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1204
D=A
@ADD
0;JMP
(ADD_R1204)
//Pop
@POP_R1205
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1205)
(Screen.drawHorizontalWHILE_EXP0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n1206
D=A
@LT
0;JMP
(n1206)
//NOT
@SP
A=M-1
M=!M
//if
@IF1207
D=A
@IF
0;JMP
(IF1207)
@Screen.drawHorizontalWHILE_END0
D;JNE
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//NEG
@SP
A=M-1
M=-M
@RETURN-232
D=A
@R13
M=D
@call_Screen.updateLocation
0;JMP
(RETURN-232)
//Pop
@POP_R1208
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1208)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1209
D=A
@ADD
0;JMP
(ADD_R1209)
//Pop
@POP_R1210
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1210)
//goto
@Screen.drawHorizontalWHILE_EXP0
0;JMP
(Screen.drawHorizontalWHILE_END0)
//Push L
@3
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@4
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-233
D=A
@R13
M=D
@call_Screen.updateLocation
0;JMP
(RETURN-233)
//Pop
@POP_R1211
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1211)
(Screen.drawHorizontalIF_END1)
(Screen.drawHorizontalIF_FALSE0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.drawSymetric)
@0
D=A
@R14
M=D
@F1212
D;JEQ
D=A
@FUNCT
0;JMP
(F1212)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1213
D=A
@SUB
0;JMP
(SUB_R1213)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1214
D=A
@ADD
0;JMP
(ADD_R1214)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1215
D=A
@SUB
0;JMP
(SUB_R1215)
//call
@RETURN1216
D=A
@R13
M=D
(call_Screen.drawHorizontal)
@Screen.drawHorizontal
D=A
@R14
M=D
@3
D=A
@CALL
0;JMP
(RETURN1216)
//Pop
@POP_R1217
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1217)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1218
D=A
@ADD
0;JMP
(ADD_R1218)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1219
D=A
@ADD
0;JMP
(ADD_R1219)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1220
D=A
@SUB
0;JMP
(SUB_R1220)
@RETURN-234
D=A
@R13
M=D
@call_Screen.drawHorizontal
0;JMP
(RETURN-234)
//Pop
@POP_R1221
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1221)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1222
D=A
@SUB
0;JMP
(SUB_R1222)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1223
D=A
@SUB
0;JMP
(SUB_R1223)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1224
D=A
@ADD
0;JMP
(ADD_R1224)
@RETURN-235
D=A
@R13
M=D
@call_Screen.drawHorizontal
0;JMP
(RETURN-235)
//Pop
@POP_R1225
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1225)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1226
D=A
@ADD
0;JMP
(ADD_R1226)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1227
D=A
@SUB
0;JMP
(SUB_R1227)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1228
D=A
@ADD
0;JMP
(ADD_R1228)
@RETURN-236
D=A
@R13
M=D
@call_Screen.drawHorizontal
0;JMP
(RETURN-236)
//Pop
@POP_R1229
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1229)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Screen.drawCircle)
@3
D=A
@R14
M=D
@F1230
D;JEQ
D=A
@FUNCT
0;JMP
(F1230)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1231
D=A
@LT
0;JMP
(n1231)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@511
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n1232
D=A
@GT
0;JMP
(n1232)
//OR
@OR_R1233
D=A
@OR
0;JMP
(OR_R1233)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1234
D=A
@LT
0;JMP
(n1234)
//OR
@OR_R1235
D=A
@OR
0;JMP
(OR_R1235)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@255
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n1236
D=A
@GT
0;JMP
(n1236)
//OR
@OR_R1237
D=A
@OR
0;JMP
(OR_R1237)
//if
@IF1238
D=A
@IF
0;JMP
(IF1238)
@Screen.drawCircleIF_TRUE0
D;JNE
//goto
@Screen.drawCircleIF_FALSE0
0;JMP
(Screen.drawCircleIF_TRUE0)
//Push C
@12
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-237
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-237)
//Pop
@POP_R1239
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1239)
(Screen.drawCircleIF_FALSE0)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1240
D=A
@SUB
0;JMP
(SUB_R1240)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1241
D=A
@LT
0;JMP
(n1241)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1242
D=A
@ADD
0;JMP
(ADD_R1242)
//Push C
@511
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n1243
D=A
@GT
0;JMP
(n1243)
//OR
@OR_R1244
D=A
@OR
0;JMP
(OR_R1244)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1245
D=A
@SUB
0;JMP
(SUB_R1245)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1246
D=A
@LT
0;JMP
(n1246)
//OR
@OR_R1247
D=A
@OR
0;JMP
(OR_R1247)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1248
D=A
@ADD
0;JMP
(ADD_R1248)
//Push C
@255
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n1249
D=A
@GT
0;JMP
(n1249)
//OR
@OR_R1250
D=A
@OR
0;JMP
(OR_R1250)
//if
@IF1251
D=A
@IF
0;JMP
(IF1251)
@Screen.drawCircleIF_TRUE1
D;JNE
//goto
@Screen.drawCircleIF_FALSE1
0;JMP
(Screen.drawCircleIF_TRUE1)
//Push C
@13
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-238
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-238)
//Pop
@POP_R1252
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1252)
(Screen.drawCircleIF_FALSE1)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1253
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1253)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1254
D=A
@SUB
0;JMP
(SUB_R1254)
//Pop
@POP_R1255
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1255)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN1256
D=A
@R13
M=D
(call_Screen.drawSymetric)
@Screen.drawSymetric
D=A
@R14
M=D
@4
D=A
@CALL
0;JMP
(RETURN1256)
//Pop
@POP_R1257
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1257)
(Screen.drawCircleWHILE_EXP0)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//GT
@n1258
D=A
@GT
0;JMP
(n1258)
//NOT
@SP
A=M-1
M=!M
//if
@IF1259
D=A
@IF
0;JMP
(IF1259)
@Screen.drawCircleWHILE_END0
D;JNE
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1260
D=A
@LT
0;JMP
(n1260)
//if
@IF1261
D=A
@IF
0;JMP
(IF1261)
@Screen.drawCircleIF_TRUE2
D;JNE
//goto
@Screen.drawCircleIF_FALSE2
0;JMP
(Screen.drawCircleIF_TRUE2)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-239
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-239)
//ADD
@ADD_R1262
D=A
@ADD
0;JMP
(ADD_R1262)
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1263
D=A
@ADD
0;JMP
(ADD_R1263)
//Pop
@POP_R1264
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1264)
//goto
@Screen.drawCircleIF_END2
0;JMP
(Screen.drawCircleIF_FALSE2)
//Push L
@2
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1265
D=A
@SUB
0;JMP
(SUB_R1265)
@RETURN-240
D=A
@R13
M=D
@call_Math.multiply
0;JMP
(RETURN-240)
//ADD
@ADD_R1266
D=A
@ADD
0;JMP
(ADD_R1266)
//Push C
@5
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1267
D=A
@ADD
0;JMP
(ADD_R1267)
//Pop
@POP_R1268
D=A
@R14
M=D
//L
@2
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1268)
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1269
D=A
@SUB
0;JMP
(SUB_R1269)
//Pop
@POP_R1270
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1270)
(Screen.drawCircleIF_END2)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1271
D=A
@ADD
0;JMP
(ADD_R1271)
//Pop
@POP_R1272
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1272)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-241
D=A
@R13
M=D
@call_Screen.drawSymetric
0;JMP
(RETURN-241)
//Pop
@POP_R1273
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1273)
//goto
@Screen.drawCircleWHILE_EXP0
0;JMP
(Screen.drawCircleWHILE_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Memory.init)
@0
D=A
@R14
M=D
@F1274
D;JEQ
D=A
@FUNCT
0;JMP
(F1274)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1275
D=A
@R14
M=D
//S
@Memory.0
D=A
@POP
0;JMP
(POP_R1275)
//Push C
@2048
D=A
@SP
M=M+1
A=M-1
M=D
//Push S
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1276
D=A
@ADD
0;JMP
(ADD_R1276)
//Push C
@14334
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1277
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1277)
//Pop point
@POP_R1278
D=A
@THT
0;JMP
(POP_R1278)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1279
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1279)
//Push C
@2049
D=A
@SP
M=M+1
A=M-1
M=D
//Push S
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1280
D=A
@ADD
0;JMP
(ADD_R1280)
//Push C
@2050
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1281
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1281)
//Pop point
@POP_R1282
D=A
@THT
0;JMP
(POP_R1282)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1283
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1283)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Memory.peek)
@0
D=A
@R14
M=D
@F1284
D;JEQ
D=A
@FUNCT
0;JMP
(F1284)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1285
D=A
@ADD
0;JMP
(ADD_R1285)
//Pop point
@POP_R1286
D=A
@THT
0;JMP
(POP_R1286)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Memory.poke)
@0
D=A
@R14
M=D
@F1287
D;JEQ
D=A
@FUNCT
0;JMP
(F1287)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push S
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1288
D=A
@ADD
0;JMP
(ADD_R1288)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1289
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1289)
//Pop point
@POP_R1290
D=A
@THT
0;JMP
(POP_R1290)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1291
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1291)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Memory.alloc)
@1
D=A
@R14
M=D
@F1292
D;JEQ
D=A
@FUNCT
0;JMP
(F1292)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1293
D=A
@LT
0;JMP
(n1293)
//if
@IF1294
D=A
@IF
0;JMP
(IF1294)
@Memory.allocIF_TRUE0
D;JNE
//goto
@Memory.allocIF_FALSE0
0;JMP
(Memory.allocIF_TRUE0)
//Push C
@5
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-242
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-242)
//Pop
@POP_R1295
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1295)
(Memory.allocIF_FALSE0)
//Push C
@2048
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1296
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1296)
(Memory.allocWHILE_EXP0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1297
D=A
@ADD
0;JMP
(ADD_R1297)
//Pop point
@POP_R1298
D=A
@THT
0;JMP
(POP_R1298)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//LT
@n1299
D=A
@LT
0;JMP
(n1299)
//NOT
@SP
A=M-1
M=!M
//if
@IF1300
D=A
@IF
0;JMP
(IF1300)
@Memory.allocWHILE_END0
D;JNE
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1301
D=A
@ADD
0;JMP
(ADD_R1301)
//Pop point
@POP_R1302
D=A
@THT
0;JMP
(POP_R1302)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1303
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1303)
//goto
@Memory.allocWHILE_EXP0
0;JMP
(Memory.allocWHILE_END0)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1304
D=A
@ADD
0;JMP
(ADD_R1304)
//Push C
@16379
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n1305
D=A
@GT
0;JMP
(n1305)
//if
@IF1306
D=A
@IF
0;JMP
(IF1306)
@Memory.allocIF_TRUE1
D;JNE
//goto
@Memory.allocIF_FALSE1
0;JMP
(Memory.allocIF_TRUE1)
//Push C
@6
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-243
D=A
@R13
M=D
@call_Sys.error
0;JMP
(RETURN-243)
//Pop
@POP_R1307
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1307)
(Memory.allocIF_FALSE1)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1308
D=A
@ADD
0;JMP
(ADD_R1308)
//Pop point
@POP_R1309
D=A
@THT
0;JMP
(POP_R1309)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1310
D=A
@ADD
0;JMP
(ADD_R1310)
//GT
@n1311
D=A
@GT
0;JMP
(n1311)
//if
@IF1312
D=A
@IF
0;JMP
(IF1312)
@Memory.allocIF_TRUE2
D;JNE
//goto
@Memory.allocIF_FALSE2
0;JMP
(Memory.allocIF_TRUE2)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1313
D=A
@ADD
0;JMP
(ADD_R1313)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1314
D=A
@ADD
0;JMP
(ADD_R1314)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1315
D=A
@ADD
0;JMP
(ADD_R1315)
//Pop point
@POP_R1316
D=A
@THT
0;JMP
(POP_R1316)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1317
D=A
@SUB
0;JMP
(SUB_R1317)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1318
D=A
@SUB
0;JMP
(SUB_R1318)
//Pop
@POP_R1319
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1319)
//Pop point
@POP_R1320
D=A
@THT
0;JMP
(POP_R1320)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1321
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1321)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1322
D=A
@ADD
0;JMP
(ADD_R1322)
//Pop point
@POP_R1323
D=A
@THT
0;JMP
(POP_R1323)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1324
D=A
@ADD
0;JMP
(ADD_R1324)
//EQ
@n1325
D=A
@EQ
0;JMP
(n1325)
//if
@IF1326
D=A
@IF
0;JMP
(IF1326)
@Memory.allocIF_TRUE3
D;JNE
//goto
@Memory.allocIF_FALSE3
0;JMP
(Memory.allocIF_TRUE3)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1327
D=A
@ADD
0;JMP
(ADD_R1327)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1328
D=A
@ADD
0;JMP
(ADD_R1328)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1329
D=A
@ADD
0;JMP
(ADD_R1329)
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1330
D=A
@ADD
0;JMP
(ADD_R1330)
//Pop
@POP_R1331
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1331)
//Pop point
@POP_R1332
D=A
@THT
0;JMP
(POP_R1332)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1333
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1333)
//goto
@Memory.allocIF_END3
0;JMP
(Memory.allocIF_FALSE3)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1334
D=A
@ADD
0;JMP
(ADD_R1334)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1335
D=A
@ADD
0;JMP
(ADD_R1335)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1336
D=A
@ADD
0;JMP
(ADD_R1336)
//Pop point
@POP_R1337
D=A
@THT
0;JMP
(POP_R1337)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1338
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1338)
//Pop point
@POP_R1339
D=A
@THT
0;JMP
(POP_R1339)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1340
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1340)
(Memory.allocIF_END3)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1341
D=A
@ADD
0;JMP
(ADD_R1341)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1342
D=A
@ADD
0;JMP
(ADD_R1342)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1343
D=A
@ADD
0;JMP
(ADD_R1343)
//Pop
@POP_R1344
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1344)
//Pop point
@POP_R1345
D=A
@THT
0;JMP
(POP_R1345)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1346
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1346)
(Memory.allocIF_FALSE2)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1347
D=A
@ADD
0;JMP
(ADD_R1347)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1348
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1348)
//Pop point
@POP_R1349
D=A
@THT
0;JMP
(POP_R1349)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1350
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1350)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1351
D=A
@ADD
0;JMP
(ADD_R1351)
@RETURNS
0;JMP
//funct
(Memory.deAlloc)
@2
D=A
@R14
M=D
@F1352
D;JEQ
D=A
@FUNCT
0;JMP
(F1352)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1353
D=A
@SUB
0;JMP
(SUB_R1353)
//Pop
@POP_R1354
D=A
@R14
M=D
//L
@0
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1354)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1355
D=A
@ADD
0;JMP
(ADD_R1355)
//Pop point
@POP_R1356
D=A
@THT
0;JMP
(POP_R1356)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1357
D=A
@R14
M=D
//L
@1
D=A
@LCL
D=D+M
@POP
0;JMP
(POP_R1357)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1358
D=A
@ADD
0;JMP
(ADD_R1358)
//Pop point
@POP_R1359
D=A
@THT
0;JMP
(POP_R1359)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n1360
D=A
@EQ
0;JMP
(n1360)
//if
@IF1361
D=A
@IF
0;JMP
(IF1361)
@Memory.deAllocIF_TRUE0
D;JNE
//goto
@Memory.deAllocIF_FALSE0
0;JMP
(Memory.deAllocIF_TRUE0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1362
D=A
@ADD
0;JMP
(ADD_R1362)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1363
D=A
@ADD
0;JMP
(ADD_R1363)
//Pop point
@POP_R1364
D=A
@THT
0;JMP
(POP_R1364)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1365
D=A
@SUB
0;JMP
(SUB_R1365)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1366
D=A
@SUB
0;JMP
(SUB_R1366)
//Pop
@POP_R1367
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1367)
//Pop point
@POP_R1368
D=A
@THT
0;JMP
(POP_R1368)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1369
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1369)
//goto
@Memory.deAllocIF_END0
0;JMP
(Memory.deAllocIF_FALSE0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1370
D=A
@ADD
0;JMP
(ADD_R1370)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1371
D=A
@ADD
0;JMP
(ADD_R1371)
//Pop point
@POP_R1372
D=A
@THT
0;JMP
(POP_R1372)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1373
D=A
@SUB
0;JMP
(SUB_R1373)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1374
D=A
@ADD
0;JMP
(ADD_R1374)
//Pop point
@POP_R1375
D=A
@THT
0;JMP
(POP_R1375)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1376
D=A
@ADD
0;JMP
(ADD_R1376)
//Pop
@POP_R1377
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1377)
//Pop point
@POP_R1378
D=A
@THT
0;JMP
(POP_R1378)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1379
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1379)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1380
D=A
@ADD
0;JMP
(ADD_R1380)
//Pop point
@POP_R1381
D=A
@THT
0;JMP
(POP_R1381)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1382
D=A
@ADD
0;JMP
(ADD_R1382)
//EQ
@n1383
D=A
@EQ
0;JMP
(n1383)
//if
@IF1384
D=A
@IF
0;JMP
(IF1384)
@Memory.deAllocIF_TRUE1
D;JNE
//goto
@Memory.deAllocIF_FALSE1
0;JMP
(Memory.deAllocIF_TRUE1)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1385
D=A
@ADD
0;JMP
(ADD_R1385)
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1386
D=A
@ADD
0;JMP
(ADD_R1386)
//Pop
@POP_R1387
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1387)
//Pop point
@POP_R1388
D=A
@THT
0;JMP
(POP_R1388)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1389
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1389)
//goto
@Memory.deAllocIF_END1
0;JMP
(Memory.deAllocIF_FALSE1)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@0
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1390
D=A
@ADD
0;JMP
(ADD_R1390)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Push L
@1
D=A
@LCL
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1391
D=A
@ADD
0;JMP
(ADD_R1391)
//Pop point
@POP_R1392
D=A
@THT
0;JMP
(POP_R1392)
//Push THT
@0
D=A
@THAT
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1393
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1393)
//Pop point
@POP_R1394
D=A
@THT
0;JMP
(POP_R1394)
//Push TMP
@0
D=A
@5
A=A+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1395
D=A
@R14
M=D
//THT
@0
D=A
@THAT
D=D+M
@POP
0;JMP
(POP_R1395)
(Memory.deAllocIF_END1)
(Memory.deAllocIF_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Bat.new)
@0
D=A
@R14
M=D
@F1396
D;JEQ
D=A
@FUNCT
0;JMP
(F1396)
//Push C
@5
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-244
D=A
@R13
M=D
@call_Memory.alloc
0;JMP
(RETURN-244)
//Pop point
@POP_R1397
D=A
@THS
0;JMP
(POP_R1397)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1398
D=A
@R14
M=D
//THS
@0
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R1398)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1399
D=A
@R14
M=D
//THS
@1
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R1399)
//Push A
@2
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1400
D=A
@R14
M=D
//THS
@2
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R1400)
//Push A
@3
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1401
D=A
@R14
M=D
//THS
@3
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R1401)
//Push C
@2
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1402
D=A
@R14
M=D
//THS
@4
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R1402)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN1403
D=A
@R13
M=D
(call_Bat.show)
@Bat.show
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN1403)
//Pop
@POP_R1404
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1404)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Bat.dispose)
@0
D=A
@R14
M=D
@F1405
D;JEQ
D=A
@FUNCT
0;JMP
(F1405)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R1406
D=A
@THS
0;JMP
(POP_R1406)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-245
D=A
@R13
M=D
@call_Memory.deAlloc
0;JMP
(RETURN-245)
//Pop
@POP_R1407
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1407)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Bat.show)
@0
D=A
@R14
M=D
@F1408
D;JEQ
D=A
@FUNCT
0;JMP
(F1408)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R1409
D=A
@THS
0;JMP
(POP_R1409)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
@RETURN-246
D=A
@R13
M=D
@call_Screen.setColor
0;JMP
(RETURN-246)
//Pop
@POP_R1410
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1410)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN1411
D=A
@R13
M=D
(call_Bat.draw)
@Bat.draw
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN1411)
//Pop
@POP_R1412
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1412)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Bat.hide)
@0
D=A
@R14
M=D
@F1413
D;JEQ
D=A
@FUNCT
0;JMP
(F1413)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R1414
D=A
@THS
0;JMP
(POP_R1414)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-247
D=A
@R13
M=D
@call_Screen.setColor
0;JMP
(RETURN-247)
//Pop
@POP_R1415
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1415)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-248
D=A
@R13
M=D
@call_Bat.draw
0;JMP
(RETURN-248)
//Pop
@POP_R1416
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1416)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Bat.draw)
@0
D=A
@R14
M=D
@F1417
D;JEQ
D=A
@FUNCT
0;JMP
(F1417)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R1418
D=A
@THS
0;JMP
(POP_R1418)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1419
D=A
@ADD
0;JMP
(ADD_R1419)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1420
D=A
@ADD
0;JMP
(ADD_R1420)
@RETURN-249
D=A
@R13
M=D
@call_Screen.drawRectangle
0;JMP
(RETURN-249)
//Pop
@POP_R1421
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1421)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Bat.setDirection)
@0
D=A
@R14
M=D
@F1422
D;JEQ
D=A
@FUNCT
0;JMP
(F1422)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R1423
D=A
@THS
0;JMP
(POP_R1423)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1424
D=A
@R14
M=D
//THS
@4
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R1424)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Bat.getLeft)
@0
D=A
@R14
M=D
@F1425
D;JEQ
D=A
@FUNCT
0;JMP
(F1425)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R1426
D=A
@THS
0;JMP
(POP_R1426)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Bat.getRight)
@0
D=A
@R14
M=D
@F1427
D;JEQ
D=A
@FUNCT
0;JMP
(F1427)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R1428
D=A
@THS
0;JMP
(POP_R1428)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1429
D=A
@ADD
0;JMP
(ADD_R1429)
@RETURNS
0;JMP
//funct
(Bat.setWidth)
@0
D=A
@R14
M=D
@F1430
D;JEQ
D=A
@FUNCT
0;JMP
(F1430)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R1431
D=A
@THS
0;JMP
(POP_R1431)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
//call
@RETURN1432
D=A
@R13
M=D
(call_Bat.hide)
@Bat.hide
D=A
@R14
M=D
@1
D=A
@CALL
0;JMP
(RETURN1432)
//Pop
@POP_R1433
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1433)
//Push A
@1
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1434
D=A
@R14
M=D
//THS
@2
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R1434)
//Push Point1
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@RETURN-250
D=A
@R13
M=D
@call_Bat.show
0;JMP
(RETURN-250)
//Pop
@POP_R1435
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1435)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
//funct
(Bat.move)
@0
D=A
@R14
M=D
@F1436
D;JEQ
D=A
@FUNCT
0;JMP
(F1436)
//Push A
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Pop point
@POP_R1437
D=A
@THS
0;JMP
(POP_R1437)
//Push THS
@4
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//EQ
@n1438
D=A
@EQ
0;JMP
(n1438)
//if
@IF1439
D=A
@IF
0;JMP
(IF1439)
@Bat.moveIF_TRUE0
D;JNE
//goto
@Bat.moveIF_FALSE0
0;JMP
(Bat.moveIF_TRUE0)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1440
D=A
@SUB
0;JMP
(SUB_R1440)
//Pop
@POP_R1441
D=A
@R14
M=D
//THS
@0
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R1441)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//LT
@n1442
D=A
@LT
0;JMP
(n1442)
//if
@IF1443
D=A
@IF
0;JMP
(IF1443)
@Bat.moveIF_TRUE1
D;JNE
//goto
@Bat.moveIF_FALSE1
0;JMP
(Bat.moveIF_TRUE1)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop
@POP_R1444
D=A
@R14
M=D
//THS
@0
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R1444)
(Bat.moveIF_FALSE1)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-251
D=A
@R13
M=D
@call_Screen.setColor
0;JMP
(RETURN-251)
//Pop
@POP_R1445
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1445)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1446
D=A
@ADD
0;JMP
(ADD_R1446)
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1447
D=A
@ADD
0;JMP
(ADD_R1447)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1448
D=A
@ADD
0;JMP
(ADD_R1448)
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1449
D=A
@ADD
0;JMP
(ADD_R1449)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1450
D=A
@ADD
0;JMP
(ADD_R1450)
@RETURN-252
D=A
@R13
M=D
@call_Screen.drawRectangle
0;JMP
(RETURN-252)
//Pop
@POP_R1451
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1451)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
@RETURN-253
D=A
@R13
M=D
@call_Screen.setColor
0;JMP
(RETURN-253)
//Pop
@POP_R1452
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1452)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1453
D=A
@ADD
0;JMP
(ADD_R1453)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1454
D=A
@ADD
0;JMP
(ADD_R1454)
@RETURN-254
D=A
@R13
M=D
@call_Screen.drawRectangle
0;JMP
(RETURN-254)
//Pop
@POP_R1455
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1455)
//goto
@Bat.moveIF_END0
0;JMP
(Bat.moveIF_FALSE0)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1456
D=A
@ADD
0;JMP
(ADD_R1456)
//Pop
@POP_R1457
D=A
@R14
M=D
//THS
@0
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R1457)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1458
D=A
@ADD
0;JMP
(ADD_R1458)
//Push C
@511
D=A
@SP
M=M+1
A=M-1
M=D
//GT
@n1459
D=A
@GT
0;JMP
(n1459)
//if
@IF1460
D=A
@IF
0;JMP
(IF1460)
@Bat.moveIF_TRUE2
D;JNE
//goto
@Bat.moveIF_FALSE2
0;JMP
(Bat.moveIF_TRUE2)
//Push C
@511
D=A
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1461
D=A
@SUB
0;JMP
(SUB_R1461)
//Pop
@POP_R1462
D=A
@R14
M=D
//THS
@0
D=A
@THIS
D=D+M
@POP
0;JMP
(POP_R1462)
(Bat.moveIF_FALSE2)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURN-255
D=A
@R13
M=D
@call_Screen.setColor
0;JMP
(RETURN-255)
//Pop
@POP_R1463
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1463)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@4
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1464
D=A
@SUB
0;JMP
(SUB_R1464)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push C
@1
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1465
D=A
@SUB
0;JMP
(SUB_R1465)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1466
D=A
@ADD
0;JMP
(ADD_R1466)
@RETURN-256
D=A
@R13
M=D
@call_Screen.drawRectangle
0;JMP
(RETURN-256)
//Pop
@POP_R1467
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1467)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
//NOT
@SP
A=M-1
M=!M
@RETURN-257
D=A
@R13
M=D
@call_Screen.setColor
0;JMP
(RETURN-257)
//Pop
@POP_R1468
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1468)
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1469
D=A
@ADD
0;JMP
(ADD_R1469)
//Push C
@3
D=A
@SP
M=M+1
A=M-1
M=D
//SUB
@SUB_R1470
D=A
@SUB
0;JMP
(SUB_R1470)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@0
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@2
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1471
D=A
@ADD
0;JMP
(ADD_R1471)
//Push THS
@1
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//Push THS
@3
D=A
@THIS
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//ADD
@ADD_R1472
D=A
@ADD
0;JMP
(ADD_R1472)
@RETURN-258
D=A
@R13
M=D
@call_Screen.drawRectangle
0;JMP
(RETURN-258)
//Pop
@POP_R1473
D=A
@R14
M=D
//TMP
@0
D=A
@5
D=D+A
@POP
0;JMP
(POP_R1473)
(Bat.moveIF_END0)
//Push C
@0
D=A
@SP
M=M+1
A=M-1
M=D
@RETURNS
0;JMP
